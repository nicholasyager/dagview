<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="306365"><g><title>libsystem_malloc.dylib`_free (852 samples, 0.28%)</title><rect x="0.0003%" y="357" width="0.2781%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="852"/><text x="0.2503%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (240 samples, 0.08%)</title><rect x="0.2784%" y="357" width="0.0783%" height="15" fill="rgb(217,0,24)" fg:x="853" fg:w="240"/><text x="0.5284%" y="367.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.01%)</title><rect x="0.3610%" y="357" width="0.0144%" height="15" fill="rgb(221,193,54)" fg:x="1106" fg:w="44"/><text x="0.6110%" y="367.50"></text></g><g><title>powergraph`&lt;powergraph::PowerEdgeCandidate as core::cmp::PartialEq&gt;::eq (98 samples, 0.03%)</title><rect x="0.3842%" y="357" width="0.0320%" height="15" fill="rgb(248,212,6)" fg:x="1177" fg:w="98"/><text x="0.6342%" y="367.50"></text></g><g><title>powergraph`DYLD-STUB$$free (213 samples, 0.07%)</title><rect x="0.4250%" y="357" width="0.0695%" height="15" fill="rgb(208,68,35)" fg:x="1302" fg:w="213"/><text x="0.6750%" y="367.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (39 samples, 0.01%)</title><rect x="0.5017%" y="357" width="0.0127%" height="15" fill="rgb(232,128,0)" fg:x="1537" fg:w="39"/><text x="0.7517%" y="367.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (39 samples, 0.01%)</title><rect x="0.5170%" y="357" width="0.0127%" height="15" fill="rgb(207,160,47)" fg:x="1584" fg:w="39"/><text x="0.7670%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (281 samples, 0.09%)</title><rect x="0.7214%" y="341" width="0.0917%" height="15" fill="rgb(228,23,34)" fg:x="2210" fg:w="281"/><text x="0.9714%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_free (578 samples, 0.19%)</title><rect x="0.8131%" y="341" width="0.1887%" height="15" fill="rgb(218,30,26)" fg:x="2491" fg:w="578"/><text x="1.0631%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,919 samples, 0.63%)</title><rect x="1.0021%" y="341" width="0.6264%" height="15" fill="rgb(220,122,19)" fg:x="3070" fg:w="1919"/><text x="1.2521%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (95 samples, 0.03%)</title><rect x="1.6441%" y="341" width="0.0310%" height="15" fill="rgb(250,228,42)" fg:x="5037" fg:w="95"/><text x="1.8941%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (59 samples, 0.02%)</title><rect x="1.6559%" y="325" width="0.0193%" height="15" fill="rgb(240,193,28)" fg:x="5073" fg:w="59"/><text x="1.9059%" y="335.50"></text></g><g><title>libsystem_platform.dylib`__bzero (138 samples, 0.05%)</title><rect x="1.6781%" y="341" width="0.0450%" height="15" fill="rgb(216,20,37)" fg:x="5141" fg:w="138"/><text x="1.9281%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (429 samples, 0.14%)</title><rect x="1.7234%" y="341" width="0.1400%" height="15" fill="rgb(206,188,39)" fg:x="5280" fg:w="429"/><text x="1.9734%" y="351.50"></text></g><g><title>powergraph`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (55 samples, 0.02%)</title><rect x="1.8635%" y="341" width="0.0180%" height="15" fill="rgb(217,207,13)" fg:x="5709" fg:w="55"/><text x="2.1135%" y="351.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.01%)</title><rect x="1.8814%" y="341" width="0.0134%" height="15" fill="rgb(231,73,38)" fg:x="5764" fg:w="41"/><text x="2.1314%" y="351.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (53 samples, 0.02%)</title><rect x="1.8948%" y="341" width="0.0173%" height="15" fill="rgb(225,20,46)" fg:x="5805" fg:w="53"/><text x="2.1448%" y="351.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (36 samples, 0.01%)</title><rect x="1.9121%" y="341" width="0.0118%" height="15" fill="rgb(210,31,41)" fg:x="5858" fg:w="36"/><text x="2.1621%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_free (52 samples, 0.02%)</title><rect x="1.9545%" y="309" width="0.0170%" height="15" fill="rgb(221,200,47)" fg:x="5988" fg:w="52"/><text x="2.2045%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (70 samples, 0.02%)</title><rect x="1.9839%" y="213" width="0.0228%" height="15" fill="rgb(226,26,5)" fg:x="6078" fg:w="70"/><text x="2.2339%" y="223.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (102 samples, 0.03%)</title><rect x="1.9797%" y="229" width="0.0333%" height="15" fill="rgb(249,33,26)" fg:x="6065" fg:w="102"/><text x="2.2297%" y="239.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (109 samples, 0.04%)</title><rect x="1.9780%" y="261" width="0.0356%" height="15" fill="rgb(235,183,28)" fg:x="6060" fg:w="109"/><text x="2.2280%" y="271.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (104 samples, 0.03%)</title><rect x="1.9797%" y="245" width="0.0339%" height="15" fill="rgb(221,5,38)" fg:x="6065" fg:w="104"/><text x="2.2297%" y="255.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (121 samples, 0.04%)</title><rect x="1.9777%" y="293" width="0.0395%" height="15" fill="rgb(247,18,42)" fg:x="6059" fg:w="121"/><text x="2.2277%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (121 samples, 0.04%)</title><rect x="1.9777%" y="277" width="0.0395%" height="15" fill="rgb(241,131,45)" fg:x="6059" fg:w="121"/><text x="2.2277%" y="287.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (136 samples, 0.04%)</title><rect x="1.9774%" y="309" width="0.0444%" height="15" fill="rgb(249,31,29)" fg:x="6058" fg:w="136"/><text x="2.2274%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (38 samples, 0.01%)</title><rect x="2.0613%" y="261" width="0.0124%" height="15" fill="rgb(225,111,53)" fg:x="6315" fg:w="38"/><text x="2.3113%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (99 samples, 0.03%)</title><rect x="2.0737%" y="261" width="0.0323%" height="15" fill="rgb(238,160,17)" fg:x="6353" fg:w="99"/><text x="2.3237%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (43 samples, 0.01%)</title><rect x="2.1099%" y="245" width="0.0140%" height="15" fill="rgb(214,148,48)" fg:x="6464" fg:w="43"/><text x="2.3599%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (40 samples, 0.01%)</title><rect x="2.1109%" y="229" width="0.0131%" height="15" fill="rgb(232,36,49)" fg:x="6467" fg:w="40"/><text x="2.3609%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (56 samples, 0.02%)</title><rect x="2.1060%" y="261" width="0.0183%" height="15" fill="rgb(209,103,24)" fg:x="6452" fg:w="56"/><text x="2.3560%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (59 samples, 0.02%)</title><rect x="2.1350%" y="245" width="0.0193%" height="15" fill="rgb(229,88,8)" fg:x="6541" fg:w="59"/><text x="2.3850%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (151 samples, 0.05%)</title><rect x="2.1543%" y="245" width="0.0493%" height="15" fill="rgb(213,181,19)" fg:x="6600" fg:w="151"/><text x="2.4043%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (257 samples, 0.08%)</title><rect x="2.3133%" y="229" width="0.0839%" height="15" fill="rgb(254,191,54)" fg:x="7087" fg:w="257"/><text x="2.5633%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (371 samples, 0.12%)</title><rect x="2.4027%" y="229" width="0.1211%" height="15" fill="rgb(241,83,37)" fg:x="7361" fg:w="371"/><text x="2.6527%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,020 samples, 0.33%)</title><rect x="2.5238%" y="229" width="0.3329%" height="15" fill="rgb(233,36,39)" fg:x="7732" fg:w="1020"/><text x="2.7738%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (476 samples, 0.16%)</title><rect x="2.8567%" y="229" width="0.1554%" height="15" fill="rgb(226,3,54)" fg:x="8752" fg:w="476"/><text x="3.1067%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (348 samples, 0.11%)</title><rect x="2.8985%" y="213" width="0.1136%" height="15" fill="rgb(245,192,40)" fg:x="8880" fg:w="348"/><text x="3.1485%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (340 samples, 0.11%)</title><rect x="2.9011%" y="197" width="0.1110%" height="15" fill="rgb(238,167,29)" fg:x="8888" fg:w="340"/><text x="3.1511%" y="207.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (71 samples, 0.02%)</title><rect x="3.0121%" y="229" width="0.0232%" height="15" fill="rgb(232,182,51)" fg:x="9228" fg:w="71"/><text x="3.2621%" y="239.50"></text></g><g><title>powergraph`__rdl_alloc (33 samples, 0.01%)</title><rect x="3.0372%" y="229" width="0.0108%" height="15" fill="rgb(231,60,39)" fg:x="9305" fg:w="33"/><text x="3.2872%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (2,596 samples, 0.85%)</title><rect x="2.2052%" y="245" width="0.8474%" height="15" fill="rgb(208,69,12)" fg:x="6756" fg:w="2596"/><text x="2.4552%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (55 samples, 0.02%)</title><rect x="3.0614%" y="229" width="0.0180%" height="15" fill="rgb(235,93,37)" fg:x="9379" fg:w="55"/><text x="3.3114%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (101 samples, 0.03%)</title><rect x="3.0803%" y="229" width="0.0330%" height="15" fill="rgb(213,116,39)" fg:x="9437" fg:w="101"/><text x="3.3303%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (78 samples, 0.03%)</title><rect x="3.1322%" y="213" width="0.0255%" height="15" fill="rgb(222,207,29)" fg:x="9596" fg:w="78"/><text x="3.3822%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (67 samples, 0.02%)</title><rect x="3.1577%" y="213" width="0.0219%" height="15" fill="rgb(206,96,30)" fg:x="9674" fg:w="67"/><text x="3.4077%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (47 samples, 0.02%)</title><rect x="3.1642%" y="197" width="0.0153%" height="15" fill="rgb(218,138,4)" fg:x="9694" fg:w="47"/><text x="3.4142%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (392 samples, 0.13%)</title><rect x="3.0526%" y="245" width="0.1280%" height="15" fill="rgb(250,191,14)" fg:x="9352" fg:w="392"/><text x="3.3026%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (188 samples, 0.06%)</title><rect x="3.1192%" y="229" width="0.0614%" height="15" fill="rgb(239,60,40)" fg:x="9556" fg:w="188"/><text x="3.3692%" y="239.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,260 samples, 1.06%)</title><rect x="2.1243%" y="261" width="1.0641%" height="15" fill="rgb(206,27,48)" fg:x="6508" fg:w="3260"/><text x="2.3743%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (51 samples, 0.02%)</title><rect x="3.1910%" y="261" width="0.0166%" height="15" fill="rgb(225,35,8)" fg:x="9776" fg:w="51"/><text x="3.4410%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,639 samples, 1.19%)</title><rect x="2.0257%" y="277" width="1.1878%" height="15" fill="rgb(250,213,24)" fg:x="6206" fg:w="3639"/><text x="2.2757%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (51 samples, 0.02%)</title><rect x="3.2556%" y="229" width="0.0166%" height="15" fill="rgb(247,123,22)" fg:x="9974" fg:w="51"/><text x="3.5056%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (66 samples, 0.02%)</title><rect x="3.2722%" y="229" width="0.0215%" height="15" fill="rgb(231,138,38)" fg:x="10025" fg:w="66"/><text x="3.5222%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (64 samples, 0.02%)</title><rect x="3.2993%" y="229" width="0.0209%" height="15" fill="rgb(231,145,46)" fg:x="10108" fg:w="64"/><text x="3.5493%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (49 samples, 0.02%)</title><rect x="3.3042%" y="213" width="0.0160%" height="15" fill="rgb(251,118,11)" fg:x="10123" fg:w="49"/><text x="3.5542%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (38 samples, 0.01%)</title><rect x="3.3303%" y="229" width="0.0124%" height="15" fill="rgb(217,147,25)" fg:x="10203" fg:w="38"/><text x="3.5803%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (55 samples, 0.02%)</title><rect x="3.3476%" y="213" width="0.0180%" height="15" fill="rgb(247,81,37)" fg:x="10256" fg:w="55"/><text x="3.5976%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (32 samples, 0.01%)</title><rect x="3.3728%" y="213" width="0.0104%" height="15" fill="rgb(209,12,38)" fg:x="10333" fg:w="32"/><text x="3.6228%" y="223.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;powergraph::PowerNode&gt; (115 samples, 0.04%)</title><rect x="3.3463%" y="229" width="0.0375%" height="15" fill="rgb(227,1,9)" fg:x="10252" fg:w="115"/><text x="3.5963%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (37 samples, 0.01%)</title><rect x="3.3849%" y="213" width="0.0121%" height="15" fill="rgb(248,47,43)" fg:x="10370" fg:w="37"/><text x="3.6349%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (65 samples, 0.02%)</title><rect x="3.3969%" y="213" width="0.0212%" height="15" fill="rgb(221,10,30)" fg:x="10407" fg:w="65"/><text x="3.6469%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (65 samples, 0.02%)</title><rect x="3.3969%" y="197" width="0.0212%" height="15" fill="rgb(210,229,1)" fg:x="10407" fg:w="65"/><text x="3.6469%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (65 samples, 0.02%)</title><rect x="3.3969%" y="181" width="0.0212%" height="15" fill="rgb(222,148,37)" fg:x="10407" fg:w="65"/><text x="3.6469%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (57 samples, 0.02%)</title><rect x="3.4596%" y="181" width="0.0186%" height="15" fill="rgb(234,67,33)" fg:x="10599" fg:w="57"/><text x="3.7096%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (31 samples, 0.01%)</title><rect x="3.4795%" y="181" width="0.0101%" height="15" fill="rgb(247,98,35)" fg:x="10660" fg:w="31"/><text x="3.7295%" y="191.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;powergraph::clusters::Cluster&gt; (327 samples, 0.11%)</title><rect x="3.3839%" y="229" width="0.1067%" height="15" fill="rgb(247,138,52)" fg:x="10367" fg:w="327"/><text x="3.6339%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (195 samples, 0.06%)</title><rect x="3.4270%" y="213" width="0.0636%" height="15" fill="rgb(213,79,30)" fg:x="10499" fg:w="195"/><text x="3.6770%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (120 samples, 0.04%)</title><rect x="3.4514%" y="197" width="0.0392%" height="15" fill="rgb(246,177,23)" fg:x="10574" fg:w="120"/><text x="3.7014%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (194 samples, 0.06%)</title><rect x="3.4952%" y="213" width="0.0633%" height="15" fill="rgb(230,62,27)" fg:x="10708" fg:w="194"/><text x="3.7452%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.02%)</title><rect x="3.5745%" y="213" width="0.0180%" height="15" fill="rgb(216,154,8)" fg:x="10951" fg:w="55"/><text x="3.8245%" y="223.50"></text></g><g><title>powergraph`DYLD-STUB$$free (76 samples, 0.02%)</title><rect x="3.5924%" y="213" width="0.0248%" height="15" fill="rgb(244,35,45)" fg:x="11006" fg:w="76"/><text x="3.8424%" y="223.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::string::String&gt; (40 samples, 0.01%)</title><rect x="3.6228%" y="213" width="0.0131%" height="15" fill="rgb(251,115,12)" fg:x="11099" fg:w="40"/><text x="3.8728%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (333 samples, 0.11%)</title><rect x="3.6796%" y="197" width="0.1087%" height="15" fill="rgb(240,54,50)" fg:x="11273" fg:w="333"/><text x="3.9296%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (65 samples, 0.02%)</title><rect x="3.7886%" y="197" width="0.0212%" height="15" fill="rgb(233,84,52)" fg:x="11607" fg:w="65"/><text x="4.0386%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (287 samples, 0.09%)</title><rect x="3.8098%" y="197" width="0.0937%" height="15" fill="rgb(207,117,47)" fg:x="11672" fg:w="287"/><text x="4.0598%" y="207.50"></text></g><g><title>powergraph`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,027 samples, 0.66%)</title><rect x="3.2487%" y="245" width="0.6616%" height="15" fill="rgb(249,43,39)" fg:x="9953" fg:w="2027"/><text x="3.4987%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (1,281 samples, 0.42%)</title><rect x="3.4922%" y="229" width="0.4181%" height="15" fill="rgb(209,38,44)" fg:x="10699" fg:w="1281"/><text x="3.7422%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (841 samples, 0.27%)</title><rect x="3.6359%" y="213" width="0.2745%" height="15" fill="rgb(236,212,23)" fg:x="11139" fg:w="841"/><text x="3.8859%" y="223.50"></text></g><g><title>powergraph`alloc::vec::in_place_collect::from_iter_in_place (2,087 samples, 0.68%)</title><rect x="3.2327%" y="261" width="0.6812%" height="15" fill="rgb(242,79,21)" fg:x="9904" fg:w="2087"/><text x="3.4827%" y="271.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,806 samples, 1.90%)</title><rect x="2.0218%" y="309" width="1.8951%" height="15" fill="rgb(211,96,35)" fg:x="6194" fg:w="5806"/><text x="2.2718%" y="319.50">p..</text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,805 samples, 1.89%)</title><rect x="2.0221%" y="293" width="1.8948%" height="15" fill="rgb(253,215,40)" fg:x="6195" fg:w="5805"/><text x="2.2721%" y="303.50">p..</text></g><g><title>powergraph`powergraph::PowerGraph::find_power_node (2,100 samples, 0.69%)</title><rect x="3.2314%" y="277" width="0.6855%" height="15" fill="rgb(211,81,21)" fg:x="9900" fg:w="2100"/><text x="3.4814%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35 samples, 0.01%)</title><rect x="3.9198%" y="293" width="0.0114%" height="15" fill="rgb(208,190,38)" fg:x="12009" fg:w="35"/><text x="4.1698%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (59 samples, 0.02%)</title><rect x="3.9313%" y="293" width="0.0193%" height="15" fill="rgb(235,213,38)" fg:x="12044" fg:w="59"/><text x="4.1813%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (49 samples, 0.02%)</title><rect x="3.9505%" y="293" width="0.0160%" height="15" fill="rgb(237,122,38)" fg:x="12103" fg:w="49"/><text x="4.2005%" y="303.50"></text></g><g><title>powergraph`itertools::combinations_with_replacement::CombinationsWithReplacement&lt;I&gt;::increment_indices (45 samples, 0.01%)</title><rect x="3.9737%" y="293" width="0.0147%" height="15" fill="rgb(244,218,35)" fg:x="12174" fg:w="45"/><text x="4.2237%" y="303.50"></text></g><g><title>powergraph`&lt;itertools::combinations_with_replacement::CombinationsWithReplacement&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (222 samples, 0.07%)</title><rect x="3.9172%" y="309" width="0.0725%" height="15" fill="rgb(240,68,47)" fg:x="12001" fg:w="222"/><text x="4.1672%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (61 samples, 0.02%)</title><rect x="4.0174%" y="261" width="0.0199%" height="15" fill="rgb(210,16,53)" fg:x="12308" fg:w="61"/><text x="4.2674%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (67 samples, 0.02%)</title><rect x="4.0373%" y="261" width="0.0219%" height="15" fill="rgb(235,124,12)" fg:x="12369" fg:w="67"/><text x="4.2873%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (58 samples, 0.02%)</title><rect x="4.0403%" y="245" width="0.0189%" height="15" fill="rgb(224,169,11)" fg:x="12378" fg:w="58"/><text x="4.2903%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (57 samples, 0.02%)</title><rect x="4.0406%" y="229" width="0.0186%" height="15" fill="rgb(250,166,2)" fg:x="12379" fg:w="57"/><text x="4.2906%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (179 samples, 0.06%)</title><rect x="4.0024%" y="277" width="0.0584%" height="15" fill="rgb(242,216,29)" fg:x="12262" fg:w="179"/><text x="4.2524%" y="287.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (200 samples, 0.07%)</title><rect x="4.0001%" y="293" width="0.0653%" height="15" fill="rgb(230,116,27)" fg:x="12255" fg:w="200"/><text x="4.2501%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (49 samples, 0.02%)</title><rect x="4.0909%" y="261" width="0.0160%" height="15" fill="rgb(228,99,48)" fg:x="12533" fg:w="49"/><text x="4.3409%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (41 samples, 0.01%)</title><rect x="4.1075%" y="261" width="0.0134%" height="15" fill="rgb(253,11,6)" fg:x="12584" fg:w="41"/><text x="4.3575%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (152 samples, 0.05%)</title><rect x="4.0736%" y="293" width="0.0496%" height="15" fill="rgb(247,143,39)" fg:x="12480" fg:w="152"/><text x="4.3236%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (120 samples, 0.04%)</title><rect x="4.0840%" y="277" width="0.0392%" height="15" fill="rgb(236,97,10)" fg:x="12512" fg:w="120"/><text x="4.3340%" y="287.50"></text></g><g><title>powergraph`powergraph::cluster_repository::ClusterRepository::get (33 samples, 0.01%)</title><rect x="4.1232%" y="293" width="0.0108%" height="15" fill="rgb(233,208,19)" fg:x="12632" fg:w="33"/><text x="4.3732%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (42 samples, 0.01%)</title><rect x="4.1424%" y="245" width="0.0137%" height="15" fill="rgb(216,164,2)" fg:x="12691" fg:w="42"/><text x="4.3924%" y="255.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (50 samples, 0.02%)</title><rect x="4.1424%" y="261" width="0.0163%" height="15" fill="rgb(220,129,5)" fg:x="12691" fg:w="50"/><text x="4.3924%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (87 samples, 0.03%)</title><rect x="4.1588%" y="261" width="0.0284%" height="15" fill="rgb(242,17,10)" fg:x="12741" fg:w="87"/><text x="4.4088%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (65 samples, 0.02%)</title><rect x="4.1659%" y="245" width="0.0212%" height="15" fill="rgb(242,107,0)" fg:x="12763" fg:w="65"/><text x="4.4159%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (213 samples, 0.07%)</title><rect x="4.2182%" y="229" width="0.0695%" height="15" fill="rgb(251,28,31)" fg:x="12923" fg:w="213"/><text x="4.4682%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (206 samples, 0.07%)</title><rect x="4.2205%" y="213" width="0.0672%" height="15" fill="rgb(233,223,10)" fg:x="12930" fg:w="206"/><text x="4.4705%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (205 samples, 0.07%)</title><rect x="4.2208%" y="197" width="0.0669%" height="15" fill="rgb(215,21,27)" fg:x="12931" fg:w="205"/><text x="4.4708%" y="207.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (82 samples, 0.03%)</title><rect x="4.2877%" y="229" width="0.0268%" height="15" fill="rgb(232,23,21)" fg:x="13136" fg:w="82"/><text x="4.5377%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (41 samples, 0.01%)</title><rect x="4.3288%" y="213" width="0.0134%" height="15" fill="rgb(244,5,23)" fg:x="13262" fg:w="41"/><text x="4.5788%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (77 samples, 0.03%)</title><rect x="4.3611%" y="197" width="0.0251%" height="15" fill="rgb(226,81,46)" fg:x="13361" fg:w="77"/><text x="4.6111%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (146 samples, 0.05%)</title><rect x="4.3497%" y="213" width="0.0477%" height="15" fill="rgb(247,70,30)" fg:x="13326" fg:w="146"/><text x="4.5997%" y="223.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::new (789 samples, 0.26%)</title><rect x="4.1402%" y="277" width="0.2575%" height="15" fill="rgb(212,68,19)" fg:x="12684" fg:w="789"/><text x="4.3902%" y="287.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (645 samples, 0.21%)</title><rect x="4.1872%" y="261" width="0.2105%" height="15" fill="rgb(240,187,13)" fg:x="12828" fg:w="645"/><text x="4.4372%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (638 samples, 0.21%)</title><rect x="4.1894%" y="245" width="0.2082%" height="15" fill="rgb(223,113,26)" fg:x="12835" fg:w="638"/><text x="4.4394%" y="255.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (235 samples, 0.08%)</title><rect x="4.3210%" y="229" width="0.0767%" height="15" fill="rgb(206,192,2)" fg:x="13238" fg:w="235"/><text x="4.5710%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (54 samples, 0.02%)</title><rect x="4.4277%" y="213" width="0.0176%" height="15" fill="rgb(241,108,4)" fg:x="13565" fg:w="54"/><text x="4.6777%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (209 samples, 0.07%)</title><rect x="4.4454%" y="213" width="0.0682%" height="15" fill="rgb(247,173,49)" fg:x="13619" fg:w="209"/><text x="4.6954%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (206 samples, 0.07%)</title><rect x="4.4463%" y="197" width="0.0672%" height="15" fill="rgb(224,114,35)" fg:x="13622" fg:w="206"/><text x="4.6963%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (201 samples, 0.07%)</title><rect x="4.4480%" y="181" width="0.0656%" height="15" fill="rgb(245,159,27)" fg:x="13627" fg:w="201"/><text x="4.6980%" y="191.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (60 samples, 0.02%)</title><rect x="4.5305%" y="197" width="0.0196%" height="15" fill="rgb(245,172,44)" fg:x="13880" fg:w="60"/><text x="4.7805%" y="207.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (34 samples, 0.01%)</title><rect x="4.5501%" y="197" width="0.0111%" height="15" fill="rgb(236,23,11)" fg:x="13940" fg:w="34"/><text x="4.8001%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (40 samples, 0.01%)</title><rect x="4.5612%" y="197" width="0.0131%" height="15" fill="rgb(205,117,38)" fg:x="13974" fg:w="40"/><text x="4.8112%" y="207.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (538 samples, 0.18%)</title><rect x="4.3990%" y="245" width="0.1756%" height="15" fill="rgb(237,72,25)" fg:x="13477" fg:w="538"/><text x="4.6490%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (528 samples, 0.17%)</title><rect x="4.4023%" y="229" width="0.1723%" height="15" fill="rgb(244,70,9)" fg:x="13487" fg:w="528"/><text x="4.6523%" y="239.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 samples, 0.05%)</title><rect x="4.5243%" y="213" width="0.0503%" height="15" fill="rgb(217,125,39)" fg:x="13861" fg:w="154"/><text x="4.7743%" y="223.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (567 samples, 0.19%)</title><rect x="4.3987%" y="261" width="0.1851%" height="15" fill="rgb(235,36,10)" fg:x="13476" fg:w="567"/><text x="4.6487%" y="271.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::union (1,382 samples, 0.45%)</title><rect x="4.1340%" y="293" width="0.4511%" height="15" fill="rgb(251,123,47)" fg:x="12665" fg:w="1382"/><text x="4.3840%" y="303.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::union (573 samples, 0.19%)</title><rect x="4.3980%" y="277" width="0.1870%" height="15" fill="rgb(221,13,13)" fg:x="13474" fg:w="573"/><text x="4.6480%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (315 samples, 0.10%)</title><rect x="4.5873%" y="277" width="0.1028%" height="15" fill="rgb(238,131,9)" fg:x="14054" fg:w="315"/><text x="4.8373%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (31 samples, 0.01%)</title><rect x="4.7215%" y="197" width="0.0101%" height="15" fill="rgb(211,50,8)" fg:x="14465" fg:w="31"/><text x="4.9715%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (84 samples, 0.03%)</title><rect x="4.7048%" y="213" width="0.0274%" height="15" fill="rgb(245,182,24)" fg:x="14414" fg:w="84"/><text x="4.9548%" y="223.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (98 samples, 0.03%)</title><rect x="4.7042%" y="229" width="0.0320%" height="15" fill="rgb(242,14,37)" fg:x="14412" fg:w="98"/><text x="4.9542%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (36 samples, 0.01%)</title><rect x="4.7372%" y="229" width="0.0118%" height="15" fill="rgb(246,228,12)" fg:x="14513" fg:w="36"/><text x="4.9872%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (48 samples, 0.02%)</title><rect x="4.7499%" y="213" width="0.0157%" height="15" fill="rgb(213,55,15)" fg:x="14552" fg:w="48"/><text x="4.9999%" y="223.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (52 samples, 0.02%)</title><rect x="4.7489%" y="229" width="0.0170%" height="15" fill="rgb(209,9,3)" fg:x="14549" fg:w="52"/><text x="4.9989%" y="239.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::iter (40 samples, 0.01%)</title><rect x="4.7659%" y="229" width="0.0131%" height="15" fill="rgb(230,59,30)" fg:x="14601" fg:w="40"/><text x="5.0159%" y="239.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (272 samples, 0.09%)</title><rect x="4.6905%" y="261" width="0.0888%" height="15" fill="rgb(209,121,21)" fg:x="14370" fg:w="272"/><text x="4.9405%" y="271.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (246 samples, 0.08%)</title><rect x="4.6990%" y="245" width="0.0803%" height="15" fill="rgb(220,109,13)" fg:x="14396" fg:w="246"/><text x="4.9490%" y="255.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (39 samples, 0.01%)</title><rect x="4.7985%" y="213" width="0.0127%" height="15" fill="rgb(232,18,1)" fg:x="14701" fg:w="39"/><text x="5.0485%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (41 samples, 0.01%)</title><rect x="4.8188%" y="197" width="0.0134%" height="15" fill="rgb(215,41,42)" fg:x="14763" fg:w="41"/><text x="5.0688%" y="207.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (46 samples, 0.02%)</title><rect x="4.8181%" y="213" width="0.0150%" height="15" fill="rgb(224,123,36)" fg:x="14761" fg:w="46"/><text x="5.0681%" y="223.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (154 samples, 0.05%)</title><rect x="4.7933%" y="229" width="0.0503%" height="15" fill="rgb(240,125,3)" fg:x="14685" fg:w="154"/><text x="5.0433%" y="239.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::iter (32 samples, 0.01%)</title><rect x="4.8331%" y="213" width="0.0104%" height="15" fill="rgb(205,98,50)" fg:x="14807" fg:w="32"/><text x="5.0831%" y="223.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (207 samples, 0.07%)</title><rect x="4.7802%" y="245" width="0.0676%" height="15" fill="rgb(205,185,37)" fg:x="14645" fg:w="207"/><text x="5.0302%" y="255.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (217 samples, 0.07%)</title><rect x="4.7793%" y="261" width="0.0708%" height="15" fill="rgb(238,207,15)" fg:x="14642" fg:w="217"/><text x="5.0293%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (491 samples, 0.16%)</title><rect x="4.6902%" y="277" width="0.1603%" height="15" fill="rgb(213,199,42)" fg:x="14369" fg:w="491"/><text x="4.9402%" y="287.50"></text></g><g><title>powergraph`core::fmt::Formatter::pad (619 samples, 0.20%)</title><rect x="4.8534%" y="277" width="0.2020%" height="15" fill="rgb(235,201,11)" fg:x="14869" fg:w="619"/><text x="5.1034%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (1,495 samples, 0.49%)</title><rect x="5.6844%" y="261" width="0.4880%" height="15" fill="rgb(207,46,11)" fg:x="17415" fg:w="1495"/><text x="5.9344%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (357 samples, 0.12%)</title><rect x="6.1724%" y="261" width="0.1165%" height="15" fill="rgb(241,35,35)" fg:x="18910" fg:w="357"/><text x="6.4224%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6,028 samples, 1.97%)</title><rect x="6.2905%" y="261" width="1.9676%" height="15" fill="rgb(243,32,47)" fg:x="19272" fg:w="6028"/><text x="6.5405%" y="271.50">l..</text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 0.03%)</title><rect x="8.2637%" y="261" width="0.0300%" height="15" fill="rgb(247,202,23)" fg:x="25317" fg:w="92"/><text x="8.5137%" y="271.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (302 samples, 0.10%)</title><rect x="8.4207%" y="245" width="0.0986%" height="15" fill="rgb(219,102,11)" fg:x="25798" fg:w="302"/><text x="8.6707%" y="255.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (174 samples, 0.06%)</title><rect x="8.5281%" y="229" width="0.0568%" height="15" fill="rgb(243,110,44)" fg:x="26127" fg:w="174"/><text x="8.7781%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,283 samples, 0.42%)</title><rect x="8.7053%" y="213" width="0.4188%" height="15" fill="rgb(222,74,54)" fg:x="26670" fg:w="1283"/><text x="8.9553%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,999 samples, 0.65%)</title><rect x="9.1254%" y="213" width="0.6525%" height="15" fill="rgb(216,99,12)" fg:x="27957" fg:w="1999"/><text x="9.3754%" y="223.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (200 samples, 0.07%)</title><rect x="9.7779%" y="213" width="0.0653%" height="15" fill="rgb(226,22,26)" fg:x="29956" fg:w="200"/><text x="10.0279%" y="223.50"></text></g><g><title>powergraph`__rdl_alloc (149 samples, 0.05%)</title><rect x="9.8432%" y="213" width="0.0486%" height="15" fill="rgb(217,163,10)" fg:x="30156" fg:w="149"/><text x="10.0932%" y="223.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4,524 samples, 1.48%)</title><rect x="8.5849%" y="229" width="1.4767%" height="15" fill="rgb(213,25,53)" fg:x="26301" fg:w="4524"/><text x="8.8349%" y="239.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (520 samples, 0.17%)</title><rect x="9.8918%" y="213" width="0.1697%" height="15" fill="rgb(252,105,26)" fg:x="30305" fg:w="520"/><text x="10.1418%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (5,654 samples, 1.85%)</title><rect x="8.2937%" y="261" width="1.8455%" height="15" fill="rgb(220,39,43)" fg:x="25409" fg:w="5654"/><text x="8.5437%" y="271.50">p..</text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4,963 samples, 1.62%)</title><rect x="8.5192%" y="245" width="1.6200%" height="15" fill="rgb(229,68,48)" fg:x="26100" fg:w="4963"/><text x="8.7692%" y="255.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (238 samples, 0.08%)</title><rect x="10.0615%" y="229" width="0.0777%" height="15" fill="rgb(252,8,32)" fg:x="30825" fg:w="238"/><text x="10.3115%" y="239.50"></text></g><g><title>powergraph`DYLD-STUB$$free (337 samples, 0.11%)</title><rect x="10.1399%" y="261" width="0.1100%" height="15" fill="rgb(223,20,43)" fg:x="31065" fg:w="337"/><text x="10.3899%" y="271.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (151 samples, 0.05%)</title><rect x="10.2499%" y="261" width="0.0493%" height="15" fill="rgb(229,81,49)" fg:x="31402" fg:w="151"/><text x="10.4999%" y="271.50"></text></g><g><title>powergraph`core::fmt::Formatter::pad (286 samples, 0.09%)</title><rect x="10.3054%" y="261" width="0.0934%" height="15" fill="rgb(236,28,36)" fg:x="31572" fg:w="286"/><text x="10.5554%" y="271.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::string::String&gt; (64 samples, 0.02%)</title><rect x="10.4013%" y="261" width="0.0209%" height="15" fill="rgb(249,185,26)" fg:x="31866" fg:w="64"/><text x="10.6513%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (215 samples, 0.07%)</title><rect x="10.8371%" y="245" width="0.0702%" height="15" fill="rgb(249,174,33)" fg:x="33201" fg:w="215"/><text x="11.0871%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2,279 samples, 0.74%)</title><rect x="10.9073%" y="245" width="0.7439%" height="15" fill="rgb(233,201,37)" fg:x="33416" fg:w="2279"/><text x="11.1573%" y="255.50"></text></g><g><title>libsystem_platform.dylib`__bzero (147 samples, 0.05%)</title><rect x="11.6511%" y="245" width="0.0480%" height="15" fill="rgb(221,78,26)" fg:x="35695" fg:w="147"/><text x="11.9011%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (831 samples, 0.27%)</title><rect x="11.7034%" y="245" width="0.2712%" height="15" fill="rgb(250,127,30)" fg:x="35855" fg:w="831"/><text x="11.9534%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 samples, 0.04%)</title><rect x="11.9753%" y="245" width="0.0395%" height="15" fill="rgb(230,49,44)" fg:x="36688" fg:w="121"/><text x="12.2253%" y="255.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,125 samples, 1.67%)</title><rect x="12.0148%" y="245" width="1.6728%" height="15" fill="rgb(229,67,23)" fg:x="36809" fg:w="5125"/><text x="12.2648%" y="255.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (2,688 samples, 0.88%)</title><rect x="13.6896%" y="245" width="0.8774%" height="15" fill="rgb(249,83,47)" fg:x="41940" fg:w="2688"/><text x="13.9396%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (29,187 samples, 9.53%)</title><rect x="5.0564%" y="277" width="9.5269%" height="15" fill="rgb(215,43,3)" fg:x="15491" fg:w="29187"/><text x="5.3064%" y="287.50">powergraph`has..</text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::contains (12,721 samples, 4.15%)</title><rect x="10.4310%" y="261" width="4.1522%" height="15" fill="rgb(238,154,13)" fg:x="31957" fg:w="12721"/><text x="10.6810%" y="271.50">power..</text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::string::String&gt; (50 samples, 0.02%)</title><rect x="14.5669%" y="245" width="0.0163%" height="15" fill="rgb(219,56,2)" fg:x="44628" fg:w="50"/><text x="14.8169%" y="255.50"></text></g><g><title>powergraph`powergraph::edge_repository::EdgeRepository::subgraph (30,975 samples, 10.11%)</title><rect x="4.5851%" y="293" width="10.1105%" height="15" fill="rgb(233,0,4)" fg:x="14047" fg:w="30975"/><text x="4.8351%" y="303.50">powergraph`powe..</text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::contains (344 samples, 0.11%)</title><rect x="14.5833%" y="277" width="0.1123%" height="15" fill="rgb(235,30,7)" fg:x="44678" fg:w="344"/><text x="14.8333%" y="287.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (61 samples, 0.02%)</title><rect x="14.6978%" y="277" width="0.0199%" height="15" fill="rgb(250,79,13)" fg:x="45029" fg:w="61"/><text x="14.9478%" y="287.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::from_iter (69 samples, 0.02%)</title><rect x="14.6955%" y="293" width="0.0225%" height="15" fill="rgb(211,146,34)" fg:x="45022" fg:w="69"/><text x="14.9455%" y="303.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (32,865 samples, 10.73%)</title><rect x="3.9929%" y="309" width="10.7274%" height="15" fill="rgb(228,22,38)" fg:x="12233" fg:w="32865"/><text x="4.2429%" y="319.50">powergraph`core:..</text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (87 samples, 0.03%)</title><rect x="14.7203%" y="309" width="0.0284%" height="15" fill="rgb(235,168,5)" fg:x="45098" fg:w="87"/><text x="14.9703%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (76 samples, 0.02%)</title><rect x="14.7239%" y="293" width="0.0248%" height="15" fill="rgb(221,155,16)" fg:x="45109" fg:w="76"/><text x="14.9739%" y="303.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (39,256 samples, 12.81%)</title><rect x="1.9411%" y="325" width="12.8135%" height="15" fill="rgb(215,215,53)" fg:x="5947" fg:w="39256"/><text x="2.1911%" y="335.50">powergraph`alloc::v..</text></g><g><title>libsystem_malloc.dylib`free_tiny (35 samples, 0.01%)</title><rect x="14.7674%" y="309" width="0.0114%" height="15" fill="rgb(223,4,10)" fg:x="45242" fg:w="35"/><text x="15.0174%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (31 samples, 0.01%)</title><rect x="14.8104%" y="277" width="0.0101%" height="15" fill="rgb(234,103,6)" fg:x="45374" fg:w="31"/><text x="15.0604%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (56 samples, 0.02%)</title><rect x="14.8232%" y="277" width="0.0183%" height="15" fill="rgb(227,97,0)" fg:x="45413" fg:w="56"/><text x="15.0732%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (157 samples, 0.05%)</title><rect x="14.8414%" y="277" width="0.0512%" height="15" fill="rgb(234,150,53)" fg:x="45469" fg:w="157"/><text x="15.0914%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (217 samples, 0.07%)</title><rect x="14.8927%" y="277" width="0.0708%" height="15" fill="rgb(228,201,54)" fg:x="45626" fg:w="217"/><text x="15.1427%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (204 samples, 0.07%)</title><rect x="14.8969%" y="261" width="0.0666%" height="15" fill="rgb(222,22,37)" fg:x="45639" fg:w="204"/><text x="15.1469%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (202 samples, 0.07%)</title><rect x="14.8976%" y="245" width="0.0659%" height="15" fill="rgb(237,53,32)" fg:x="45641" fg:w="202"/><text x="15.1476%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (527 samples, 0.17%)</title><rect x="14.7958%" y="293" width="0.1720%" height="15" fill="rgb(233,25,53)" fg:x="45329" fg:w="527"/><text x="15.0458%" y="303.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (594 samples, 0.19%)</title><rect x="14.7886%" y="309" width="0.1939%" height="15" fill="rgb(210,40,34)" fg:x="45307" fg:w="594"/><text x="15.0386%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (45 samples, 0.01%)</title><rect x="14.9678%" y="293" width="0.0147%" height="15" fill="rgb(241,220,44)" fg:x="45856" fg:w="45"/><text x="15.2178%" y="303.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;powergraph::clusters::Cluster&gt; (71 samples, 0.02%)</title><rect x="14.9831%" y="309" width="0.0232%" height="15" fill="rgb(235,28,35)" fg:x="45903" fg:w="71"/><text x="15.2331%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (59 samples, 0.02%)</title><rect x="14.9870%" y="293" width="0.0193%" height="15" fill="rgb(210,56,17)" fg:x="45915" fg:w="59"/><text x="15.2370%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (48 samples, 0.02%)</title><rect x="14.9906%" y="277" width="0.0157%" height="15" fill="rgb(224,130,29)" fg:x="45926" fg:w="48"/><text x="15.2406%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (47 samples, 0.02%)</title><rect x="15.0109%" y="293" width="0.0153%" height="15" fill="rgb(235,212,8)" fg:x="45988" fg:w="47"/><text x="15.2609%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (127 samples, 0.04%)</title><rect x="15.0575%" y="277" width="0.0415%" height="15" fill="rgb(223,33,50)" fg:x="46131" fg:w="127"/><text x="15.3075%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (115 samples, 0.04%)</title><rect x="15.1029%" y="277" width="0.0375%" height="15" fill="rgb(219,149,13)" fg:x="46270" fg:w="115"/><text x="15.3529%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (427 samples, 0.14%)</title><rect x="15.0102%" y="309" width="0.1394%" height="15" fill="rgb(250,156,29)" fg:x="45986" fg:w="427"/><text x="15.2602%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (324 samples, 0.11%)</title><rect x="15.0438%" y="293" width="0.1058%" height="15" fill="rgb(216,193,19)" fg:x="46089" fg:w="324"/><text x="15.2938%" y="303.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (70 samples, 0.02%)</title><rect x="15.1623%" y="293" width="0.0228%" height="15" fill="rgb(216,135,14)" fg:x="46452" fg:w="70"/><text x="15.4123%" y="303.50"></text></g><g><title>powergraph`powergraph::cluster_repository::ClusterRepository::get (126 samples, 0.04%)</title><rect x="15.1496%" y="309" width="0.0411%" height="15" fill="rgb(241,47,5)" fg:x="46413" fg:w="126"/><text x="15.3996%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (86 samples, 0.03%)</title><rect x="15.2289%" y="245" width="0.0281%" height="15" fill="rgb(233,42,35)" fg:x="46656" fg:w="86"/><text x="15.4789%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (85 samples, 0.03%)</title><rect x="15.2292%" y="229" width="0.0277%" height="15" fill="rgb(231,13,6)" fg:x="46657" fg:w="85"/><text x="15.4792%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (83 samples, 0.03%)</title><rect x="15.2299%" y="213" width="0.0271%" height="15" fill="rgb(207,181,40)" fg:x="46659" fg:w="83"/><text x="15.4799%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (136 samples, 0.04%)</title><rect x="15.2136%" y="261" width="0.0444%" height="15" fill="rgb(254,173,49)" fg:x="46609" fg:w="136"/><text x="15.4636%" y="271.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (159 samples, 0.05%)</title><rect x="15.2113%" y="277" width="0.0519%" height="15" fill="rgb(221,1,38)" fg:x="46602" fg:w="159"/><text x="15.4613%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (88 samples, 0.03%)</title><rect x="15.2899%" y="245" width="0.0287%" height="15" fill="rgb(206,124,46)" fg:x="46843" fg:w="88"/><text x="15.5399%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (53 samples, 0.02%)</title><rect x="15.3206%" y="245" width="0.0173%" height="15" fill="rgb(249,21,11)" fg:x="46937" fg:w="53"/><text x="15.5706%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (230 samples, 0.08%)</title><rect x="15.2635%" y="277" width="0.0751%" height="15" fill="rgb(222,201,40)" fg:x="46762" fg:w="230"/><text x="15.5135%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (169 samples, 0.06%)</title><rect x="15.2834%" y="261" width="0.0552%" height="15" fill="rgb(235,61,29)" fg:x="46823" fg:w="169"/><text x="15.5334%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (56 samples, 0.02%)</title><rect x="15.3928%" y="245" width="0.0183%" height="15" fill="rgb(219,207,3)" fg:x="47158" fg:w="56"/><text x="15.6428%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (81 samples, 0.03%)</title><rect x="15.4146%" y="245" width="0.0264%" height="15" fill="rgb(222,56,46)" fg:x="47225" fg:w="81"/><text x="15.6646%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (613 samples, 0.20%)</title><rect x="15.4420%" y="245" width="0.2001%" height="15" fill="rgb(239,76,54)" fg:x="47309" fg:w="613"/><text x="15.6920%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (600 samples, 0.20%)</title><rect x="15.4463%" y="229" width="0.1958%" height="15" fill="rgb(231,124,27)" fg:x="47322" fg:w="600"/><text x="15.6963%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (593 samples, 0.19%)</title><rect x="15.4486%" y="213" width="0.1936%" height="15" fill="rgb(249,195,6)" fg:x="47329" fg:w="593"/><text x="15.6986%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (252 samples, 0.08%)</title><rect x="15.6421%" y="245" width="0.0823%" height="15" fill="rgb(237,174,47)" fg:x="47922" fg:w="252"/><text x="15.8921%" y="255.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (47 samples, 0.02%)</title><rect x="15.7273%" y="245" width="0.0153%" height="15" fill="rgb(206,201,31)" fg:x="48183" fg:w="47"/><text x="15.9773%" y="255.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (123 samples, 0.04%)</title><rect x="15.7652%" y="229" width="0.0401%" height="15" fill="rgb(231,57,52)" fg:x="48299" fg:w="123"/><text x="16.0152%" y="239.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (53 samples, 0.02%)</title><rect x="15.8063%" y="229" width="0.0173%" height="15" fill="rgb(248,177,22)" fg:x="48425" fg:w="53"/><text x="16.0563%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (245 samples, 0.08%)</title><rect x="15.8514%" y="213" width="0.0800%" height="15" fill="rgb(215,211,37)" fg:x="48563" fg:w="245"/><text x="16.1014%" y="223.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (45 samples, 0.01%)</title><rect x="15.9313%" y="213" width="0.0147%" height="15" fill="rgb(241,128,51)" fg:x="48808" fg:w="45"/><text x="16.1813%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (427 samples, 0.14%)</title><rect x="15.8236%" y="229" width="0.1394%" height="15" fill="rgb(227,165,31)" fg:x="48478" fg:w="427"/><text x="16.0736%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (52 samples, 0.02%)</title><rect x="15.9460%" y="213" width="0.0170%" height="15" fill="rgb(228,167,24)" fg:x="48853" fg:w="52"/><text x="16.1960%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (1,877 samples, 0.61%)</title><rect x="15.3510%" y="261" width="0.6127%" height="15" fill="rgb(228,143,12)" fg:x="47030" fg:w="1877"/><text x="15.6010%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (677 samples, 0.22%)</title><rect x="15.7427%" y="245" width="0.2210%" height="15" fill="rgb(249,149,8)" fg:x="48230" fg:w="677"/><text x="15.9927%" y="255.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::new (2,326 samples, 0.76%)</title><rect x="15.2051%" y="293" width="0.7592%" height="15" fill="rgb(243,35,44)" fg:x="46583" fg:w="2326"/><text x="15.4551%" y="303.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (1,917 samples, 0.63%)</title><rect x="15.3386%" y="277" width="0.6257%" height="15" fill="rgb(246,89,9)" fg:x="46992" fg:w="1917"/><text x="15.5886%" y="287.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (33 samples, 0.01%)</title><rect x="15.9770%" y="245" width="0.0108%" height="15" fill="rgb(233,213,13)" fg:x="48948" fg:w="33"/><text x="16.2270%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (43 samples, 0.01%)</title><rect x="16.0133%" y="229" width="0.0140%" height="15" fill="rgb(233,141,41)" fg:x="49059" fg:w="43"/><text x="16.2633%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (112 samples, 0.04%)</title><rect x="16.0286%" y="229" width="0.0366%" height="15" fill="rgb(239,167,4)" fg:x="49106" fg:w="112"/><text x="16.2786%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (157 samples, 0.05%)</title><rect x="16.0658%" y="229" width="0.0512%" height="15" fill="rgb(209,217,16)" fg:x="49220" fg:w="157"/><text x="16.3158%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (610 samples, 0.20%)</title><rect x="16.1170%" y="229" width="0.1991%" height="15" fill="rgb(219,88,35)" fg:x="49377" fg:w="610"/><text x="16.3670%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (588 samples, 0.19%)</title><rect x="16.1242%" y="213" width="0.1919%" height="15" fill="rgb(220,193,23)" fg:x="49399" fg:w="588"/><text x="16.3742%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (582 samples, 0.19%)</title><rect x="16.1262%" y="197" width="0.1900%" height="15" fill="rgb(230,90,52)" fg:x="49405" fg:w="582"/><text x="16.3762%" y="207.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (77 samples, 0.03%)</title><rect x="16.3162%" y="229" width="0.0251%" height="15" fill="rgb(252,106,19)" fg:x="49987" fg:w="77"/><text x="16.5662%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (199 samples, 0.06%)</title><rect x="16.3749%" y="213" width="0.0650%" height="15" fill="rgb(206,74,20)" fg:x="50167" fg:w="199"/><text x="16.6249%" y="223.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (72 samples, 0.02%)</title><rect x="16.4402%" y="213" width="0.0235%" height="15" fill="rgb(230,138,44)" fg:x="50367" fg:w="72"/><text x="16.6902%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (82 samples, 0.03%)</title><rect x="16.4722%" y="197" width="0.0268%" height="15" fill="rgb(235,182,43)" fg:x="50465" fg:w="82"/><text x="16.7222%" y="207.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (467 samples, 0.15%)</title><rect x="16.3537%" y="229" width="0.1524%" height="15" fill="rgb(242,16,51)" fg:x="50102" fg:w="467"/><text x="16.6037%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (130 samples, 0.04%)</title><rect x="16.4637%" y="213" width="0.0424%" height="15" fill="rgb(248,9,4)" fg:x="50439" fg:w="130"/><text x="16.7137%" y="223.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,643 samples, 0.54%)</title><rect x="15.9702%" y="261" width="0.5363%" height="15" fill="rgb(210,31,22)" fg:x="48927" fg:w="1643"/><text x="16.2202%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (1,589 samples, 0.52%)</title><rect x="15.9878%" y="245" width="0.5187%" height="15" fill="rgb(239,54,39)" fg:x="48981" fg:w="1589"/><text x="16.2378%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (52 samples, 0.02%)</title><rect x="16.5074%" y="261" width="0.0170%" height="15" fill="rgb(230,99,41)" fg:x="50573" fg:w="52"/><text x="16.7574%" y="271.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,708 samples, 0.56%)</title><rect x="15.9676%" y="277" width="0.5575%" height="15" fill="rgb(253,106,12)" fg:x="48919" fg:w="1708"/><text x="16.2176%" y="287.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::union (4,095 samples, 1.34%)</title><rect x="15.1907%" y="309" width="1.3366%" height="15" fill="rgb(213,46,41)" fg:x="46539" fg:w="4095"/><text x="15.4407%" y="319.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::union (1,725 samples, 0.56%)</title><rect x="15.9643%" y="293" width="0.5631%" height="15" fill="rgb(215,133,35)" fg:x="48909" fg:w="1725"/><text x="16.2143%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (939 samples, 0.31%)</title><rect x="16.5306%" y="293" width="0.3065%" height="15" fill="rgb(213,28,5)" fg:x="50644" fg:w="939"/><text x="16.7806%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (86 samples, 0.03%)</title><rect x="16.8981%" y="213" width="0.0281%" height="15" fill="rgb(215,77,49)" fg:x="51770" fg:w="86"/><text x="17.1481%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (84 samples, 0.03%)</title><rect x="16.9288%" y="197" width="0.0274%" height="15" fill="rgb(248,100,22)" fg:x="51864" fg:w="84"/><text x="17.1788%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (83 samples, 0.03%)</title><rect x="16.9292%" y="181" width="0.0271%" height="15" fill="rgb(208,67,9)" fg:x="51865" fg:w="83"/><text x="17.1792%" y="191.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (93 samples, 0.03%)</title><rect x="16.9262%" y="213" width="0.0304%" height="15" fill="rgb(219,133,21)" fg:x="51856" fg:w="93"/><text x="17.1762%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (245 samples, 0.08%)</title><rect x="16.8799%" y="229" width="0.0800%" height="15" fill="rgb(246,46,29)" fg:x="51714" fg:w="245"/><text x="17.1299%" y="239.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (293 samples, 0.10%)</title><rect x="16.8743%" y="245" width="0.0956%" height="15" fill="rgb(246,185,52)" fg:x="51697" fg:w="293"/><text x="17.1243%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (95 samples, 0.03%)</title><rect x="16.9716%" y="245" width="0.0310%" height="15" fill="rgb(252,136,11)" fg:x="51995" fg:w="95"/><text x="17.2216%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (56 samples, 0.02%)</title><rect x="16.9843%" y="229" width="0.0183%" height="15" fill="rgb(219,138,53)" fg:x="52034" fg:w="56"/><text x="17.2343%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (31 samples, 0.01%)</title><rect x="17.0222%" y="213" width="0.0101%" height="15" fill="rgb(211,51,23)" fg:x="52150" fg:w="31"/><text x="17.2722%" y="223.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (42 samples, 0.01%)</title><rect x="17.0352%" y="213" width="0.0137%" height="15" fill="rgb(247,221,28)" fg:x="52190" fg:w="42"/><text x="17.2852%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (138 samples, 0.05%)</title><rect x="17.0042%" y="229" width="0.0450%" height="15" fill="rgb(251,222,45)" fg:x="52095" fg:w="138"/><text x="17.2542%" y="239.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (154 samples, 0.05%)</title><rect x="17.0026%" y="245" width="0.0503%" height="15" fill="rgb(217,162,53)" fg:x="52090" fg:w="154"/><text x="17.2526%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (32 samples, 0.01%)</title><rect x="17.0538%" y="229" width="0.0104%" height="15" fill="rgb(229,93,14)" fg:x="52247" fg:w="32"/><text x="17.3038%" y="239.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (32 samples, 0.01%)</title><rect x="17.0689%" y="229" width="0.0104%" height="15" fill="rgb(209,67,49)" fg:x="52293" fg:w="32"/><text x="17.3189%" y="239.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (711 samples, 0.23%)</title><rect x="16.8600%" y="261" width="0.2321%" height="15" fill="rgb(213,87,29)" fg:x="51653" fg:w="711"/><text x="17.1100%" y="271.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::iter (120 samples, 0.04%)</title><rect x="17.0529%" y="245" width="0.0392%" height="15" fill="rgb(205,151,52)" fg:x="52244" fg:w="120"/><text x="17.3029%" y="255.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (778 samples, 0.25%)</title><rect x="16.8391%" y="277" width="0.2539%" height="15" fill="rgb(253,215,39)" fg:x="51589" fg:w="778"/><text x="17.0891%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (64 samples, 0.02%)</title><rect x="17.1257%" y="229" width="0.0209%" height="15" fill="rgb(221,220,41)" fg:x="52467" fg:w="64"/><text x="17.3757%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (58 samples, 0.02%)</title><rect x="17.1276%" y="213" width="0.0189%" height="15" fill="rgb(218,133,21)" fg:x="52473" fg:w="58"/><text x="17.3776%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (56 samples, 0.02%)</title><rect x="17.1283%" y="197" width="0.0183%" height="15" fill="rgb(221,193,43)" fg:x="52475" fg:w="56"/><text x="17.3783%" y="207.50"></text></g><g><title>powergraph`&lt;powergraph::sets::SetIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (117 samples, 0.04%)</title><rect x="17.1093%" y="245" width="0.0382%" height="15" fill="rgb(240,128,52)" fg:x="52417" fg:w="117"/><text x="17.3593%" y="255.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (39 samples, 0.01%)</title><rect x="17.1488%" y="245" width="0.0127%" height="15" fill="rgb(253,114,12)" fg:x="52538" fg:w="39"/><text x="17.3988%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (67 samples, 0.02%)</title><rect x="17.2053%" y="197" width="0.0219%" height="15" fill="rgb(215,223,47)" fg:x="52711" fg:w="67"/><text x="17.4553%" y="207.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (52 samples, 0.02%)</title><rect x="17.2272%" y="197" width="0.0170%" height="15" fill="rgb(248,225,23)" fg:x="52778" fg:w="52"/><text x="17.4772%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (49 samples, 0.02%)</title><rect x="17.2281%" y="181" width="0.0160%" height="15" fill="rgb(250,108,0)" fg:x="52781" fg:w="49"/><text x="17.4781%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (49 samples, 0.02%)</title><rect x="17.2281%" y="165" width="0.0160%" height="15" fill="rgb(228,208,7)" fg:x="52781" fg:w="49"/><text x="17.4781%" y="175.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (167 samples, 0.05%)</title><rect x="17.1909%" y="213" width="0.0545%" height="15" fill="rgb(244,45,10)" fg:x="52667" fg:w="167"/><text x="17.4409%" y="223.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (197 samples, 0.06%)</title><rect x="17.1877%" y="229" width="0.0643%" height="15" fill="rgb(207,125,25)" fg:x="52657" fg:w="197"/><text x="17.4377%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (45 samples, 0.01%)</title><rect x="17.2539%" y="229" width="0.0147%" height="15" fill="rgb(210,195,18)" fg:x="52860" fg:w="45"/><text x="17.5039%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (35 samples, 0.01%)</title><rect x="17.2843%" y="197" width="0.0114%" height="15" fill="rgb(249,80,12)" fg:x="52953" fg:w="35"/><text x="17.5343%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (33 samples, 0.01%)</title><rect x="17.2849%" y="181" width="0.0108%" height="15" fill="rgb(221,65,9)" fg:x="52955" fg:w="33"/><text x="17.5349%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (33 samples, 0.01%)</title><rect x="17.2849%" y="165" width="0.0108%" height="15" fill="rgb(235,49,36)" fg:x="52955" fg:w="33"/><text x="17.5349%" y="175.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (44 samples, 0.01%)</title><rect x="17.2957%" y="197" width="0.0144%" height="15" fill="rgb(225,32,20)" fg:x="52988" fg:w="44"/><text x="17.5457%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (175 samples, 0.06%)</title><rect x="17.2722%" y="213" width="0.0571%" height="15" fill="rgb(215,141,46)" fg:x="52916" fg:w="175"/><text x="17.5222%" y="223.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (45 samples, 0.01%)</title><rect x="17.3146%" y="197" width="0.0147%" height="15" fill="rgb(250,160,47)" fg:x="53046" fg:w="45"/><text x="17.5646%" y="207.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (190 samples, 0.06%)</title><rect x="17.2686%" y="229" width="0.0620%" height="15" fill="rgb(216,222,40)" fg:x="52905" fg:w="190"/><text x="17.5186%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (31 samples, 0.01%)</title><rect x="17.3381%" y="197" width="0.0101%" height="15" fill="rgb(234,217,39)" fg:x="53118" fg:w="31"/><text x="17.5881%" y="207.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (51 samples, 0.02%)</title><rect x="17.3342%" y="213" width="0.0166%" height="15" fill="rgb(207,178,40)" fg:x="53106" fg:w="51"/><text x="17.5842%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (36 samples, 0.01%)</title><rect x="17.3584%" y="197" width="0.0118%" height="15" fill="rgb(221,136,13)" fg:x="53180" fg:w="36"/><text x="17.6084%" y="207.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (52 samples, 0.02%)</title><rect x="17.3564%" y="213" width="0.0170%" height="15" fill="rgb(249,199,10)" fg:x="53174" fg:w="52"/><text x="17.6064%" y="223.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (666 samples, 0.22%)</title><rect x="17.1616%" y="245" width="0.2174%" height="15" fill="rgb(249,222,13)" fg:x="52577" fg:w="666"/><text x="17.4116%" y="255.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::iter (148 samples, 0.05%)</title><rect x="17.3306%" y="229" width="0.0483%" height="15" fill="rgb(244,185,38)" fg:x="53095" fg:w="148"/><text x="17.5806%" y="239.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (36 samples, 0.01%)</title><rect x="17.3793%" y="245" width="0.0118%" height="15" fill="rgb(236,202,9)" fg:x="53244" fg:w="36"/><text x="17.6293%" y="255.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (897 samples, 0.29%)</title><rect x="17.0989%" y="261" width="0.2928%" height="15" fill="rgb(250,229,37)" fg:x="52385" fg:w="897"/><text x="17.3489%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (36 samples, 0.01%)</title><rect x="17.3943%" y="197" width="0.0118%" height="15" fill="rgb(206,174,23)" fg:x="53290" fg:w="36"/><text x="17.6443%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (44 samples, 0.01%)</title><rect x="17.3930%" y="213" width="0.0144%" height="15" fill="rgb(211,33,43)" fg:x="53286" fg:w="44"/><text x="17.6430%" y="223.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (50 samples, 0.02%)</title><rect x="17.3920%" y="245" width="0.0163%" height="15" fill="rgb(245,58,50)" fg:x="53283" fg:w="50"/><text x="17.6420%" y="255.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (47 samples, 0.02%)</title><rect x="17.3930%" y="229" width="0.0153%" height="15" fill="rgb(244,68,36)" fg:x="53286" fg:w="47"/><text x="17.6430%" y="239.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (51 samples, 0.02%)</title><rect x="17.3920%" y="261" width="0.0166%" height="15" fill="rgb(232,229,15)" fg:x="53283" fg:w="51"/><text x="17.6420%" y="271.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (966 samples, 0.32%)</title><rect x="17.0940%" y="277" width="0.3153%" height="15" fill="rgb(254,30,23)" fg:x="52370" fg:w="966"/><text x="17.3440%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,764 samples, 0.58%)</title><rect x="16.8371%" y="293" width="0.5758%" height="15" fill="rgb(235,160,14)" fg:x="51583" fg:w="1764"/><text x="17.0871%" y="303.50"></text></g><g><title>powergraph`core::fmt::Formatter::pad (1,806 samples, 0.59%)</title><rect x="17.4181%" y="293" width="0.5895%" height="15" fill="rgb(212,155,44)" fg:x="53363" fg:w="1806"/><text x="17.6681%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_free (4,218 samples, 1.38%)</title><rect x="19.8286%" y="277" width="1.3768%" height="15" fill="rgb(226,2,50)" fg:x="60748" fg:w="4218"/><text x="20.0786%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (963 samples, 0.31%)</title><rect x="21.2054%" y="277" width="0.3143%" height="15" fill="rgb(234,177,6)" fg:x="64966" fg:w="963"/><text x="21.4554%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17,773 samples, 5.80%)</title><rect x="21.5250%" y="277" width="5.8013%" height="15" fill="rgb(217,24,9)" fg:x="65945" fg:w="17773"/><text x="21.7750%" y="287.50">libsyst..</text></g><g><title>powergraph`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (44 samples, 0.01%)</title><rect x="27.3262%" y="277" width="0.0144%" height="15" fill="rgb(220,13,46)" fg:x="83718" fg:w="44"/><text x="27.5762%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (281 samples, 0.09%)</title><rect x="27.3406%" y="277" width="0.0917%" height="15" fill="rgb(239,221,27)" fg:x="83762" fg:w="281"/><text x="27.5906%" y="287.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (926 samples, 0.30%)</title><rect x="27.8325%" y="261" width="0.3023%" height="15" fill="rgb(222,198,25)" fg:x="85269" fg:w="926"/><text x="28.0825%" y="271.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (529 samples, 0.17%)</title><rect x="28.1586%" y="245" width="0.1727%" height="15" fill="rgb(211,99,13)" fg:x="86268" fg:w="529"/><text x="28.4086%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3,679 samples, 1.20%)</title><rect x="28.6984%" y="229" width="1.2009%" height="15" fill="rgb(232,111,31)" fg:x="87922" fg:w="3679"/><text x="28.9484%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5,972 samples, 1.95%)</title><rect x="29.9032%" y="229" width="1.9493%" height="15" fill="rgb(245,82,37)" fg:x="91613" fg:w="5972"/><text x="30.1532%" y="239.50">l..</text></g><g><title>powergraph`DYLD-STUB$$malloc (627 samples, 0.20%)</title><rect x="31.8525%" y="229" width="0.2047%" height="15" fill="rgb(227,149,46)" fg:x="97585" fg:w="627"/><text x="32.1025%" y="239.50"></text></g><g><title>powergraph`__rdl_alloc (499 samples, 0.16%)</title><rect x="32.0572%" y="229" width="0.1629%" height="15" fill="rgb(218,36,50)" fg:x="98212" fg:w="499"/><text x="32.3072%" y="239.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (13,338 samples, 4.35%)</title><rect x="28.3312%" y="245" width="4.3536%" height="15" fill="rgb(226,80,48)" fg:x="86797" fg:w="13338"/><text x="28.5812%" y="255.50">power..</text></g><g><title>powergraph`alloc::raw_vec::finish_grow (1,423 samples, 0.46%)</title><rect x="32.2204%" y="229" width="0.4645%" height="15" fill="rgb(238,224,15)" fg:x="98712" fg:w="1423"/><text x="32.4704%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (32 samples, 0.01%)</title><rect x="32.6744%" y="213" width="0.0104%" height="15" fill="rgb(241,136,10)" fg:x="100103" fg:w="32"/><text x="32.9244%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (32 samples, 0.01%)</title><rect x="32.6744%" y="197" width="0.0104%" height="15" fill="rgb(208,32,45)" fg:x="100103" fg:w="32"/><text x="32.9244%" y="207.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (16,700 samples, 5.45%)</title><rect x="27.4323%" y="277" width="5.4510%" height="15" fill="rgb(207,135,9)" fg:x="84043" fg:w="16700"/><text x="27.6823%" y="287.50">powergr..</text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14,548 samples, 4.75%)</title><rect x="28.1347%" y="261" width="4.7486%" height="15" fill="rgb(206,86,44)" fg:x="86195" fg:w="14548"/><text x="28.3847%" y="271.50">powerg..</text></g><g><title>powergraph`alloc::raw_vec::finish_grow (608 samples, 0.20%)</title><rect x="32.6849%" y="245" width="0.1985%" height="15" fill="rgb(245,177,15)" fg:x="100135" fg:w="608"/><text x="32.9349%" y="255.50"></text></g><g><title>powergraph`DYLD-STUB$$free (1,036 samples, 0.34%)</title><rect x="32.8869%" y="277" width="0.3382%" height="15" fill="rgb(206,64,50)" fg:x="100754" fg:w="1036"/><text x="33.1369%" y="287.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (456 samples, 0.15%)</title><rect x="33.2251%" y="277" width="0.1488%" height="15" fill="rgb(234,36,40)" fg:x="101790" fg:w="456"/><text x="33.4751%" y="287.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (34 samples, 0.01%)</title><rect x="33.3801%" y="277" width="0.0111%" height="15" fill="rgb(213,64,8)" fg:x="102265" fg:w="34"/><text x="33.6301%" y="287.50"></text></g><g><title>powergraph`core::fmt::Formatter::pad (816 samples, 0.27%)</title><rect x="33.3912%" y="277" width="0.2663%" height="15" fill="rgb(210,75,36)" fg:x="102299" fg:w="816"/><text x="33.6412%" y="287.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::string::String&gt; (216 samples, 0.07%)</title><rect x="33.6625%" y="277" width="0.0705%" height="15" fill="rgb(229,88,21)" fg:x="103130" fg:w="216"/><text x="33.9125%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (52 samples, 0.02%)</title><rect x="33.7503%" y="261" width="0.0170%" height="15" fill="rgb(252,204,47)" fg:x="103399" fg:w="52"/><text x="34.0003%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (106 samples, 0.03%)</title><rect x="33.7330%" y="277" width="0.0346%" height="15" fill="rgb(208,77,27)" fg:x="103346" fg:w="106"/><text x="33.9830%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (667 samples, 0.22%)</title><rect x="35.0184%" y="261" width="0.2177%" height="15" fill="rgb(221,76,26)" fg:x="107284" fg:w="667"/><text x="35.2684%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6,670 samples, 2.18%)</title><rect x="35.2361%" y="261" width="2.1771%" height="15" fill="rgb(225,139,18)" fg:x="107951" fg:w="6670"/><text x="35.4861%" y="271.50">l..</text></g><g><title>libsystem_platform.dylib`__bzero (488 samples, 0.16%)</title><rect x="37.4132%" y="261" width="0.1593%" height="15" fill="rgb(230,137,11)" fg:x="114621" fg:w="488"/><text x="37.6632%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2,329 samples, 0.76%)</title><rect x="37.5797%" y="261" width="0.7602%" height="15" fill="rgb(212,28,1)" fg:x="115131" fg:w="2329"/><text x="37.8297%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (330 samples, 0.11%)</title><rect x="38.3402%" y="261" width="0.1077%" height="15" fill="rgb(248,164,17)" fg:x="117461" fg:w="330"/><text x="38.5902%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14,388 samples, 4.70%)</title><rect x="38.4479%" y="261" width="4.6964%" height="15" fill="rgb(222,171,42)" fg:x="117791" fg:w="14388"/><text x="38.6979%" y="271.50">power..</text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (8,206 samples, 2.68%)</title><rect x="43.1541%" y="261" width="2.6785%" height="15" fill="rgb(243,84,45)" fg:x="132209" fg:w="8206"/><text x="43.4041%" y="271.50">po..</text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (85,422 samples, 27.88%)</title><rect x="18.0109%" y="293" width="27.8824%" height="15" fill="rgb(252,49,23)" fg:x="55179" fg:w="85422"/><text x="18.2609%" y="303.50">powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::f..</text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::contains (37,143 samples, 12.12%)</title><rect x="33.7695%" y="277" width="12.1238%" height="15" fill="rgb(215,19,7)" fg:x="103458" fg:w="37143"/><text x="34.0195%" y="287.50">powergraph`powergr..</text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::string::String&gt; (186 samples, 0.06%)</title><rect x="45.8326%" y="261" width="0.0607%" height="15" fill="rgb(238,81,41)" fg:x="140415" fg:w="186"/><text x="46.0826%" y="271.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::contains (1,040 samples, 0.34%)</title><rect x="45.8933%" y="293" width="0.3395%" height="15" fill="rgb(210,199,37)" fg:x="140601" fg:w="1040"/><text x="46.1433%" y="303.50"></text></g><g><title>powergraph`powergraph::edge_repository::EdgeRepository::subgraph (91,011 samples, 29.71%)</title><rect x="16.5273%" y="309" width="29.7067%" height="15" fill="rgb(244,192,49)" fg:x="50634" fg:w="91011"/><text x="16.7773%" y="319.50">powergraph`powergraph::edge_repository::EdgeRepo..</text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (61 samples, 0.02%)</title><rect x="46.2504%" y="261" width="0.0199%" height="15" fill="rgb(226,211,11)" fg:x="141695" fg:w="61"/><text x="46.5004%" y="271.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (70 samples, 0.02%)</title><rect x="46.2484%" y="277" width="0.0228%" height="15" fill="rgb(236,162,54)" fg:x="141689" fg:w="70"/><text x="46.4984%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (34 samples, 0.01%)</title><rect x="46.2788%" y="245" width="0.0111%" height="15" fill="rgb(220,229,9)" fg:x="141782" fg:w="34"/><text x="46.5288%" y="255.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (40 samples, 0.01%)</title><rect x="46.2775%" y="261" width="0.0131%" height="15" fill="rgb(250,87,22)" fg:x="141778" fg:w="40"/><text x="46.5275%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (180 samples, 0.06%)</title><rect x="46.2412%" y="293" width="0.0588%" height="15" fill="rgb(239,43,17)" fg:x="141667" fg:w="180"/><text x="46.4912%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (87 samples, 0.03%)</title><rect x="46.2716%" y="277" width="0.0284%" height="15" fill="rgb(231,177,25)" fg:x="141760" fg:w="87"/><text x="46.5216%" y="287.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::from_iter (208 samples, 0.07%)</title><rect x="46.2341%" y="309" width="0.0679%" height="15" fill="rgb(219,179,1)" fg:x="141645" fg:w="208"/><text x="46.4841%" y="319.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (96,679 samples, 31.56%)</title><rect x="14.7546%" y="325" width="31.5568%" height="15" fill="rgb(238,219,53)" fg:x="45203" fg:w="96679"/><text x="15.0046%" y="335.50">powergraph`core::ops::function::impls::_&lt;impl core:..</text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (135,985 samples, 44.39%)</title><rect x="1.9291%" y="341" width="44.3866%" height="15" fill="rgb(232,167,36)" fg:x="5910" fg:w="135985"/><text x="2.1791%" y="351.50">powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::Spec..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (33 samples, 0.01%)</title><rect x="46.3291%" y="293" width="0.0108%" height="15" fill="rgb(244,19,51)" fg:x="141936" fg:w="33"/><text x="46.5791%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (97 samples, 0.03%)</title><rect x="46.3180%" y="325" width="0.0317%" height="15" fill="rgb(224,6,22)" fg:x="141902" fg:w="97"/><text x="46.5680%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (74 samples, 0.02%)</title><rect x="46.3255%" y="309" width="0.0242%" height="15" fill="rgb(224,145,5)" fg:x="141925" fg:w="74"/><text x="46.5755%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (42 samples, 0.01%)</title><rect x="46.3594%" y="277" width="0.0137%" height="15" fill="rgb(234,130,49)" fg:x="142029" fg:w="42"/><text x="46.6094%" y="287.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (46 samples, 0.02%)</title><rect x="46.3594%" y="293" width="0.0150%" height="15" fill="rgb(254,6,2)" fg:x="142029" fg:w="46"/><text x="46.6094%" y="303.50"></text></g><g><title>powergraph`powergraph::edge_repository::EdgeRepository::children (51 samples, 0.02%)</title><rect x="46.3584%" y="309" width="0.0166%" height="15" fill="rgb(208,96,46)" fg:x="142026" fg:w="51"/><text x="46.6084%" y="319.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (68 samples, 0.02%)</title><rect x="46.3852%" y="277" width="0.0222%" height="15" fill="rgb(239,3,39)" fg:x="142108" fg:w="68"/><text x="46.6352%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (65 samples, 0.02%)</title><rect x="46.3862%" y="261" width="0.0212%" height="15" fill="rgb(233,210,1)" fg:x="142111" fg:w="65"/><text x="46.6362%" y="271.50"></text></g><g><title>powergraph`powergraph::PowerGraph::neighbors (181 samples, 0.06%)</title><rect x="46.3496%" y="325" width="0.0591%" height="15" fill="rgb(244,137,37)" fg:x="141999" fg:w="181"/><text x="46.5996%" y="335.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::union (74 samples, 0.02%)</title><rect x="46.3845%" y="309" width="0.0242%" height="15" fill="rgb(240,136,2)" fg:x="142106" fg:w="74"/><text x="46.6345%" y="319.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (74 samples, 0.02%)</title><rect x="46.3845%" y="293" width="0.0242%" height="15" fill="rgb(239,18,37)" fg:x="142106" fg:w="74"/><text x="46.6345%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (46 samples, 0.02%)</title><rect x="46.4312%" y="261" width="0.0150%" height="15" fill="rgb(218,185,22)" fg:x="142249" fg:w="46"/><text x="46.6812%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (72 samples, 0.02%)</title><rect x="46.4462%" y="261" width="0.0235%" height="15" fill="rgb(225,218,4)" fg:x="142295" fg:w="72"/><text x="46.6962%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (67 samples, 0.02%)</title><rect x="46.4479%" y="245" width="0.0219%" height="15" fill="rgb(230,182,32)" fg:x="142300" fg:w="67"/><text x="46.6979%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (62 samples, 0.02%)</title><rect x="46.4495%" y="229" width="0.0202%" height="15" fill="rgb(242,56,43)" fg:x="142305" fg:w="62"/><text x="46.6995%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 samples, 0.02%)</title><rect x="46.4828%" y="245" width="0.0173%" height="15" fill="rgb(233,99,24)" fg:x="142407" fg:w="53"/><text x="46.7328%" y="255.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (319 samples, 0.10%)</title><rect x="46.4090%" y="293" width="0.1041%" height="15" fill="rgb(234,209,42)" fg:x="142181" fg:w="319"/><text x="46.6590%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (308 samples, 0.10%)</title><rect x="46.4126%" y="277" width="0.1005%" height="15" fill="rgb(227,7,12)" fg:x="142192" fg:w="308"/><text x="46.6626%" y="287.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (106 samples, 0.03%)</title><rect x="46.4785%" y="261" width="0.0346%" height="15" fill="rgb(245,203,43)" fg:x="142394" fg:w="106"/><text x="46.7285%" y="271.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (322 samples, 0.11%)</title><rect x="46.4090%" y="309" width="0.1051%" height="15" fill="rgb(238,205,33)" fg:x="142181" fg:w="322"/><text x="46.6590%" y="319.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (607 samples, 0.20%)</title><rect x="46.3163%" y="341" width="0.1981%" height="15" fill="rgb(231,56,7)" fg:x="141897" fg:w="607"/><text x="46.5663%" y="351.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::union (323 samples, 0.11%)</title><rect x="46.4090%" y="325" width="0.1054%" height="15" fill="rgb(244,186,29)" fg:x="142181" fg:w="323"/><text x="46.6590%" y="335.50"></text></g><g><title>powergraph`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.01%)</title><rect x="46.5177%" y="341" width="0.0108%" height="15" fill="rgb(234,111,31)" fg:x="142514" fg:w="33"/><text x="46.7677%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (37 samples, 0.01%)</title><rect x="46.5575%" y="309" width="0.0121%" height="15" fill="rgb(241,149,10)" fg:x="142636" fg:w="37"/><text x="46.8075%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (74 samples, 0.02%)</title><rect x="46.5696%" y="309" width="0.0242%" height="15" fill="rgb(249,206,44)" fg:x="142673" fg:w="74"/><text x="46.8196%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (88 samples, 0.03%)</title><rect x="46.5980%" y="293" width="0.0287%" height="15" fill="rgb(251,153,30)" fg:x="142760" fg:w="88"/><text x="46.8480%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (74 samples, 0.02%)</title><rect x="46.6026%" y="277" width="0.0242%" height="15" fill="rgb(239,152,38)" fg:x="142774" fg:w="74"/><text x="46.8526%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (102 samples, 0.03%)</title><rect x="46.5938%" y="309" width="0.0333%" height="15" fill="rgb(249,139,47)" fg:x="142747" fg:w="102"/><text x="46.8438%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (279 samples, 0.09%)</title><rect x="46.5442%" y="325" width="0.0911%" height="15" fill="rgb(244,64,35)" fg:x="142595" fg:w="279"/><text x="46.7942%" y="335.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (364 samples, 0.12%)</title><rect x="46.5285%" y="341" width="0.1188%" height="15" fill="rgb(216,46,15)" fg:x="142547" fg:w="364"/><text x="46.7785%" y="351.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (37 samples, 0.01%)</title><rect x="46.6352%" y="325" width="0.0121%" height="15" fill="rgb(250,74,19)" fg:x="142874" fg:w="37"/><text x="46.8852%" y="335.50"></text></g><g><title>powergraph`&lt;powergraph::Edge as core::cmp::PartialEq&gt;::eq (51 samples, 0.02%)</title><rect x="46.6473%" y="341" width="0.0166%" height="15" fill="rgb(249,42,33)" fg:x="142911" fg:w="51"/><text x="46.8973%" y="351.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (72 samples, 0.02%)</title><rect x="46.6662%" y="309" width="0.0235%" height="15" fill="rgb(242,149,17)" fg:x="142969" fg:w="72"/><text x="46.9162%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (48 samples, 0.02%)</title><rect x="46.6741%" y="293" width="0.0157%" height="15" fill="rgb(244,29,21)" fg:x="142993" fg:w="48"/><text x="46.9241%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (46 samples, 0.02%)</title><rect x="46.6747%" y="277" width="0.0150%" height="15" fill="rgb(220,130,37)" fg:x="142995" fg:w="46"/><text x="46.9247%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (45 samples, 0.01%)</title><rect x="46.6750%" y="261" width="0.0147%" height="15" fill="rgb(211,67,2)" fg:x="142996" fg:w="45"/><text x="46.9250%" y="271.50"></text></g><g><title>powergraph`&lt;powergraph::PowerEdgeCandidate as core::clone::Clone&gt;::clone (100 samples, 0.03%)</title><rect x="46.6639%" y="341" width="0.0326%" height="15" fill="rgb(235,68,52)" fg:x="142962" fg:w="100"/><text x="46.9139%" y="351.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (99 samples, 0.03%)</title><rect x="46.6643%" y="325" width="0.0323%" height="15" fill="rgb(246,142,3)" fg:x="142963" fg:w="99"/><text x="46.9143%" y="335.50"></text></g><g><title>powergraph`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (131 samples, 0.04%)</title><rect x="46.7054%" y="325" width="0.0428%" height="15" fill="rgb(241,25,7)" fg:x="143089" fg:w="131"/><text x="46.9554%" y="335.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6,176 samples, 2.02%)</title><rect x="47.1219%" y="309" width="2.0159%" height="15" fill="rgb(242,119,39)" fg:x="144365" fg:w="6176"/><text x="47.3719%" y="319.50">p..</text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (1,215 samples, 0.40%)</title><rect x="49.1391%" y="309" width="0.3966%" height="15" fill="rgb(241,98,45)" fg:x="150545" fg:w="1215"/><text x="49.3891%" y="319.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (9,108 samples, 2.97%)</title><rect x="46.7482%" y="325" width="2.9729%" height="15" fill="rgb(254,28,30)" fg:x="143220" fg:w="9108"/><text x="46.9982%" y="335.50">pow..</text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (568 samples, 0.19%)</title><rect x="49.5357%" y="309" width="0.1854%" height="15" fill="rgb(241,142,54)" fg:x="151760" fg:w="568"/><text x="49.7857%" y="319.50"></text></g><g><title>powergraph`&lt;powergraph::PowerEdgeCandidate as core::cmp::PartialEq&gt;::eq (9,283 samples, 3.03%)</title><rect x="46.6966%" y="341" width="3.0300%" height="15" fill="rgb(222,85,15)" fg:x="143062" fg:w="9283"/><text x="46.9466%" y="351.50">pow..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (176 samples, 0.06%)</title><rect x="49.7439%" y="325" width="0.0574%" height="15" fill="rgb(210,85,47)" fg:x="152398" fg:w="176"/><text x="49.9939%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (156 samples, 0.05%)</title><rect x="49.8014%" y="325" width="0.0509%" height="15" fill="rgb(224,206,25)" fg:x="152574" fg:w="156"/><text x="50.0514%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (227 samples, 0.07%)</title><rect x="49.8526%" y="325" width="0.0741%" height="15" fill="rgb(243,201,19)" fg:x="152731" fg:w="227"/><text x="50.1026%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (295 samples, 0.10%)</title><rect x="49.9306%" y="325" width="0.0963%" height="15" fill="rgb(236,59,4)" fg:x="152970" fg:w="295"/><text x="50.1806%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (46 samples, 0.02%)</title><rect x="50.0269%" y="325" width="0.0150%" height="15" fill="rgb(254,179,45)" fg:x="153265" fg:w="46"/><text x="50.2769%" y="335.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (143 samples, 0.05%)</title><rect x="50.0419%" y="325" width="0.0467%" height="15" fill="rgb(226,14,10)" fg:x="153311" fg:w="143"/><text x="50.2919%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (64 samples, 0.02%)</title><rect x="50.0677%" y="309" width="0.0209%" height="15" fill="rgb(244,27,41)" fg:x="153390" fg:w="64"/><text x="50.3177%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (64 samples, 0.02%)</title><rect x="50.0677%" y="293" width="0.0209%" height="15" fill="rgb(235,35,32)" fg:x="153390" fg:w="64"/><text x="50.3177%" y="303.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (32 samples, 0.01%)</title><rect x="50.0903%" y="325" width="0.0104%" height="15" fill="rgb(218,68,31)" fg:x="153459" fg:w="32"/><text x="50.3403%" y="335.50"></text></g><g><title>powergraph`&lt;powergraph::sets::SetIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,182 samples, 0.39%)</title><rect x="49.7279%" y="341" width="0.3858%" height="15" fill="rgb(207,120,37)" fg:x="152349" fg:w="1182"/><text x="49.9779%" y="351.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (68 samples, 0.02%)</title><rect x="50.2446%" y="325" width="0.0222%" height="15" fill="rgb(227,98,0)" fg:x="153932" fg:w="68"/><text x="50.4946%" y="335.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (43 samples, 0.01%)</title><rect x="50.2691%" y="325" width="0.0140%" height="15" fill="rgb(207,7,3)" fg:x="154007" fg:w="43"/><text x="50.5191%" y="335.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (515 samples, 0.17%)</title><rect x="50.1183%" y="341" width="0.1681%" height="15" fill="rgb(206,98,19)" fg:x="153545" fg:w="515"/><text x="50.3683%" y="351.50"></text></g><g><title>powergraph`DYLD-STUB$$free (164 samples, 0.05%)</title><rect x="50.2864%" y="341" width="0.0535%" height="15" fill="rgb(217,5,26)" fg:x="154060" fg:w="164"/><text x="50.5364%" y="351.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entry (95 samples, 0.03%)</title><rect x="50.3661%" y="133" width="0.0310%" height="15" fill="rgb(235,190,38)" fg:x="154304" fg:w="95"/><text x="50.6161%" y="143.50"></text></g><g><title>powergraph`&lt;str as core::fmt::Debug&gt;::fmt (88 samples, 0.03%)</title><rect x="50.3684%" y="117" width="0.0287%" height="15" fill="rgb(247,86,24)" fg:x="154311" fg:w="88"/><text x="50.6184%" y="127.50"></text></g><g><title>powergraph`&lt;&amp;T as core::fmt::Debug&gt;::fmt (105 samples, 0.03%)</title><rect x="50.3641%" y="213" width="0.0343%" height="15" fill="rgb(205,101,16)" fg:x="154298" fg:w="105"/><text x="50.6141%" y="223.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field1_finish (105 samples, 0.03%)</title><rect x="50.3641%" y="197" width="0.0343%" height="15" fill="rgb(246,168,33)" fg:x="154298" fg:w="105"/><text x="50.6141%" y="207.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (105 samples, 0.03%)</title><rect x="50.3641%" y="181" width="0.0343%" height="15" fill="rgb(231,114,1)" fg:x="154298" fg:w="105"/><text x="50.6141%" y="191.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::fmt::Debug&gt;::fmt (104 samples, 0.03%)</title><rect x="50.3644%" y="165" width="0.0339%" height="15" fill="rgb(207,184,53)" fg:x="154299" fg:w="104"/><text x="50.6144%" y="175.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entries (100 samples, 0.03%)</title><rect x="50.3657%" y="149" width="0.0326%" height="15" fill="rgb(224,95,51)" fg:x="154303" fg:w="100"/><text x="50.6157%" y="159.50"></text></g><g><title>powergraph`&lt;powergraph::clusters::Cluster as core::fmt::Debug&gt;::fmt (151 samples, 0.05%)</title><rect x="50.3608%" y="261" width="0.0493%" height="15" fill="rgb(212,188,45)" fg:x="154288" fg:w="151"/><text x="50.6108%" y="271.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field2_finish (151 samples, 0.05%)</title><rect x="50.3608%" y="245" width="0.0493%" height="15" fill="rgb(223,154,38)" fg:x="154288" fg:w="151"/><text x="50.6108%" y="255.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (141 samples, 0.05%)</title><rect x="50.3641%" y="229" width="0.0460%" height="15" fill="rgb(251,22,52)" fg:x="154298" fg:w="141"/><text x="50.6141%" y="239.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::fmt::Debug&gt;::fmt (31 samples, 0.01%)</title><rect x="50.4000%" y="213" width="0.0101%" height="15" fill="rgb(229,209,22)" fg:x="154408" fg:w="31"/><text x="50.6500%" y="223.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (170 samples, 0.06%)</title><rect x="50.3605%" y="277" width="0.0555%" height="15" fill="rgb(234,138,34)" fg:x="154287" fg:w="170"/><text x="50.6105%" y="287.50"></text></g><g><title>powergraph`&lt;&amp;T as core::fmt::Debug&gt;::fmt (179 samples, 0.06%)</title><rect x="50.3589%" y="309" width="0.0584%" height="15" fill="rgb(212,95,11)" fg:x="154282" fg:w="179"/><text x="50.6089%" y="319.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field3_finish (177 samples, 0.06%)</title><rect x="50.3595%" y="293" width="0.0578%" height="15" fill="rgb(240,179,47)" fg:x="154284" fg:w="177"/><text x="50.6095%" y="303.50"></text></g><g><title>powergraph`&lt;powergraph::clusters::Cluster as core::fmt::Debug&gt;::fmt (39 samples, 0.01%)</title><rect x="50.4232%" y="229" width="0.0127%" height="15" fill="rgb(240,163,11)" fg:x="154479" fg:w="39"/><text x="50.6732%" y="239.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field2_finish (39 samples, 0.01%)</title><rect x="50.4232%" y="213" width="0.0127%" height="15" fill="rgb(236,37,12)" fg:x="154479" fg:w="39"/><text x="50.6732%" y="223.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (39 samples, 0.01%)</title><rect x="50.4232%" y="197" width="0.0127%" height="15" fill="rgb(232,164,16)" fg:x="154479" fg:w="39"/><text x="50.6732%" y="207.50"></text></g><g><title>powergraph`&lt;[T] as core::fmt::Debug&gt;::fmt (52 samples, 0.02%)</title><rect x="50.4196%" y="309" width="0.0170%" height="15" fill="rgb(244,205,15)" fg:x="154468" fg:w="52"/><text x="50.6696%" y="319.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entry (52 samples, 0.02%)</title><rect x="50.4196%" y="293" width="0.0170%" height="15" fill="rgb(223,117,47)" fg:x="154468" fg:w="52"/><text x="50.6696%" y="303.50"></text></g><g><title>powergraph`&lt;&amp;T as core::fmt::Debug&gt;::fmt (52 samples, 0.02%)</title><rect x="50.4196%" y="277" width="0.0170%" height="15" fill="rgb(244,107,35)" fg:x="154468" fg:w="52"/><text x="50.6696%" y="287.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field3_finish (41 samples, 0.01%)</title><rect x="50.4232%" y="261" width="0.0134%" height="15" fill="rgb(205,140,8)" fg:x="154479" fg:w="41"/><text x="50.6732%" y="271.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (41 samples, 0.01%)</title><rect x="50.4232%" y="245" width="0.0134%" height="15" fill="rgb(228,84,46)" fg:x="154479" fg:w="41"/><text x="50.6732%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (37 samples, 0.01%)</title><rect x="50.4725%" y="37" width="0.0121%" height="15" fill="rgb(254,188,9)" fg:x="154630" fg:w="37"/><text x="50.7225%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (41 samples, 0.01%)</title><rect x="50.4725%" y="53" width="0.0134%" height="15" fill="rgb(206,112,54)" fg:x="154630" fg:w="41"/><text x="50.7225%" y="63.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (44 samples, 0.01%)</title><rect x="50.4718%" y="101" width="0.0144%" height="15" fill="rgb(216,84,49)" fg:x="154628" fg:w="44"/><text x="50.7218%" y="111.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (43 samples, 0.01%)</title><rect x="50.4721%" y="85" width="0.0140%" height="15" fill="rgb(214,194,35)" fg:x="154629" fg:w="43"/><text x="50.7221%" y="95.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (42 samples, 0.01%)</title><rect x="50.4725%" y="69" width="0.0137%" height="15" fill="rgb(249,28,3)" fg:x="154630" fg:w="42"/><text x="50.7225%" y="79.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entry (123 samples, 0.04%)</title><rect x="50.4477%" y="133" width="0.0401%" height="15" fill="rgb(222,56,52)" fg:x="154554" fg:w="123"/><text x="50.6977%" y="143.50"></text></g><g><title>powergraph`&lt;str as core::fmt::Debug&gt;::fmt (116 samples, 0.04%)</title><rect x="50.4500%" y="117" width="0.0379%" height="15" fill="rgb(245,217,50)" fg:x="154561" fg:w="116"/><text x="50.7000%" y="127.50"></text></g><g><title>powergraph`&lt;&amp;T as core::fmt::Debug&gt;::fmt (135 samples, 0.04%)</title><rect x="50.4444%" y="213" width="0.0441%" height="15" fill="rgb(213,201,24)" fg:x="154544" fg:w="135"/><text x="50.6944%" y="223.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field1_finish (135 samples, 0.04%)</title><rect x="50.4444%" y="197" width="0.0441%" height="15" fill="rgb(248,116,28)" fg:x="154544" fg:w="135"/><text x="50.6944%" y="207.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (134 samples, 0.04%)</title><rect x="50.4447%" y="181" width="0.0437%" height="15" fill="rgb(219,72,43)" fg:x="154545" fg:w="134"/><text x="50.6947%" y="191.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::fmt::Debug&gt;::fmt (133 samples, 0.04%)</title><rect x="50.4451%" y="165" width="0.0434%" height="15" fill="rgb(209,138,14)" fg:x="154546" fg:w="133"/><text x="50.6951%" y="175.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entries (129 samples, 0.04%)</title><rect x="50.4464%" y="149" width="0.0421%" height="15" fill="rgb(222,18,33)" fg:x="154550" fg:w="129"/><text x="50.6964%" y="159.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field2_finish (167 samples, 0.05%)</title><rect x="50.4418%" y="245" width="0.0545%" height="15" fill="rgb(213,199,7)" fg:x="154536" fg:w="167"/><text x="50.6918%" y="255.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (161 samples, 0.05%)</title><rect x="50.4438%" y="229" width="0.0526%" height="15" fill="rgb(250,110,10)" fg:x="154542" fg:w="161"/><text x="50.6938%" y="239.50"></text></g><g><title>powergraph`&lt;powergraph::clusters::Cluster as core::fmt::Debug&gt;::fmt (169 samples, 0.06%)</title><rect x="50.4418%" y="261" width="0.0552%" height="15" fill="rgb(248,123,6)" fg:x="154536" fg:w="169"/><text x="50.6918%" y="271.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (188 samples, 0.06%)</title><rect x="50.4402%" y="277" width="0.0614%" height="15" fill="rgb(206,91,31)" fg:x="154531" fg:w="188"/><text x="50.6902%" y="287.50"></text></g><g><title>powergraph`&lt;powergraph::PowerEdgeCandidate as core::fmt::Debug&gt;::fmt (198 samples, 0.06%)</title><rect x="50.4379%" y="309" width="0.0646%" height="15" fill="rgb(211,154,13)" fg:x="154524" fg:w="198"/><text x="50.6879%" y="319.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field3_finish (197 samples, 0.06%)</title><rect x="50.4382%" y="293" width="0.0643%" height="15" fill="rgb(225,148,7)" fg:x="154525" fg:w="197"/><text x="50.6882%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (36 samples, 0.01%)</title><rect x="50.5273%" y="149" width="0.0118%" height="15" fill="rgb(220,160,43)" fg:x="154798" fg:w="36"/><text x="50.7773%" y="159.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (35 samples, 0.01%)</title><rect x="50.5276%" y="133" width="0.0114%" height="15" fill="rgb(213,52,39)" fg:x="154799" fg:w="35"/><text x="50.7776%" y="143.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (34 samples, 0.01%)</title><rect x="50.5280%" y="117" width="0.0111%" height="15" fill="rgb(243,137,7)" fg:x="154800" fg:w="34"/><text x="50.7780%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (34 samples, 0.01%)</title><rect x="50.5280%" y="101" width="0.0111%" height="15" fill="rgb(230,79,13)" fg:x="154800" fg:w="34"/><text x="50.7780%" y="111.50"></text></g><g><title>powergraph`&lt;&amp;T as core::fmt::Debug&gt;::fmt (96 samples, 0.03%)</title><rect x="50.5081%" y="261" width="0.0313%" height="15" fill="rgb(247,105,23)" fg:x="154739" fg:w="96"/><text x="50.7581%" y="271.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field1_finish (96 samples, 0.03%)</title><rect x="50.5081%" y="245" width="0.0313%" height="15" fill="rgb(223,179,41)" fg:x="154739" fg:w="96"/><text x="50.7581%" y="255.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (96 samples, 0.03%)</title><rect x="50.5081%" y="229" width="0.0313%" height="15" fill="rgb(218,9,34)" fg:x="154739" fg:w="96"/><text x="50.7581%" y="239.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::fmt::Debug&gt;::fmt (96 samples, 0.03%)</title><rect x="50.5081%" y="213" width="0.0313%" height="15" fill="rgb(222,106,8)" fg:x="154739" fg:w="96"/><text x="50.7581%" y="223.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entries (92 samples, 0.03%)</title><rect x="50.5094%" y="197" width="0.0300%" height="15" fill="rgb(211,220,0)" fg:x="154743" fg:w="92"/><text x="50.7594%" y="207.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entry (89 samples, 0.03%)</title><rect x="50.5103%" y="181" width="0.0291%" height="15" fill="rgb(229,52,16)" fg:x="154746" fg:w="89"/><text x="50.7603%" y="191.50"></text></g><g><title>powergraph`&lt;str as core::fmt::Debug&gt;::fmt (85 samples, 0.03%)</title><rect x="50.5116%" y="165" width="0.0277%" height="15" fill="rgb(212,155,18)" fg:x="154750" fg:w="85"/><text x="50.7616%" y="175.50"></text></g><g><title>powergraph`&lt;powergraph::clusters::Cluster as core::fmt::Debug&gt;::fmt (134 samples, 0.04%)</title><rect x="50.5048%" y="309" width="0.0437%" height="15" fill="rgb(242,21,14)" fg:x="154729" fg:w="134"/><text x="50.7548%" y="319.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field2_finish (134 samples, 0.04%)</title><rect x="50.5048%" y="293" width="0.0437%" height="15" fill="rgb(222,19,48)" fg:x="154729" fg:w="134"/><text x="50.7548%" y="303.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (127 samples, 0.04%)</title><rect x="50.5071%" y="277" width="0.0415%" height="15" fill="rgb(232,45,27)" fg:x="154736" fg:w="127"/><text x="50.7571%" y="287.50"></text></g><g><title>powergraph`alloc::fmt::format::format_inner (649 samples, 0.21%)</title><rect x="50.3468%" y="341" width="0.2118%" height="15" fill="rgb(249,103,42)" fg:x="154245" fg:w="649"/><text x="50.5968%" y="351.50"></text></g><g><title>powergraph`core::fmt::write (623 samples, 0.20%)</title><rect x="50.3553%" y="325" width="0.2034%" height="15" fill="rgb(246,81,33)" fg:x="154271" fg:w="623"/><text x="50.6053%" y="335.50"></text></g><g><title>powergraph`&lt;powergraph::PowerEdgeCandidate as core::hash::Hash&gt;::hash (90 samples, 0.03%)</title><rect x="50.5635%" y="325" width="0.0294%" height="15" fill="rgb(252,33,42)" fg:x="154909" fg:w="90"/><text x="50.8135%" y="335.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::hash::Hash&gt;::hash (84 samples, 0.03%)</title><rect x="50.5655%" y="309" width="0.0274%" height="15" fill="rgb(209,212,41)" fg:x="154915" fg:w="84"/><text x="50.8155%" y="319.50"></text></g><g><title>powergraph`itertools::Itertools::sorted (52 samples, 0.02%)</title><rect x="50.5759%" y="293" width="0.0170%" height="15" fill="rgb(207,154,6)" fg:x="154947" fg:w="52"/><text x="50.8259%" y="303.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (154 samples, 0.05%)</title><rect x="50.5613%" y="341" width="0.0503%" height="15" fill="rgb(223,64,47)" fg:x="154902" fg:w="154"/><text x="50.8113%" y="351.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::hash::Hash&gt;::hash (57 samples, 0.02%)</title><rect x="50.5929%" y="325" width="0.0186%" height="15" fill="rgb(211,161,38)" fg:x="154999" fg:w="57"/><text x="50.8429%" y="335.50"></text></g><g><title>powergraph`itertools::Itertools::sorted (32 samples, 0.01%)</title><rect x="50.6011%" y="309" width="0.0104%" height="15" fill="rgb(219,138,40)" fg:x="155024" fg:w="32"/><text x="50.8511%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_free (211 samples, 0.07%)</title><rect x="50.6327%" y="325" width="0.0689%" height="15" fill="rgb(241,228,46)" fg:x="155121" fg:w="211"/><text x="50.8827%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (43 samples, 0.01%)</title><rect x="50.7016%" y="325" width="0.0140%" height="15" fill="rgb(223,209,38)" fg:x="155332" fg:w="43"/><text x="50.9516%" y="335.50"></text></g><g><title>powergraph`DYLD-STUB$$free (54 samples, 0.02%)</title><rect x="50.7163%" y="325" width="0.0176%" height="15" fill="rgb(236,164,45)" fg:x="155377" fg:w="54"/><text x="50.9663%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (334 samples, 0.11%)</title><rect x="50.7806%" y="309" width="0.1090%" height="15" fill="rgb(231,15,5)" fg:x="155574" fg:w="334"/><text x="51.0306%" y="319.50"></text></g><g><title>libsystem_platform.dylib`__bzero (92 samples, 0.03%)</title><rect x="50.8896%" y="309" width="0.0300%" height="15" fill="rgb(252,35,15)" fg:x="155908" fg:w="92"/><text x="51.1396%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (156 samples, 0.05%)</title><rect x="50.9197%" y="309" width="0.0509%" height="15" fill="rgb(248,181,18)" fg:x="156000" fg:w="156"/><text x="51.1697%" y="319.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (1,052 samples, 0.34%)</title><rect x="50.6275%" y="341" width="0.3434%" height="15" fill="rgb(233,39,42)" fg:x="155105" fg:w="1052"/><text x="50.8775%" y="351.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (704 samples, 0.23%)</title><rect x="50.7411%" y="325" width="0.2298%" height="15" fill="rgb(238,110,33)" fg:x="155453" fg:w="704"/><text x="50.9911%" y="335.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;powergraph::unordered_tuple::UnorderedTuple&lt;powergraph::clusters::Cluster&gt;&gt; (77 samples, 0.03%)</title><rect x="50.9797%" y="309" width="0.0251%" height="15" fill="rgb(233,195,10)" fg:x="156184" fg:w="77"/><text x="51.2297%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (51 samples, 0.02%)</title><rect x="50.9882%" y="293" width="0.0166%" height="15" fill="rgb(254,105,3)" fg:x="156210" fg:w="51"/><text x="51.2382%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (45 samples, 0.01%)</title><rect x="50.9902%" y="277" width="0.0147%" height="15" fill="rgb(221,225,9)" fg:x="156216" fg:w="45"/><text x="51.2402%" y="287.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;powergraph::unordered_tuple::UnorderedTuple&lt;powergraph::clusters::Cluster&gt;&gt;&gt; (163 samples, 0.05%)</title><rect x="50.9719%" y="341" width="0.0532%" height="15" fill="rgb(224,227,45)" fg:x="156160" fg:w="163"/><text x="51.2219%" y="351.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (163 samples, 0.05%)</title><rect x="50.9719%" y="325" width="0.0532%" height="15" fill="rgb(229,198,43)" fg:x="156160" fg:w="163"/><text x="51.2219%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (62 samples, 0.02%)</title><rect x="51.0048%" y="309" width="0.0202%" height="15" fill="rgb(206,209,35)" fg:x="156261" fg:w="62"/><text x="51.2548%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (51 samples, 0.02%)</title><rect x="51.0084%" y="293" width="0.0166%" height="15" fill="rgb(245,195,53)" fg:x="156272" fg:w="51"/><text x="51.2584%" y="303.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;powergraph::PowerEdgeCandidate&gt; (57 samples, 0.02%)</title><rect x="51.0254%" y="341" width="0.0186%" height="15" fill="rgb(240,92,26)" fg:x="156324" fg:w="57"/><text x="51.2754%" y="351.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;powergraph::clusters::Cluster&gt; (37 samples, 0.01%)</title><rect x="51.0479%" y="341" width="0.0121%" height="15" fill="rgb(207,40,23)" fg:x="156393" fg:w="37"/><text x="51.2979%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (170 samples, 0.06%)</title><rect x="51.0656%" y="325" width="0.0555%" height="15" fill="rgb(223,111,35)" fg:x="156447" fg:w="170"/><text x="51.3156%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`madvise (164 samples, 0.05%)</title><rect x="51.0675%" y="309" width="0.0535%" height="15" fill="rgb(229,147,28)" fg:x="156453" fg:w="164"/><text x="51.3175%" y="319.50"></text></g><g><title>powergraph`core::slice::sort::stable::drift::create_run (634 samples, 0.21%)</title><rect x="51.1266%" y="309" width="0.2069%" height="15" fill="rgb(211,29,28)" fg:x="156634" fg:w="634"/><text x="51.3766%" y="319.50"></text></g><g><title>powergraph`core::slice::sort::stable::drift::sort (636 samples, 0.21%)</title><rect x="51.1263%" y="325" width="0.2076%" height="15" fill="rgb(228,72,33)" fg:x="156633" fg:w="636"/><text x="51.3763%" y="335.50"></text></g><g><title>powergraph`core::slice::sort::stable::driftsort_main (832 samples, 0.27%)</title><rect x="51.0626%" y="341" width="0.2716%" height="15" fill="rgb(205,214,31)" fg:x="156438" fg:w="832"/><text x="51.3126%" y="351.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (39 samples, 0.01%)</title><rect x="51.3355%" y="325" width="0.0127%" height="15" fill="rgb(224,111,15)" fg:x="157274" fg:w="39"/><text x="51.5855%" y="335.50"></text></g><g><title>powergraph`&lt;powergraph::PowerEdgeCandidate as core::hash::Hash&gt;::hash (31 samples, 0.01%)</title><rect x="51.3486%" y="293" width="0.0101%" height="15" fill="rgb(253,21,26)" fg:x="157314" fg:w="31"/><text x="51.5986%" y="303.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::hash::Hash&gt;::hash (31 samples, 0.01%)</title><rect x="51.3486%" y="277" width="0.0101%" height="15" fill="rgb(245,139,43)" fg:x="157314" fg:w="31"/><text x="51.5986%" y="287.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (107 samples, 0.03%)</title><rect x="51.3342%" y="341" width="0.0349%" height="15" fill="rgb(252,170,7)" fg:x="157270" fg:w="107"/><text x="51.5842%" y="351.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (64 samples, 0.02%)</title><rect x="51.3482%" y="325" width="0.0209%" height="15" fill="rgb(231,118,14)" fg:x="157313" fg:w="64"/><text x="51.5982%" y="335.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (64 samples, 0.02%)</title><rect x="51.3482%" y="309" width="0.0209%" height="15" fill="rgb(238,83,0)" fg:x="157313" fg:w="64"/><text x="51.5982%" y="319.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::hash::Hash&gt;::hash (32 samples, 0.01%)</title><rect x="51.3587%" y="293" width="0.0104%" height="15" fill="rgb(221,39,39)" fg:x="157345" fg:w="32"/><text x="51.6087%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (402 samples, 0.13%)</title><rect x="51.3737%" y="341" width="0.1312%" height="15" fill="rgb(222,119,46)" fg:x="157391" fg:w="402"/><text x="51.6237%" y="351.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (62 samples, 0.02%)</title><rect x="51.5075%" y="341" width="0.0202%" height="15" fill="rgb(222,165,49)" fg:x="157801" fg:w="62"/><text x="51.7575%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_free (934 samples, 0.30%)</title><rect x="51.6270%" y="325" width="0.3049%" height="15" fill="rgb(219,113,52)" fg:x="158167" fg:w="934"/><text x="51.8770%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (196 samples, 0.06%)</title><rect x="51.9318%" y="325" width="0.0640%" height="15" fill="rgb(214,7,15)" fg:x="159101" fg:w="196"/><text x="52.1818%" y="335.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (127 samples, 0.04%)</title><rect x="51.9991%" y="325" width="0.0415%" height="15" fill="rgb(235,32,4)" fg:x="159307" fg:w="127"/><text x="52.2491%" y="335.50"></text></g><g><title>powergraph`DYLD-STUB$$free (257 samples, 0.08%)</title><rect x="52.0405%" y="325" width="0.0839%" height="15" fill="rgb(238,90,54)" fg:x="159434" fg:w="257"/><text x="52.2905%" y="335.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::string::String&gt; (65 samples, 0.02%)</title><rect x="52.1261%" y="325" width="0.0212%" height="15" fill="rgb(213,208,19)" fg:x="159696" fg:w="65"/><text x="52.3761%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (129 samples, 0.04%)</title><rect x="52.3137%" y="309" width="0.0421%" height="15" fill="rgb(233,156,4)" fg:x="160271" fg:w="129"/><text x="52.5637%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,714 samples, 0.56%)</title><rect x="52.3559%" y="309" width="0.5595%" height="15" fill="rgb(207,194,5)" fg:x="160400" fg:w="1714"/><text x="52.6059%" y="319.50"></text></g><g><title>libsystem_platform.dylib`__bzero (242 samples, 0.08%)</title><rect x="52.9248%" y="309" width="0.0790%" height="15" fill="rgb(206,111,30)" fg:x="162143" fg:w="242"/><text x="53.1748%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1,046 samples, 0.34%)</title><rect x="53.0038%" y="309" width="0.3414%" height="15" fill="rgb(243,70,54)" fg:x="162385" fg:w="1046"/><text x="53.2538%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (78 samples, 0.03%)</title><rect x="53.3458%" y="309" width="0.0255%" height="15" fill="rgb(242,28,8)" fg:x="163433" fg:w="78"/><text x="53.5958%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (5,737 samples, 1.87%)</title><rect x="51.5278%" y="341" width="1.8726%" height="15" fill="rgb(219,106,18)" fg:x="157863" fg:w="5737"/><text x="51.7778%" y="351.50">p..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (3,839 samples, 1.25%)</title><rect x="52.1473%" y="325" width="1.2531%" height="15" fill="rgb(244,222,10)" fg:x="159761" fg:w="3839"/><text x="52.3973%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (50 samples, 0.02%)</title><rect x="53.3840%" y="309" width="0.0163%" height="15" fill="rgb(236,179,52)" fg:x="163550" fg:w="50"/><text x="53.6340%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (37 samples, 0.01%)</title><rect x="53.3883%" y="293" width="0.0121%" height="15" fill="rgb(213,23,39)" fg:x="163563" fg:w="37"/><text x="53.6383%" y="303.50"></text></g><g><title>powergraph`hashbrown::set::HashSet&lt;T,S,A&gt;::get (84 samples, 0.03%)</title><rect x="53.4004%" y="341" width="0.0274%" height="15" fill="rgb(238,48,10)" fg:x="163600" fg:w="84"/><text x="53.6504%" y="351.50"></text></g><g><title>powergraph`&lt;colored::ColoredString as core::fmt::Display&gt;::fmt (54 samples, 0.02%)</title><rect x="53.4731%" y="309" width="0.0176%" height="15" fill="rgb(251,196,23)" fg:x="163823" fg:w="54"/><text x="53.7231%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (34 samples, 0.01%)</title><rect x="53.5120%" y="277" width="0.0111%" height="15" fill="rgb(250,152,24)" fg:x="163942" fg:w="34"/><text x="53.7620%" y="287.50"></text></g><g><title>powergraph`alloc::fmt::format::format_inner (125 samples, 0.04%)</title><rect x="53.4989%" y="309" width="0.0408%" height="15" fill="rgb(209,150,17)" fg:x="163902" fg:w="125"/><text x="53.7489%" y="319.50"></text></g><g><title>powergraph`core::fmt::write (104 samples, 0.03%)</title><rect x="53.5058%" y="293" width="0.0339%" height="15" fill="rgb(234,202,34)" fg:x="163923" fg:w="104"/><text x="53.7558%" y="303.50"></text></g><g><title>powergraph`core::fmt::write (40 samples, 0.01%)</title><rect x="53.5267%" y="277" width="0.0131%" height="15" fill="rgb(253,148,53)" fg:x="163987" fg:w="40"/><text x="53.7767%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (32 samples, 0.01%)</title><rect x="53.5293%" y="261" width="0.0104%" height="15" fill="rgb(218,129,16)" fg:x="163995" fg:w="32"/><text x="53.7793%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`write (629 samples, 0.21%)</title><rect x="53.5567%" y="229" width="0.2053%" height="15" fill="rgb(216,85,19)" fg:x="164079" fg:w="629"/><text x="53.8067%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`write (527 samples, 0.17%)</title><rect x="53.7725%" y="213" width="0.1720%" height="15" fill="rgb(235,228,7)" fg:x="164740" fg:w="527"/><text x="54.0225%" y="223.50"></text></g><g><title>powergraph`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1,195 samples, 0.39%)</title><rect x="53.5547%" y="245" width="0.3901%" height="15" fill="rgb(245,175,0)" fg:x="164073" fg:w="1195"/><text x="53.8047%" y="255.50"></text></g><g><title>powergraph`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (529 samples, 0.17%)</title><rect x="53.7721%" y="229" width="0.1727%" height="15" fill="rgb(208,168,36)" fg:x="164739" fg:w="529"/><text x="54.0221%" y="239.50"></text></g><g><title>powergraph`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1,209 samples, 0.39%)</title><rect x="53.5531%" y="261" width="0.3946%" height="15" fill="rgb(246,171,24)" fg:x="164068" fg:w="1209"/><text x="53.8031%" y="271.50"></text></g><g><title>powergraph`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1,234 samples, 0.40%)</title><rect x="53.5456%" y="293" width="0.4028%" height="15" fill="rgb(215,142,24)" fg:x="164045" fg:w="1234"/><text x="53.7956%" y="303.50"></text></g><g><title>powergraph`core::fmt::write (1,215 samples, 0.40%)</title><rect x="53.5518%" y="277" width="0.3966%" height="15" fill="rgb(250,187,7)" fg:x="164064" fg:w="1215"/><text x="53.8018%" y="287.50"></text></g><g><title>powergraph`std::io::stdio::_print (1,251 samples, 0.41%)</title><rect x="53.5423%" y="309" width="0.4083%" height="15" fill="rgb(228,66,33)" fg:x="164035" fg:w="1251"/><text x="53.7923%" y="319.50"></text></g><g><title>powergraph`time::formatting::formattable::_&lt;impl time::formatting::formattable::sealed::Sealed for [time::format_description::borrowed_format_item::BorrowedFormatItem]&gt;::format_into (123 samples, 0.04%)</title><rect x="53.9566%" y="293" width="0.0401%" height="15" fill="rgb(234,215,21)" fg:x="165304" fg:w="123"/><text x="54.2066%" y="303.50"></text></g><g><title>powergraph`time::formatting::formattable::_&lt;impl time::formatting::formattable::sealed::Sealed for time::format_description::borrowed_format_item::BorrowedFormatItem&gt;::format_into (112 samples, 0.04%)</title><rect x="53.9601%" y="277" width="0.0366%" height="15" fill="rgb(222,191,20)" fg:x="165315" fg:w="112"/><text x="54.2101%" y="287.50"></text></g><g><title>powergraph`time::formatting::format_component (80 samples, 0.03%)</title><rect x="53.9706%" y="261" width="0.0261%" height="15" fill="rgb(245,79,54)" fg:x="165347" fg:w="80"/><text x="54.2206%" y="271.50"></text></g><g><title>powergraph`time::formatting::formattable::sealed::Sealed::format (142 samples, 0.05%)</title><rect x="53.9530%" y="309" width="0.0463%" height="15" fill="rgb(240,10,37)" fg:x="165293" fg:w="142"/><text x="54.2030%" y="319.50"></text></g><g><title>powergraph`&lt;simple_logger::SimpleLogger as log::Log&gt;::log (1,728 samples, 0.56%)</title><rect x="53.4412%" y="325" width="0.5640%" height="15" fill="rgb(214,192,32)" fg:x="163725" fg:w="1728"/><text x="53.6912%" y="335.50"></text></g><g><title>powergraph`log::__private_api::log_impl (1,781 samples, 0.58%)</title><rect x="53.4278%" y="341" width="0.5813%" height="15" fill="rgb(209,36,54)" fg:x="163684" fg:w="1781"/><text x="53.6778%" y="351.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (37 samples, 0.01%)</title><rect x="54.0287%" y="309" width="0.0121%" height="15" fill="rgb(220,10,11)" fg:x="165525" fg:w="37"/><text x="54.2787%" y="319.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (46 samples, 0.02%)</title><rect x="54.0522%" y="293" width="0.0150%" height="15" fill="rgb(221,106,17)" fg:x="165597" fg:w="46"/><text x="54.3022%" y="303.50"></text></g><g><title>powergraph`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (86 samples, 0.03%)</title><rect x="54.0408%" y="309" width="0.0281%" height="15" fill="rgb(251,142,44)" fg:x="165562" fg:w="86"/><text x="54.2908%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (34 samples, 0.01%)</title><rect x="54.0946%" y="261" width="0.0111%" height="15" fill="rgb(238,13,15)" fg:x="165727" fg:w="34"/><text x="54.3446%" y="271.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (46 samples, 0.02%)</title><rect x="54.0927%" y="277" width="0.0150%" height="15" fill="rgb(208,107,27)" fg:x="165721" fg:w="46"/><text x="54.3427%" y="287.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::get_id (132 samples, 0.04%)</title><rect x="54.0688%" y="309" width="0.0431%" height="15" fill="rgb(205,136,37)" fg:x="165648" fg:w="132"/><text x="54.3188%" y="319.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::to_vec (70 samples, 0.02%)</title><rect x="54.0891%" y="293" width="0.0228%" height="15" fill="rgb(250,205,27)" fg:x="165710" fg:w="70"/><text x="54.3391%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (288 samples, 0.09%)</title><rect x="54.0182%" y="325" width="0.0940%" height="15" fill="rgb(210,80,43)" fg:x="165493" fg:w="288"/><text x="54.2682%" y="335.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (62 samples, 0.02%)</title><rect x="54.1139%" y="309" width="0.0202%" height="15" fill="rgb(247,160,36)" fg:x="165786" fg:w="62"/><text x="54.3639%" y="319.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (75 samples, 0.02%)</title><rect x="54.1123%" y="325" width="0.0245%" height="15" fill="rgb(234,13,49)" fg:x="165781" fg:w="75"/><text x="54.3623%" y="335.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (36 samples, 0.01%)</title><rect x="54.1367%" y="325" width="0.0118%" height="15" fill="rgb(234,122,0)" fg:x="165856" fg:w="36"/><text x="54.3867%" y="335.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (96 samples, 0.03%)</title><rect x="54.1491%" y="309" width="0.0313%" height="15" fill="rgb(207,146,38)" fg:x="165894" fg:w="96"/><text x="54.3991%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_free (416 samples, 0.14%)</title><rect x="54.3819%" y="293" width="0.1358%" height="15" fill="rgb(207,177,25)" fg:x="166607" fg:w="416"/><text x="54.6319%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (85 samples, 0.03%)</title><rect x="54.5183%" y="293" width="0.0277%" height="15" fill="rgb(211,178,42)" fg:x="167025" fg:w="85"/><text x="54.7683%" y="303.50"></text></g><g><title>powergraph`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.02%)</title><rect x="54.5581%" y="293" width="0.0170%" height="15" fill="rgb(230,69,54)" fg:x="167147" fg:w="52"/><text x="54.8081%" y="303.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (636 samples, 0.21%)</title><rect x="54.8917%" y="277" width="0.2076%" height="15" fill="rgb(214,135,41)" fg:x="168169" fg:w="636"/><text x="55.1417%" y="287.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (380 samples, 0.12%)</title><rect x="55.1006%" y="277" width="0.1240%" height="15" fill="rgb(237,67,25)" fg:x="168809" fg:w="380"/><text x="55.3506%" y="287.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (2,044 samples, 0.67%)</title><rect x="54.5751%" y="293" width="0.6672%" height="15" fill="rgb(222,189,50)" fg:x="167199" fg:w="2044"/><text x="54.8251%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (54 samples, 0.02%)</title><rect x="55.2247%" y="277" width="0.0176%" height="15" fill="rgb(245,148,34)" fg:x="169189" fg:w="54"/><text x="55.4747%" y="287.50"></text></g><g><title>powergraph`DYLD-STUB$$free (96 samples, 0.03%)</title><rect x="55.2423%" y="293" width="0.0313%" height="15" fill="rgb(222,29,6)" fg:x="169243" fg:w="96"/><text x="55.4923%" y="303.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (60 samples, 0.02%)</title><rect x="55.2775%" y="293" width="0.0196%" height="15" fill="rgb(221,189,43)" fg:x="169351" fg:w="60"/><text x="55.5275%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (34 samples, 0.01%)</title><rect x="55.2860%" y="277" width="0.0111%" height="15" fill="rgb(207,36,27)" fg:x="169377" fg:w="34"/><text x="55.5360%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (212 samples, 0.07%)</title><rect x="55.2971%" y="293" width="0.0692%" height="15" fill="rgb(217,90,24)" fg:x="169411" fg:w="212"/><text x="55.5471%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (215 samples, 0.07%)</title><rect x="55.4149%" y="277" width="0.0702%" height="15" fill="rgb(224,66,35)" fg:x="169772" fg:w="215"/><text x="55.6649%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (89 samples, 0.03%)</title><rect x="55.4851%" y="277" width="0.0291%" height="15" fill="rgb(221,13,50)" fg:x="169987" fg:w="89"/><text x="55.7351%" y="287.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (48 samples, 0.02%)</title><rect x="55.6173%" y="261" width="0.0157%" height="15" fill="rgb(236,68,49)" fg:x="170392" fg:w="48"/><text x="55.8673%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,844 samples, 1.58%)</title><rect x="55.9685%" y="245" width="1.5811%" height="15" fill="rgb(229,146,28)" fg:x="171468" fg:w="4844"/><text x="56.2185%" y="255.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (1,064 samples, 0.35%)</title><rect x="57.5497%" y="245" width="0.3473%" height="15" fill="rgb(225,31,38)" fg:x="176312" fg:w="1064"/><text x="57.7997%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (6,939 samples, 2.26%)</title><rect x="55.6349%" y="261" width="2.2649%" height="15" fill="rgb(250,208,3)" fg:x="170446" fg:w="6939"/><text x="55.8849%" y="271.50">p..</text></g><g><title>libdyld.dylib`tlv_get_addr (370 samples, 0.12%)</title><rect x="57.9381%" y="245" width="0.1208%" height="15" fill="rgb(246,54,23)" fg:x="177502" fg:w="370"/><text x="58.1881%" y="255.50"></text></g><g><title>powergraph`powergraph::cluster_repository::is_partial_subset (8,315 samples, 2.71%)</title><rect x="55.3663%" y="293" width="2.7141%" height="15" fill="rgb(243,76,11)" fg:x="169623" fg:w="8315"/><text x="55.6163%" y="303.50">po..</text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (7,838 samples, 2.56%)</title><rect x="55.5220%" y="277" width="2.5584%" height="15" fill="rgb(245,21,50)" fg:x="170100" fg:w="7838"/><text x="55.7720%" y="287.50">po..</text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (553 samples, 0.18%)</title><rect x="57.8999%" y="261" width="0.1805%" height="15" fill="rgb(228,9,43)" fg:x="177385" fg:w="553"/><text x="58.1499%" y="271.50"></text></g><g><title>powergraph`core::ops::function::FnOnce::call_once (66 samples, 0.02%)</title><rect x="58.0589%" y="245" width="0.0215%" height="15" fill="rgb(208,100,47)" fg:x="177872" fg:w="66"/><text x="58.3089%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (53 samples, 0.02%)</title><rect x="58.1081%" y="277" width="0.0173%" height="15" fill="rgb(232,26,8)" fg:x="178023" fg:w="53"/><text x="58.3581%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (788 samples, 0.26%)</title><rect x="58.1261%" y="277" width="0.2572%" height="15" fill="rgb(216,166,38)" fg:x="178078" fg:w="788"/><text x="58.3761%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (45 samples, 0.01%)</title><rect x="58.3840%" y="277" width="0.0147%" height="15" fill="rgb(251,202,51)" fg:x="178868" fg:w="45"/><text x="58.6340%" y="287.50"></text></g><g><title>libsystem_platform.dylib`__bzero (56 samples, 0.02%)</title><rect x="58.3993%" y="277" width="0.0183%" height="15" fill="rgb(254,216,34)" fg:x="178915" fg:w="56"/><text x="58.6493%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (279 samples, 0.09%)</title><rect x="58.4280%" y="277" width="0.0911%" height="15" fill="rgb(251,32,27)" fg:x="179003" fg:w="279"/><text x="58.6780%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (41 samples, 0.01%)</title><rect x="58.5191%" y="277" width="0.0134%" height="15" fill="rgb(208,127,28)" fg:x="179282" fg:w="41"/><text x="58.7691%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (696 samples, 0.23%)</title><rect x="58.5821%" y="261" width="0.2272%" height="15" fill="rgb(224,137,22)" fg:x="179475" fg:w="696"/><text x="58.8321%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (165 samples, 0.05%)</title><rect x="58.8093%" y="261" width="0.0539%" height="15" fill="rgb(254,70,32)" fg:x="180171" fg:w="165"/><text x="59.0593%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (89 samples, 0.03%)</title><rect x="58.8651%" y="261" width="0.0291%" height="15" fill="rgb(229,75,37)" fg:x="180342" fg:w="89"/><text x="59.1151%" y="271.50"></text></g><g><title>powergraph`DYLD-STUB$$free (201 samples, 0.07%)</title><rect x="58.8941%" y="261" width="0.0656%" height="15" fill="rgb(252,64,23)" fg:x="180431" fg:w="201"/><text x="59.1441%" y="271.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::string::String&gt; (54 samples, 0.02%)</title><rect x="58.9601%" y="261" width="0.0176%" height="15" fill="rgb(232,162,48)" fg:x="180633" fg:w="54"/><text x="59.2101%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (91 samples, 0.03%)</title><rect x="59.0825%" y="245" width="0.0297%" height="15" fill="rgb(246,160,12)" fg:x="181008" fg:w="91"/><text x="59.3325%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,113 samples, 0.36%)</title><rect x="59.1122%" y="245" width="0.3633%" height="15" fill="rgb(247,166,0)" fg:x="181099" fg:w="1113"/><text x="59.3622%" y="255.50"></text></g><g><title>libsystem_platform.dylib`__bzero (116 samples, 0.04%)</title><rect x="59.4755%" y="245" width="0.0379%" height="15" fill="rgb(249,219,21)" fg:x="182212" fg:w="116"/><text x="59.7255%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (640 samples, 0.21%)</title><rect x="59.5133%" y="245" width="0.2089%" height="15" fill="rgb(205,209,3)" fg:x="182328" fg:w="640"/><text x="59.7633%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.02%)</title><rect x="59.7222%" y="245" width="0.0193%" height="15" fill="rgb(243,44,1)" fg:x="182968" fg:w="59"/><text x="59.9722%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (3,706 samples, 1.21%)</title><rect x="58.5325%" y="277" width="1.2097%" height="15" fill="rgb(206,159,16)" fg:x="179323" fg:w="3706"/><text x="58.7825%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (2,342 samples, 0.76%)</title><rect x="58.9777%" y="261" width="0.7644%" height="15" fill="rgb(244,77,30)" fg:x="180687" fg:w="2342"/><text x="59.2277%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (211 samples, 0.07%)</title><rect x="59.9990%" y="261" width="0.0689%" height="15" fill="rgb(218,69,12)" fg:x="183816" fg:w="211"/><text x="60.2490%" y="271.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (63 samples, 0.02%)</title><rect x="60.0679%" y="261" width="0.0206%" height="15" fill="rgb(212,87,7)" fg:x="184027" fg:w="63"/><text x="60.3179%" y="271.50"></text></g><g><title>powergraph`core::ops::function::FnOnce::call_once (267 samples, 0.09%)</title><rect x="60.0885%" y="261" width="0.0872%" height="15" fill="rgb(245,114,25)" fg:x="184090" fg:w="267"/><text x="60.3385%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (398 samples, 0.13%)</title><rect x="60.1756%" y="261" width="0.1299%" height="15" fill="rgb(210,61,42)" fg:x="184357" fg:w="398"/><text x="60.4256%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,274 samples, 0.42%)</title><rect x="60.5980%" y="245" width="0.4158%" height="15" fill="rgb(211,52,33)" fg:x="185651" fg:w="1274"/><text x="60.8480%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc (84 samples, 0.03%)</title><rect x="61.0138%" y="245" width="0.0274%" height="15" fill="rgb(234,58,33)" fg:x="186925" fg:w="84"/><text x="61.2638%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,910 samples, 0.62%)</title><rect x="61.0419%" y="245" width="0.6234%" height="15" fill="rgb(220,115,36)" fg:x="187011" fg:w="1910"/><text x="61.2919%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (685 samples, 0.22%)</title><rect x="61.6657%" y="245" width="0.2236%" height="15" fill="rgb(243,153,54)" fg:x="188922" fg:w="685"/><text x="61.9157%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (506 samples, 0.17%)</title><rect x="61.8896%" y="245" width="0.1652%" height="15" fill="rgb(251,47,18)" fg:x="189608" fg:w="506"/><text x="62.1396%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (156 samples, 0.05%)</title><rect x="62.0038%" y="229" width="0.0509%" height="15" fill="rgb(242,102,42)" fg:x="189958" fg:w="156"/><text x="62.2538%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (151 samples, 0.05%)</title><rect x="62.0055%" y="213" width="0.0493%" height="15" fill="rgb(234,31,38)" fg:x="189963" fg:w="151"/><text x="62.2555%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,320 samples, 1.08%)</title><rect x="62.0547%" y="245" width="1.0837%" height="15" fill="rgb(221,117,51)" fg:x="190114" fg:w="3320"/><text x="62.3047%" y="255.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (138 samples, 0.05%)</title><rect x="63.1384%" y="245" width="0.0450%" height="15" fill="rgb(212,20,18)" fg:x="193434" fg:w="138"/><text x="63.3884%" y="255.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (66 samples, 0.02%)</title><rect x="63.1835%" y="245" width="0.0215%" height="15" fill="rgb(245,133,36)" fg:x="193572" fg:w="66"/><text x="63.4335%" y="255.50"></text></g><g><title>powergraph`__rdl_alloc (114 samples, 0.04%)</title><rect x="63.2050%" y="245" width="0.0372%" height="15" fill="rgb(212,6,19)" fg:x="193638" fg:w="114"/><text x="63.4550%" y="255.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (1,431 samples, 0.47%)</title><rect x="63.2429%" y="245" width="0.4671%" height="15" fill="rgb(218,1,36)" fg:x="193754" fg:w="1431"/><text x="63.4929%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (32 samples, 0.01%)</title><rect x="63.9593%" y="229" width="0.0104%" height="15" fill="rgb(246,84,54)" fg:x="195949" fg:w="32"/><text x="64.2093%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (250 samples, 0.08%)</title><rect x="63.9717%" y="229" width="0.0816%" height="15" fill="rgb(242,110,6)" fg:x="195987" fg:w="250"/><text x="64.2217%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,997 samples, 0.65%)</title><rect x="64.0533%" y="229" width="0.6518%" height="15" fill="rgb(214,47,5)" fg:x="196237" fg:w="1997"/><text x="64.3033%" y="239.50"></text></g><g><title>powergraph`DYLD-STUB$$memset (46 samples, 0.02%)</title><rect x="64.7081%" y="229" width="0.0150%" height="15" fill="rgb(218,159,25)" fg:x="198243" fg:w="46"/><text x="64.9581%" y="239.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (1,232 samples, 0.40%)</title><rect x="64.7231%" y="229" width="0.4021%" height="15" fill="rgb(215,211,28)" fg:x="198289" fg:w="1232"/><text x="64.9731%" y="239.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (117 samples, 0.04%)</title><rect x="65.1253%" y="229" width="0.0382%" height="15" fill="rgb(238,59,32)" fg:x="199521" fg:w="117"/><text x="65.3753%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (469 samples, 0.15%)</title><rect x="65.4389%" y="213" width="0.1531%" height="15" fill="rgb(226,82,3)" fg:x="200482" fg:w="469"/><text x="65.6889%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (70 samples, 0.02%)</title><rect x="65.5920%" y="213" width="0.0228%" height="15" fill="rgb(240,164,32)" fg:x="200951" fg:w="70"/><text x="65.8420%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (528 samples, 0.17%)</title><rect x="65.6237%" y="213" width="0.1723%" height="15" fill="rgb(232,46,7)" fg:x="201048" fg:w="528"/><text x="65.8737%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (929 samples, 0.30%)</title><rect x="65.8039%" y="213" width="0.3032%" height="15" fill="rgb(229,129,53)" fg:x="201600" fg:w="929"/><text x="66.0539%" y="223.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (84 samples, 0.03%)</title><rect x="66.1071%" y="213" width="0.0274%" height="15" fill="rgb(234,188,29)" fg:x="202529" fg:w="84"/><text x="66.3571%" y="223.50"></text></g><g><title>powergraph`__rdl_alloc (67 samples, 0.02%)</title><rect x="66.1345%" y="213" width="0.0219%" height="15" fill="rgb(246,141,4)" fg:x="202613" fg:w="67"/><text x="66.3845%" y="223.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (257 samples, 0.08%)</title><rect x="66.1574%" y="213" width="0.0839%" height="15" fill="rgb(229,23,39)" fg:x="202683" fg:w="257"/><text x="66.4074%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (73 samples, 0.02%)</title><rect x="66.3444%" y="197" width="0.0238%" height="15" fill="rgb(206,12,3)" fg:x="203256" fg:w="73"/><text x="66.5944%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (50 samples, 0.02%)</title><rect x="66.3519%" y="181" width="0.0163%" height="15" fill="rgb(252,226,20)" fg:x="203279" fg:w="50"/><text x="66.6019%" y="191.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3,694 samples, 1.21%)</title><rect x="65.1634%" y="229" width="1.2058%" height="15" fill="rgb(216,123,35)" fg:x="199638" fg:w="3694"/><text x="65.4134%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (392 samples, 0.13%)</title><rect x="66.2412%" y="213" width="0.1280%" height="15" fill="rgb(212,68,40)" fg:x="202940" fg:w="392"/><text x="66.4912%" y="223.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8,205 samples, 2.68%)</title><rect x="63.7100%" y="245" width="2.6782%" height="15" fill="rgb(254,125,32)" fg:x="195185" fg:w="8205"/><text x="63.9600%" y="255.50">po..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (58 samples, 0.02%)</title><rect x="66.3692%" y="229" width="0.0189%" height="15" fill="rgb(253,97,22)" fg:x="203332" fg:w="58"/><text x="66.6192%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (18,775 samples, 6.13%)</title><rect x="60.3055%" y="261" width="6.1283%" height="15" fill="rgb(241,101,14)" fg:x="184755" fg:w="18775"/><text x="60.5555%" y="271.50">powergra..</text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (140 samples, 0.05%)</title><rect x="66.3881%" y="245" width="0.0457%" height="15" fill="rgb(238,103,29)" fg:x="203390" fg:w="140"/><text x="66.6381%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1,538 samples, 0.50%)</title><rect x="66.5970%" y="245" width="0.5020%" height="15" fill="rgb(233,195,47)" fg:x="204030" fg:w="1538"/><text x="66.8470%" y="255.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (23,155 samples, 7.56%)</title><rect x="59.7421%" y="277" width="7.5580%" height="15" fill="rgb(246,218,30)" fg:x="183029" fg:w="23155"/><text x="59.9921%" y="287.50">powergraph..</text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (2,654 samples, 0.87%)</title><rect x="66.4338%" y="261" width="0.8663%" height="15" fill="rgb(219,145,47)" fg:x="203530" fg:w="2654"/><text x="66.6838%" y="271.50"></text></g><g><title>powergraph`core::ops::function::FnOnce::call_once (616 samples, 0.20%)</title><rect x="67.0990%" y="245" width="0.2011%" height="15" fill="rgb(243,12,26)" fg:x="205568" fg:w="616"/><text x="67.3490%" y="255.50"></text></g><g><title>powergraph`powergraph::cluster_repository::is_subset (28,922 samples, 9.44%)</title><rect x="58.0804%" y="293" width="9.4404%" height="15" fill="rgb(214,87,16)" fg:x="177938" fg:w="28922"/><text x="58.3304%" y="303.50">powergraph`pow..</text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (676 samples, 0.22%)</title><rect x="67.3001%" y="277" width="0.2207%" height="15" fill="rgb(208,99,42)" fg:x="206184" fg:w="676"/><text x="67.5501%" y="287.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::get_id (89 samples, 0.03%)</title><rect x="67.5208%" y="293" width="0.0291%" height="15" fill="rgb(253,99,2)" fg:x="206860" fg:w="89"/><text x="67.7708%" y="303.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (256 samples, 0.08%)</title><rect x="67.5498%" y="293" width="0.0836%" height="15" fill="rgb(220,168,23)" fg:x="206949" fg:w="256"/><text x="67.7998%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (41,485 samples, 13.54%)</title><rect x="54.1808%" y="309" width="13.5410%" height="15" fill="rgb(242,38,24)" fg:x="165991" fg:w="41485"/><text x="54.4308%" y="319.50">powergraph`hashbrown..</text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (271 samples, 0.09%)</title><rect x="67.6334%" y="293" width="0.0885%" height="15" fill="rgb(225,182,9)" fg:x="207205" fg:w="271"/><text x="67.8834%" y="303.50"></text></g><g><title>powergraph`powergraph::cluster_repository::is_partial_subset (232 samples, 0.08%)</title><rect x="67.7218%" y="309" width="0.0757%" height="15" fill="rgb(243,178,37)" fg:x="207476" fg:w="232"/><text x="67.9718%" y="319.50"></text></g><g><title>powergraph`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (41,987 samples, 13.70%)</title><rect x="54.1485%" y="325" width="13.7049%" height="15" fill="rgb(232,139,19)" fg:x="165892" fg:w="41987"/><text x="54.3985%" y="335.50">powergraph`&lt;std::coll..</text></g><g><title>powergraph`powergraph::cluster_repository::is_subset (171 samples, 0.06%)</title><rect x="67.7976%" y="309" width="0.0558%" height="15" fill="rgb(225,201,24)" fg:x="207708" fg:w="171"/><text x="68.0476%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (31 samples, 0.01%)</title><rect x="67.8625%" y="325" width="0.0101%" height="15" fill="rgb(221,47,46)" fg:x="207907" fg:w="31"/><text x="68.1125%" y="335.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (35 samples, 0.01%)</title><rect x="67.8808%" y="309" width="0.0114%" height="15" fill="rgb(249,23,13)" fg:x="207963" fg:w="35"/><text x="68.1308%" y="319.50"></text></g><g><title>powergraph`powergraph::cluster_repository::ClusterRepository::add_cluster (42,527 samples, 13.88%)</title><rect x="54.0117%" y="341" width="13.8812%" height="15" fill="rgb(219,9,5)" fg:x="165473" fg:w="42527"/><text x="54.2617%" y="351.50">powergraph`powergraph..</text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::to_vec (47 samples, 0.02%)</title><rect x="67.8775%" y="325" width="0.0153%" height="15" fill="rgb(254,171,16)" fg:x="207953" fg:w="47"/><text x="68.1275%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (92 samples, 0.03%)</title><rect x="67.9007%" y="261" width="0.0300%" height="15" fill="rgb(230,171,20)" fg:x="208024" fg:w="92"/><text x="68.1507%" y="271.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (110 samples, 0.04%)</title><rect x="67.8991%" y="277" width="0.0359%" height="15" fill="rgb(210,71,41)" fg:x="208019" fg:w="110"/><text x="68.1491%" y="287.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (34 samples, 0.01%)</title><rect x="67.9392%" y="261" width="0.0111%" height="15" fill="rgb(206,173,20)" fg:x="208142" fg:w="34"/><text x="68.1892%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (46 samples, 0.02%)</title><rect x="67.9546%" y="229" width="0.0150%" height="15" fill="rgb(233,88,34)" fg:x="208189" fg:w="46"/><text x="68.2046%" y="239.50"></text></g><g><title>powergraph`core::slice::sort::stable::drift::create_run (34 samples, 0.01%)</title><rect x="67.9898%" y="181" width="0.0111%" height="15" fill="rgb(223,209,46)" fg:x="208297" fg:w="34"/><text x="68.2398%" y="191.50"></text></g><g><title>powergraph`core::slice::sort::stable::quicksort::quicksort (33 samples, 0.01%)</title><rect x="67.9901%" y="165" width="0.0108%" height="15" fill="rgb(250,43,18)" fg:x="208298" fg:w="33"/><text x="68.2401%" y="175.50"></text></g><g><title>powergraph`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (32 samples, 0.01%)</title><rect x="67.9905%" y="149" width="0.0104%" height="15" fill="rgb(208,13,10)" fg:x="208299" fg:w="32"/><text x="68.2405%" y="159.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::hash::Hash&gt;::hash (162 samples, 0.05%)</title><rect x="67.9513%" y="245" width="0.0529%" height="15" fill="rgb(212,200,36)" fg:x="208179" fg:w="162"/><text x="68.2013%" y="255.50"></text></g><g><title>powergraph`itertools::Itertools::sorted (105 samples, 0.03%)</title><rect x="67.9699%" y="229" width="0.0343%" height="15" fill="rgb(225,90,30)" fg:x="208236" fg:w="105"/><text x="68.2199%" y="239.50"></text></g><g><title>powergraph`core::slice::sort::stable::driftsort_main (46 samples, 0.02%)</title><rect x="67.9892%" y="213" width="0.0150%" height="15" fill="rgb(236,182,39)" fg:x="208295" fg:w="46"/><text x="68.2392%" y="223.50"></text></g><g><title>powergraph`core::slice::sort::stable::drift::sort (45 samples, 0.01%)</title><rect x="67.9895%" y="197" width="0.0147%" height="15" fill="rgb(212,144,35)" fg:x="208296" fg:w="45"/><text x="68.2395%" y="207.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (166 samples, 0.05%)</title><rect x="67.9503%" y="261" width="0.0542%" height="15" fill="rgb(228,63,44)" fg:x="208176" fg:w="166"/><text x="68.2003%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (36 samples, 0.01%)</title><rect x="68.0087%" y="213" width="0.0118%" height="15" fill="rgb(228,109,6)" fg:x="208355" fg:w="36"/><text x="68.2587%" y="223.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::hash::Hash&gt;::hash (122 samples, 0.04%)</title><rect x="68.0061%" y="229" width="0.0398%" height="15" fill="rgb(238,117,24)" fg:x="208347" fg:w="122"/><text x="68.2561%" y="239.50"></text></g><g><title>powergraph`itertools::Itertools::sorted (77 samples, 0.03%)</title><rect x="68.0208%" y="213" width="0.0251%" height="15" fill="rgb(242,26,26)" fg:x="208392" fg:w="77"/><text x="68.2708%" y="223.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (126 samples, 0.04%)</title><rect x="68.0052%" y="245" width="0.0411%" height="15" fill="rgb(221,92,48)" fg:x="208344" fg:w="126"/><text x="68.2552%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (130 samples, 0.04%)</title><rect x="68.0048%" y="261" width="0.0424%" height="15" fill="rgb(209,209,32)" fg:x="208343" fg:w="130"/><text x="68.2548%" y="271.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (485 samples, 0.16%)</title><rect x="67.8935%" y="325" width="0.1583%" height="15" fill="rgb(221,70,22)" fg:x="208002" fg:w="485"/><text x="68.1435%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (482 samples, 0.16%)</title><rect x="67.8945%" y="309" width="0.1573%" height="15" fill="rgb(248,145,5)" fg:x="208005" fg:w="482"/><text x="68.1445%" y="319.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (481 samples, 0.16%)</title><rect x="67.8948%" y="293" width="0.1570%" height="15" fill="rgb(226,116,26)" fg:x="208006" fg:w="481"/><text x="68.1448%" y="303.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (354 samples, 0.12%)</title><rect x="67.9363%" y="277" width="0.1155%" height="15" fill="rgb(244,5,17)" fg:x="208133" fg:w="354"/><text x="68.1863%" y="287.50"></text></g><g><title>powergraph`powergraph::cluster_repository::ClusterRepository::get_sibling_clusters (490 samples, 0.16%)</title><rect x="67.8932%" y="341" width="0.1599%" height="15" fill="rgb(252,159,33)" fg:x="208001" fg:w="490"/><text x="68.1432%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_free (71 samples, 0.02%)</title><rect x="68.0773%" y="325" width="0.0232%" height="15" fill="rgb(206,71,0)" fg:x="208565" fg:w="71"/><text x="68.3273%" y="335.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (47 samples, 0.02%)</title><rect x="68.1191%" y="309" width="0.0153%" height="15" fill="rgb(233,118,54)" fg:x="208693" fg:w="47"/><text x="68.3691%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (122 samples, 0.04%)</title><rect x="68.1680%" y="293" width="0.0398%" height="15" fill="rgb(234,83,48)" fg:x="208843" fg:w="122"/><text x="68.4180%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (271 samples, 0.09%)</title><rect x="68.2163%" y="293" width="0.0885%" height="15" fill="rgb(228,3,54)" fg:x="208991" fg:w="271"/><text x="68.4663%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (362 samples, 0.12%)</title><rect x="68.3048%" y="293" width="0.1182%" height="15" fill="rgb(226,155,13)" fg:x="209262" fg:w="362"/><text x="68.5548%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (157 samples, 0.05%)</title><rect x="68.4491%" y="277" width="0.0512%" height="15" fill="rgb(241,28,37)" fg:x="209704" fg:w="157"/><text x="68.6991%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (148 samples, 0.05%)</title><rect x="68.4520%" y="261" width="0.0483%" height="15" fill="rgb(233,93,10)" fg:x="209713" fg:w="148"/><text x="68.7020%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (274 samples, 0.09%)</title><rect x="68.4230%" y="293" width="0.0894%" height="15" fill="rgb(225,113,19)" fg:x="209624" fg:w="274"/><text x="68.6730%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (35 samples, 0.01%)</title><rect x="68.5010%" y="277" width="0.0114%" height="15" fill="rgb(241,2,18)" fg:x="209863" fg:w="35"/><text x="68.7510%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (1,210 samples, 0.39%)</title><rect x="68.1344%" y="309" width="0.3950%" height="15" fill="rgb(228,207,21)" fg:x="208740" fg:w="1210"/><text x="68.3844%" y="319.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,260 samples, 0.41%)</title><rect x="68.1187%" y="325" width="0.4113%" height="15" fill="rgb(213,211,35)" fg:x="208692" fg:w="1260"/><text x="68.3687%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (125 samples, 0.04%)</title><rect x="68.5486%" y="309" width="0.0408%" height="15" fill="rgb(209,83,10)" fg:x="210009" fg:w="125"/><text x="68.7986%" y="319.50"></text></g><g><title>libsystem_platform.dylib`__bzero (31 samples, 0.01%)</title><rect x="68.5963%" y="309" width="0.0101%" height="15" fill="rgb(209,164,1)" fg:x="210155" fg:w="31"/><text x="68.8463%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (85 samples, 0.03%)</title><rect x="68.6074%" y="309" width="0.0277%" height="15" fill="rgb(213,184,43)" fg:x="210189" fg:w="85"/><text x="68.8574%" y="319.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (309 samples, 0.10%)</title><rect x="68.5382%" y="325" width="0.1009%" height="15" fill="rgb(231,61,34)" fg:x="209977" fg:w="309"/><text x="68.7882%" y="335.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (528 samples, 0.17%)</title><rect x="68.6479%" y="309" width="0.1723%" height="15" fill="rgb(235,75,3)" fg:x="210313" fg:w="528"/><text x="68.8979%" y="319.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (89 samples, 0.03%)</title><rect x="68.8202%" y="309" width="0.0291%" height="15" fill="rgb(220,106,47)" fg:x="210841" fg:w="89"/><text x="69.0702%" y="319.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (682 samples, 0.22%)</title><rect x="68.6417%" y="325" width="0.2226%" height="15" fill="rgb(210,196,33)" fg:x="210294" fg:w="682"/><text x="68.8917%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (46 samples, 0.02%)</title><rect x="68.8492%" y="309" width="0.0150%" height="15" fill="rgb(229,154,42)" fg:x="210930" fg:w="46"/><text x="69.0992%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (45 samples, 0.01%)</title><rect x="68.8643%" y="325" width="0.0147%" height="15" fill="rgb(228,114,26)" fg:x="210976" fg:w="45"/><text x="69.1143%" y="335.50"></text></g><g><title>powergraph`powergraph::cluster_repository::ClusterRepository::remove (2,546 samples, 0.83%)</title><rect x="68.0531%" y="341" width="0.8310%" height="15" fill="rgb(208,144,1)" fg:x="208491" fg:w="2546"/><text x="68.3031%" y="351.50"></text></g><g><title>powergraph`alloc::vec::in_place_collect::from_iter_in_place (41 samples, 0.01%)</title><rect x="68.9122%" y="325" width="0.0134%" height="15" fill="rgb(239,112,37)" fg:x="211123" fg:w="41"/><text x="69.1622%" y="335.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (36 samples, 0.01%)</title><rect x="68.9384%" y="309" width="0.0118%" height="15" fill="rgb(210,96,50)" fg:x="211203" fg:w="36"/><text x="69.1884%" y="319.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::get_id (189 samples, 0.06%)</title><rect x="68.8910%" y="341" width="0.0617%" height="15" fill="rgb(222,178,2)" fg:x="211058" fg:w="189"/><text x="69.1410%" y="351.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::to_vec (58 samples, 0.02%)</title><rect x="68.9338%" y="325" width="0.0189%" height="15" fill="rgb(226,74,18)" fg:x="211189" fg:w="58"/><text x="69.1838%" y="335.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::new (90 samples, 0.03%)</title><rect x="68.9530%" y="325" width="0.0294%" height="15" fill="rgb(225,67,54)" fg:x="211248" fg:w="90"/><text x="69.2030%" y="335.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (76 samples, 0.02%)</title><rect x="68.9576%" y="309" width="0.0248%" height="15" fill="rgb(251,92,32)" fg:x="211262" fg:w="76"/><text x="69.2076%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (74 samples, 0.02%)</title><rect x="68.9583%" y="293" width="0.0242%" height="15" fill="rgb(228,149,22)" fg:x="211264" fg:w="74"/><text x="69.2083%" y="303.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::intersection (210 samples, 0.07%)</title><rect x="68.9527%" y="341" width="0.0685%" height="15" fill="rgb(243,54,13)" fg:x="211247" fg:w="210"/><text x="69.2027%" y="351.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (119 samples, 0.04%)</title><rect x="68.9824%" y="325" width="0.0388%" height="15" fill="rgb(243,180,28)" fg:x="211338" fg:w="119"/><text x="69.2324%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (115 samples, 0.04%)</title><rect x="68.9837%" y="309" width="0.0375%" height="15" fill="rgb(208,167,24)" fg:x="211342" fg:w="115"/><text x="69.2337%" y="319.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (45 samples, 0.01%)</title><rect x="69.0066%" y="293" width="0.0147%" height="15" fill="rgb(245,73,45)" fg:x="211412" fg:w="45"/><text x="69.2566%" y="303.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::new (118 samples, 0.04%)</title><rect x="69.0213%" y="341" width="0.0385%" height="15" fill="rgb(237,203,48)" fg:x="211457" fg:w="118"/><text x="69.2713%" y="351.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (98 samples, 0.03%)</title><rect x="69.0278%" y="325" width="0.0320%" height="15" fill="rgb(211,197,16)" fg:x="211477" fg:w="98"/><text x="69.2778%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (95 samples, 0.03%)</title><rect x="69.0288%" y="309" width="0.0310%" height="15" fill="rgb(243,99,51)" fg:x="211480" fg:w="95"/><text x="69.2788%" y="319.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (46 samples, 0.02%)</title><rect x="69.0448%" y="293" width="0.0150%" height="15" fill="rgb(215,123,29)" fg:x="211529" fg:w="46"/><text x="69.2948%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_free (52 samples, 0.02%)</title><rect x="69.0774%" y="309" width="0.0170%" height="15" fill="rgb(239,186,37)" fg:x="211629" fg:w="52"/><text x="69.3274%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (113 samples, 0.04%)</title><rect x="69.1257%" y="293" width="0.0369%" height="15" fill="rgb(252,136,39)" fg:x="211777" fg:w="113"/><text x="69.3757%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (81 samples, 0.03%)</title><rect x="69.1685%" y="293" width="0.0264%" height="15" fill="rgb(223,213,32)" fg:x="211908" fg:w="81"/><text x="69.4185%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (366 samples, 0.12%)</title><rect x="69.0771%" y="325" width="0.1195%" height="15" fill="rgb(233,115,5)" fg:x="211628" fg:w="366"/><text x="69.3271%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (264 samples, 0.09%)</title><rect x="69.1104%" y="309" width="0.0862%" height="15" fill="rgb(207,226,44)" fg:x="211730" fg:w="264"/><text x="69.3604%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (38 samples, 0.01%)</title><rect x="69.2276%" y="293" width="0.0124%" height="15" fill="rgb(208,126,0)" fg:x="212089" fg:w="38"/><text x="69.4776%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (51 samples, 0.02%)</title><rect x="69.2400%" y="293" width="0.0166%" height="15" fill="rgb(244,66,21)" fg:x="212127" fg:w="51"/><text x="69.4900%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (50 samples, 0.02%)</title><rect x="69.2566%" y="293" width="0.0163%" height="15" fill="rgb(222,97,12)" fg:x="212178" fg:w="50"/><text x="69.5066%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (87 samples, 0.03%)</title><rect x="69.2729%" y="293" width="0.0284%" height="15" fill="rgb(219,213,19)" fg:x="212228" fg:w="87"/><text x="69.5229%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (73 samples, 0.02%)</title><rect x="69.2775%" y="277" width="0.0238%" height="15" fill="rgb(252,169,30)" fg:x="212242" fg:w="73"/><text x="69.5275%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (66 samples, 0.02%)</title><rect x="69.2798%" y="261" width="0.0215%" height="15" fill="rgb(206,32,51)" fg:x="212249" fg:w="66"/><text x="69.5298%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (264 samples, 0.09%)</title><rect x="69.3013%" y="293" width="0.0862%" height="15" fill="rgb(250,172,42)" fg:x="212315" fg:w="264"/><text x="69.5513%" y="303.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (66 samples, 0.02%)</title><rect x="69.3927%" y="293" width="0.0215%" height="15" fill="rgb(209,34,43)" fg:x="212595" fg:w="66"/><text x="69.6427%" y="303.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (121 samples, 0.04%)</title><rect x="69.4476%" y="277" width="0.0395%" height="15" fill="rgb(223,11,35)" fg:x="212763" fg:w="121"/><text x="69.6976%" y="287.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (39 samples, 0.01%)</title><rect x="69.4890%" y="277" width="0.0127%" height="15" fill="rgb(251,219,26)" fg:x="212890" fg:w="39"/><text x="69.7390%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (267 samples, 0.09%)</title><rect x="69.5327%" y="261" width="0.0872%" height="15" fill="rgb(231,119,3)" fg:x="213024" fg:w="267"/><text x="69.7827%" y="271.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (60 samples, 0.02%)</title><rect x="69.6206%" y="261" width="0.0196%" height="15" fill="rgb(216,97,11)" fg:x="213293" fg:w="60"/><text x="69.8706%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (32 samples, 0.01%)</title><rect x="69.6424%" y="245" width="0.0104%" height="15" fill="rgb(223,59,9)" fg:x="213360" fg:w="32"/><text x="69.8924%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (461 samples, 0.15%)</title><rect x="69.5027%" y="277" width="0.1505%" height="15" fill="rgb(233,93,31)" fg:x="212932" fg:w="461"/><text x="69.7527%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (40 samples, 0.01%)</title><rect x="69.6401%" y="261" width="0.0131%" height="15" fill="rgb(239,81,33)" fg:x="213353" fg:w="40"/><text x="69.8901%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (736 samples, 0.24%)</title><rect x="69.4143%" y="293" width="0.2402%" height="15" fill="rgb(213,120,34)" fg:x="212661" fg:w="736"/><text x="69.6643%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (1,368 samples, 0.45%)</title><rect x="69.2090%" y="309" width="0.4465%" height="15" fill="rgb(243,49,53)" fg:x="212032" fg:w="1368"/><text x="69.4590%" y="319.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (1,408 samples, 0.46%)</title><rect x="69.1965%" y="325" width="0.4596%" height="15" fill="rgb(247,216,33)" fg:x="211994" fg:w="1408"/><text x="69.4465%" y="335.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 samples, 0.02%)</title><rect x="69.6800%" y="293" width="0.0193%" height="15" fill="rgb(226,26,14)" fg:x="213475" fg:w="59"/><text x="69.9300%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (155 samples, 0.05%)</title><rect x="69.6610%" y="309" width="0.0506%" height="15" fill="rgb(215,49,53)" fg:x="213417" fg:w="155"/><text x="69.9110%" y="319.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (172 samples, 0.06%)</title><rect x="69.6561%" y="325" width="0.0561%" height="15" fill="rgb(245,162,40)" fg:x="213402" fg:w="172"/><text x="69.9061%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (58 samples, 0.02%)</title><rect x="69.7413%" y="261" width="0.0189%" height="15" fill="rgb(229,68,17)" fg:x="213663" fg:w="58"/><text x="69.9913%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (34 samples, 0.01%)</title><rect x="69.7606%" y="261" width="0.0111%" height="15" fill="rgb(213,182,10)" fg:x="213722" fg:w="34"/><text x="70.0106%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (39 samples, 0.01%)</title><rect x="69.7717%" y="261" width="0.0127%" height="15" fill="rgb(245,125,30)" fg:x="213756" fg:w="39"/><text x="70.0217%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (70 samples, 0.02%)</title><rect x="69.7955%" y="245" width="0.0228%" height="15" fill="rgb(232,202,2)" fg:x="213829" fg:w="70"/><text x="70.0455%" y="255.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (31 samples, 0.01%)</title><rect x="69.8187%" y="245" width="0.0101%" height="15" fill="rgb(237,140,51)" fg:x="213900" fg:w="31"/><text x="70.0687%" y="255.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (37 samples, 0.01%)</title><rect x="69.8324%" y="229" width="0.0121%" height="15" fill="rgb(236,157,25)" fg:x="213942" fg:w="37"/><text x="70.0824%" y="239.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (415 samples, 0.14%)</title><rect x="69.7136%" y="293" width="0.1355%" height="15" fill="rgb(219,209,0)" fg:x="213578" fg:w="415"/><text x="69.9636%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (397 samples, 0.13%)</title><rect x="69.7195%" y="277" width="0.1296%" height="15" fill="rgb(240,116,54)" fg:x="213596" fg:w="397"/><text x="69.9695%" y="287.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (184 samples, 0.06%)</title><rect x="69.7890%" y="261" width="0.0601%" height="15" fill="rgb(216,10,36)" fg:x="213809" fg:w="184"/><text x="70.0390%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (62 samples, 0.02%)</title><rect x="69.8288%" y="245" width="0.0202%" height="15" fill="rgb(222,72,44)" fg:x="213931" fg:w="62"/><text x="70.0788%" y="255.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (430 samples, 0.14%)</title><rect x="69.7126%" y="309" width="0.1404%" height="15" fill="rgb(232,159,9)" fg:x="213575" fg:w="430"/><text x="69.9626%" y="319.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::union (433 samples, 0.14%)</title><rect x="69.7123%" y="325" width="0.1413%" height="15" fill="rgb(210,39,32)" fg:x="213574" fg:w="433"/><text x="69.9623%" y="335.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::similarity (2,433 samples, 0.79%)</title><rect x="69.0598%" y="341" width="0.7942%" height="15" fill="rgb(216,194,45)" fg:x="211575" fg:w="2433"/><text x="69.3098%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (73 samples, 0.02%)</title><rect x="69.9672%" y="325" width="0.0238%" height="15" fill="rgb(218,18,35)" fg:x="214355" fg:w="73"/><text x="70.2172%" y="335.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (439 samples, 0.14%)</title><rect x="69.9956%" y="325" width="0.1433%" height="15" fill="rgb(207,83,51)" fg:x="214442" fg:w="439"/><text x="70.2456%" y="335.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (184 samples, 0.06%)</title><rect x="70.1412%" y="325" width="0.0601%" height="15" fill="rgb(225,63,43)" fg:x="214888" fg:w="184"/><text x="70.3912%" y="335.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (383 samples, 0.13%)</title><rect x="70.2508%" y="309" width="0.1250%" height="15" fill="rgb(207,57,36)" fg:x="215224" fg:w="383"/><text x="70.5008%" y="319.50"></text></g><g><title>powergraph`powergraph::edge_repository::EdgeRepository::get_edge (1,935 samples, 0.63%)</title><rect x="69.8608%" y="341" width="0.6316%" height="15" fill="rgb(216,99,33)" fg:x="214029" fg:w="1935"/><text x="70.1108%" y="351.50"></text></g><g><title>powergraph`hashbrown::set::HashSet&lt;T,S,A&gt;::get (892 samples, 0.29%)</title><rect x="70.2012%" y="325" width="0.2912%" height="15" fill="rgb(225,42,16)" fg:x="215072" fg:w="892"/><text x="70.4512%" y="335.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (357 samples, 0.12%)</title><rect x="70.3759%" y="309" width="0.1165%" height="15" fill="rgb(220,201,45)" fg:x="215607" fg:w="357"/><text x="70.6259%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (43 samples, 0.01%)</title><rect x="70.4924%" y="325" width="0.0140%" height="15" fill="rgb(225,33,4)" fg:x="215964" fg:w="43"/><text x="70.7424%" y="335.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (44 samples, 0.01%)</title><rect x="70.5064%" y="325" width="0.0144%" height="15" fill="rgb(224,33,50)" fg:x="216007" fg:w="44"/><text x="70.7564%" y="335.50"></text></g><g><title>powergraph`core::fmt::Formatter::pad (110 samples, 0.04%)</title><rect x="70.5273%" y="325" width="0.0359%" height="15" fill="rgb(246,198,51)" fg:x="216071" fg:w="110"/><text x="70.7773%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_free (227 samples, 0.07%)</title><rect x="70.6553%" y="309" width="0.0741%" height="15" fill="rgb(205,22,4)" fg:x="216463" fg:w="227"/><text x="70.9053%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (88 samples, 0.03%)</title><rect x="70.7294%" y="309" width="0.0287%" height="15" fill="rgb(206,3,8)" fg:x="216690" fg:w="88"/><text x="70.9794%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (802 samples, 0.26%)</title><rect x="70.7584%" y="309" width="0.2618%" height="15" fill="rgb(251,23,15)" fg:x="216779" fg:w="802"/><text x="71.0084%" y="319.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (40 samples, 0.01%)</title><rect x="71.0443%" y="293" width="0.0131%" height="15" fill="rgb(252,88,28)" fg:x="217655" fg:w="40"/><text x="71.2943%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (134 samples, 0.04%)</title><rect x="71.0793%" y="261" width="0.0437%" height="15" fill="rgb(212,127,14)" fg:x="217762" fg:w="134"/><text x="71.3293%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (238 samples, 0.08%)</title><rect x="71.1240%" y="261" width="0.0777%" height="15" fill="rgb(247,145,37)" fg:x="217899" fg:w="238"/><text x="71.3740%" y="271.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (515 samples, 0.17%)</title><rect x="71.0656%" y="277" width="0.1681%" height="15" fill="rgb(209,117,53)" fg:x="217720" fg:w="515"/><text x="71.3156%" y="287.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (55 samples, 0.02%)</title><rect x="71.2157%" y="261" width="0.0180%" height="15" fill="rgb(212,90,42)" fg:x="218180" fg:w="55"/><text x="71.4657%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (665 samples, 0.22%)</title><rect x="71.0244%" y="309" width="0.2171%" height="15" fill="rgb(218,164,37)" fg:x="217594" fg:w="665"/><text x="71.2744%" y="319.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (564 samples, 0.18%)</title><rect x="71.0574%" y="293" width="0.1841%" height="15" fill="rgb(246,65,34)" fg:x="217695" fg:w="564"/><text x="71.3074%" y="303.50"></text></g><g><title>powergraph`DYLD-STUB$$free (46 samples, 0.02%)</title><rect x="71.2448%" y="309" width="0.0150%" height="15" fill="rgb(231,100,33)" fg:x="218269" fg:w="46"/><text x="71.4948%" y="319.50"></text></g><g><title>powergraph`core::fmt::Formatter::pad (42 samples, 0.01%)</title><rect x="71.2663%" y="309" width="0.0137%" height="15" fill="rgb(228,126,14)" fg:x="218335" fg:w="42"/><text x="71.5163%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (38 samples, 0.01%)</title><rect x="71.3760%" y="293" width="0.0124%" height="15" fill="rgb(215,173,21)" fg:x="218671" fg:w="38"/><text x="71.6260%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (466 samples, 0.15%)</title><rect x="71.3884%" y="293" width="0.1521%" height="15" fill="rgb(210,6,40)" fg:x="218709" fg:w="466"/><text x="71.6384%" y="303.50"></text></g><g><title>libsystem_platform.dylib`__bzero (37 samples, 0.01%)</title><rect x="71.5405%" y="293" width="0.0121%" height="15" fill="rgb(212,48,18)" fg:x="219175" fg:w="37"/><text x="71.7905%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (188 samples, 0.06%)</title><rect x="71.5526%" y="293" width="0.0614%" height="15" fill="rgb(230,214,11)" fg:x="219212" fg:w="188"/><text x="71.8026%" y="303.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (694 samples, 0.23%)</title><rect x="71.6218%" y="293" width="0.2265%" height="15" fill="rgb(254,105,39)" fg:x="219424" fg:w="694"/><text x="71.8718%" y="303.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (495 samples, 0.16%)</title><rect x="71.8486%" y="293" width="0.1616%" height="15" fill="rgb(245,158,5)" fg:x="220119" fg:w="495"/><text x="72.0986%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (4,445 samples, 1.45%)</title><rect x="70.5639%" y="325" width="1.4509%" height="15" fill="rgb(249,208,11)" fg:x="216183" fg:w="4445"/><text x="70.8139%" y="335.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::contains (2,233 samples, 0.73%)</title><rect x="71.2859%" y="309" width="0.7289%" height="15" fill="rgb(210,39,28)" fg:x="218395" fg:w="2233"/><text x="71.5359%" y="319.50"></text></g><g><title>powergraph`powergraph::edge_repository::EdgeRepository::subgraph (4,727 samples, 1.54%)</title><rect x="70.4924%" y="341" width="1.5429%" height="15" fill="rgb(211,56,53)" fg:x="215964" fg:w="4727"/><text x="70.7424%" y="351.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::contains (63 samples, 0.02%)</title><rect x="72.0148%" y="325" width="0.0206%" height="15" fill="rgb(226,201,30)" fg:x="220628" fg:w="63"/><text x="72.2648%" y="335.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (165 samples, 0.05%)</title><rect x="72.1564%" y="325" width="0.0539%" height="15" fill="rgb(239,101,34)" fg:x="221062" fg:w="165"/><text x="72.4064%" y="335.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (50 samples, 0.02%)</title><rect x="72.2103%" y="325" width="0.0163%" height="15" fill="rgb(226,209,5)" fg:x="221227" fg:w="50"/><text x="72.4603%" y="335.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (464 samples, 0.15%)</title><rect x="72.2282%" y="325" width="0.1515%" height="15" fill="rgb(250,105,47)" fg:x="221282" fg:w="464"/><text x="72.4782%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,094 samples, 0.36%)</title><rect x="72.7276%" y="309" width="0.3571%" height="15" fill="rgb(230,72,3)" fg:x="222812" fg:w="1094"/><text x="72.9776%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`malloc (42 samples, 0.01%)</title><rect x="73.0847%" y="309" width="0.0137%" height="15" fill="rgb(232,218,39)" fg:x="223906" fg:w="42"/><text x="73.3347%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2,413 samples, 0.79%)</title><rect x="73.0988%" y="309" width="0.7876%" height="15" fill="rgb(248,166,6)" fg:x="223949" fg:w="2413"/><text x="73.3488%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,187 samples, 0.39%)</title><rect x="73.8874%" y="309" width="0.3874%" height="15" fill="rgb(247,89,20)" fg:x="226365" fg:w="1187"/><text x="74.1374%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (758 samples, 0.25%)</title><rect x="74.2755%" y="309" width="0.2474%" height="15" fill="rgb(248,130,54)" fg:x="227554" fg:w="758"/><text x="74.5255%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (311 samples, 0.10%)</title><rect x="74.4214%" y="293" width="0.1015%" height="15" fill="rgb(234,196,4)" fg:x="228001" fg:w="311"/><text x="74.6714%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (307 samples, 0.10%)</title><rect x="74.4227%" y="277" width="0.1002%" height="15" fill="rgb(250,143,31)" fg:x="228005" fg:w="307"/><text x="74.6727%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,144 samples, 1.68%)</title><rect x="74.5229%" y="309" width="1.6790%" height="15" fill="rgb(211,110,34)" fg:x="228312" fg:w="5144"/><text x="74.7729%" y="319.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (181 samples, 0.06%)</title><rect x="76.2019%" y="309" width="0.0591%" height="15" fill="rgb(215,124,48)" fg:x="233456" fg:w="181"/><text x="76.4519%" y="319.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (76 samples, 0.02%)</title><rect x="76.2610%" y="309" width="0.0248%" height="15" fill="rgb(216,46,13)" fg:x="233637" fg:w="76"/><text x="76.5110%" y="319.50"></text></g><g><title>powergraph`__rdl_alloc (132 samples, 0.04%)</title><rect x="76.2858%" y="309" width="0.0431%" height="15" fill="rgb(205,184,25)" fg:x="233713" fg:w="132"/><text x="76.5358%" y="319.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (1,674 samples, 0.55%)</title><rect x="76.3302%" y="309" width="0.5464%" height="15" fill="rgb(228,1,10)" fg:x="233849" fg:w="1674"/><text x="76.5802%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (361 samples, 0.12%)</title><rect x="77.1746%" y="293" width="0.1178%" height="15" fill="rgb(213,116,27)" fg:x="236436" fg:w="361"/><text x="77.4246%" y="303.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,742 samples, 1.22%)</title><rect x="77.2924%" y="293" width="1.2214%" height="15" fill="rgb(241,95,50)" fg:x="236797" fg:w="3742"/><text x="77.5424%" y="303.50"></text></g><g><title>powergraph`DYLD-STUB$$memset (73 samples, 0.02%)</title><rect x="78.5171%" y="293" width="0.0238%" height="15" fill="rgb(238,48,32)" fg:x="240549" fg:w="73"/><text x="78.7671%" y="303.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (1,506 samples, 0.49%)</title><rect x="78.5413%" y="293" width="0.4916%" height="15" fill="rgb(235,113,49)" fg:x="240623" fg:w="1506"/><text x="78.7913%" y="303.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (140 samples, 0.05%)</title><rect x="79.0329%" y="293" width="0.0457%" height="15" fill="rgb(205,127,43)" fg:x="242129" fg:w="140"/><text x="79.2829%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (644 samples, 0.21%)</title><rect x="79.3984%" y="277" width="0.2102%" height="15" fill="rgb(250,162,2)" fg:x="243249" fg:w="644"/><text x="79.6484%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (38 samples, 0.01%)</title><rect x="79.6086%" y="277" width="0.0124%" height="15" fill="rgb(220,13,41)" fg:x="243893" fg:w="38"/><text x="79.8586%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (749 samples, 0.24%)</title><rect x="79.6305%" y="277" width="0.2445%" height="15" fill="rgb(249,221,25)" fg:x="243960" fg:w="749"/><text x="79.8805%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (636 samples, 0.21%)</title><rect x="79.8796%" y="277" width="0.2076%" height="15" fill="rgb(215,208,19)" fg:x="244723" fg:w="636"/><text x="80.1296%" y="287.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (82 samples, 0.03%)</title><rect x="80.0872%" y="277" width="0.0268%" height="15" fill="rgb(236,175,2)" fg:x="245359" fg:w="82"/><text x="80.3372%" y="287.50"></text></g><g><title>powergraph`__rdl_alloc (92 samples, 0.03%)</title><rect x="80.1139%" y="277" width="0.0300%" height="15" fill="rgb(241,52,2)" fg:x="245441" fg:w="92"/><text x="80.3639%" y="287.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (161 samples, 0.05%)</title><rect x="80.1446%" y="277" width="0.0526%" height="15" fill="rgb(248,140,14)" fg:x="245535" fg:w="161"/><text x="80.3946%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (79 samples, 0.03%)</title><rect x="80.3163%" y="261" width="0.0258%" height="15" fill="rgb(253,22,42)" fg:x="246061" fg:w="79"/><text x="80.5663%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (56 samples, 0.02%)</title><rect x="80.3238%" y="245" width="0.0183%" height="15" fill="rgb(234,61,47)" fg:x="246084" fg:w="56"/><text x="80.5738%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (33 samples, 0.01%)</title><rect x="80.3313%" y="229" width="0.0108%" height="15" fill="rgb(208,226,15)" fg:x="246107" fg:w="33"/><text x="80.5813%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3,875 samples, 1.26%)</title><rect x="79.0786%" y="293" width="1.2648%" height="15" fill="rgb(217,221,4)" fg:x="242269" fg:w="3875"/><text x="79.3286%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (448 samples, 0.15%)</title><rect x="80.1972%" y="277" width="0.1462%" height="15" fill="rgb(212,174,34)" fg:x="245696" fg:w="448"/><text x="80.4472%" y="287.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10,718 samples, 3.50%)</title><rect x="76.8766%" y="309" width="3.4984%" height="15" fill="rgb(253,83,4)" fg:x="235523" fg:w="10718"/><text x="77.1266%" y="319.50">pow..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (97 samples, 0.03%)</title><rect x="80.3434%" y="293" width="0.0317%" height="15" fill="rgb(250,195,49)" fg:x="246144" fg:w="97"/><text x="80.5934%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (24,699 samples, 8.06%)</title><rect x="72.3797%" y="325" width="8.0620%" height="15" fill="rgb(241,192,25)" fg:x="221746" fg:w="24699"/><text x="72.6297%" y="335.50">powergraph`..</text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (204 samples, 0.07%)</title><rect x="80.3750%" y="309" width="0.0666%" height="15" fill="rgb(208,124,10)" fg:x="246241" fg:w="204"/><text x="80.6250%" y="319.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (512 samples, 0.17%)</title><rect x="80.4815%" y="309" width="0.1671%" height="15" fill="rgb(222,33,0)" fg:x="246567" fg:w="512"/><text x="80.7315%" y="319.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (26,480 samples, 8.64%)</title><rect x="72.0353%" y="341" width="8.6433%" height="15" fill="rgb(234,209,28)" fg:x="220691" fg:w="26480"/><text x="72.2853%" y="351.50">powergraph`p..</text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (726 samples, 0.24%)</title><rect x="80.4416%" y="325" width="0.2370%" height="15" fill="rgb(224,11,23)" fg:x="246445" fg:w="726"/><text x="80.6916%" y="335.50"></text></g><g><title>powergraph`core::ops::function::FnOnce::call_once (92 samples, 0.03%)</title><rect x="80.6486%" y="309" width="0.0300%" height="15" fill="rgb(232,99,1)" fg:x="247079" fg:w="92"/><text x="80.8986%" y="319.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,843 samples, 0.93%)</title><rect x="81.0801%" y="309" width="0.9280%" height="15" fill="rgb(237,95,45)" fg:x="248401" fg:w="2843"/><text x="81.3301%" y="319.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (1,132 samples, 0.37%)</title><rect x="82.0081%" y="309" width="0.3695%" height="15" fill="rgb(208,109,11)" fg:x="251244" fg:w="1132"/><text x="82.2581%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (4,984 samples, 1.63%)</title><rect x="80.7537%" y="325" width="1.6268%" height="15" fill="rgb(216,190,48)" fg:x="247401" fg:w="4984"/><text x="81.0037%" y="335.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (479 samples, 0.16%)</title><rect x="82.4125%" y="309" width="0.1563%" height="15" fill="rgb(251,171,36)" fg:x="252483" fg:w="479"/><text x="82.6625%" y="319.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (5,855 samples, 1.91%)</title><rect x="80.6809%" y="341" width="1.9111%" height="15" fill="rgb(230,62,22)" fg:x="247178" fg:w="5855"/><text x="80.9309%" y="351.50">p..</text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (648 samples, 0.21%)</title><rect x="82.3805%" y="325" width="0.2115%" height="15" fill="rgb(225,114,35)" fg:x="252385" fg:w="648"/><text x="82.6305%" y="335.50"></text></g><g><title>powergraph`core::ops::function::FnOnce::call_once (71 samples, 0.02%)</title><rect x="82.5688%" y="309" width="0.0232%" height="15" fill="rgb(215,118,42)" fg:x="252962" fg:w="71"/><text x="82.8188%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (55 samples, 0.02%)</title><rect x="82.6047%" y="325" width="0.0180%" height="15" fill="rgb(243,119,21)" fg:x="253072" fg:w="55"/><text x="82.8547%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (604 samples, 0.20%)</title><rect x="82.6227%" y="325" width="0.1972%" height="15" fill="rgb(252,177,53)" fg:x="253127" fg:w="604"/><text x="82.8727%" y="335.50"></text></g><g><title>libsystem_platform.dylib`__bzero (43 samples, 0.01%)</title><rect x="82.8241%" y="325" width="0.0140%" height="15" fill="rgb(237,209,29)" fg:x="253744" fg:w="43"/><text x="83.0741%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (145 samples, 0.05%)</title><rect x="82.8495%" y="325" width="0.0473%" height="15" fill="rgb(212,65,23)" fg:x="253822" fg:w="145"/><text x="83.0995%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (31 samples, 0.01%)</title><rect x="82.8969%" y="325" width="0.0101%" height="15" fill="rgb(230,222,46)" fg:x="253967" fg:w="31"/><text x="83.1469%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_free (388 samples, 0.13%)</title><rect x="82.9494%" y="309" width="0.1266%" height="15" fill="rgb(215,135,32)" fg:x="254128" fg:w="388"/><text x="83.1994%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (88 samples, 0.03%)</title><rect x="83.0761%" y="309" width="0.0287%" height="15" fill="rgb(246,101,22)" fg:x="254516" fg:w="88"/><text x="83.3261%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.01%)</title><rect x="83.1068%" y="309" width="0.0134%" height="15" fill="rgb(206,107,13)" fg:x="254610" fg:w="41"/><text x="83.3568%" y="319.50"></text></g><g><title>powergraph`DYLD-STUB$$free (104 samples, 0.03%)</title><rect x="83.1201%" y="309" width="0.0339%" height="15" fill="rgb(250,100,44)" fg:x="254651" fg:w="104"/><text x="83.3701%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (58 samples, 0.02%)</title><rect x="83.2135%" y="293" width="0.0189%" height="15" fill="rgb(231,147,38)" fg:x="254937" fg:w="58"/><text x="83.4635%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (632 samples, 0.21%)</title><rect x="83.2324%" y="293" width="0.2063%" height="15" fill="rgb(229,8,40)" fg:x="254995" fg:w="632"/><text x="83.4824%" y="303.50"></text></g><g><title>libsystem_platform.dylib`__bzero (81 samples, 0.03%)</title><rect x="83.4387%" y="293" width="0.0264%" height="15" fill="rgb(221,135,30)" fg:x="255627" fg:w="81"/><text x="83.6887%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (428 samples, 0.14%)</title><rect x="83.4651%" y="293" width="0.1397%" height="15" fill="rgb(249,193,18)" fg:x="255708" fg:w="428"/><text x="83.7151%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.01%)</title><rect x="83.6049%" y="293" width="0.0121%" height="15" fill="rgb(209,133,39)" fg:x="256136" fg:w="37"/><text x="83.8549%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (2,178 samples, 0.71%)</title><rect x="82.9070%" y="325" width="0.7109%" height="15" fill="rgb(232,100,14)" fg:x="253998" fg:w="2178"/><text x="83.1570%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (1,397 samples, 0.46%)</title><rect x="83.1619%" y="309" width="0.4560%" height="15" fill="rgb(224,185,1)" fg:x="254779" fg:w="1397"/><text x="83.4119%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (95 samples, 0.03%)</title><rect x="83.6561%" y="309" width="0.0310%" height="15" fill="rgb(223,139,8)" fg:x="256293" fg:w="95"/><text x="83.9061%" y="319.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (37 samples, 0.01%)</title><rect x="83.6871%" y="309" width="0.0121%" height="15" fill="rgb(232,213,38)" fg:x="256388" fg:w="37"/><text x="83.9371%" y="319.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (218 samples, 0.07%)</title><rect x="83.7008%" y="309" width="0.0712%" height="15" fill="rgb(207,94,22)" fg:x="256430" fg:w="218"/><text x="83.9508%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (507 samples, 0.17%)</title><rect x="83.9286%" y="293" width="0.1655%" height="15" fill="rgb(219,183,54)" fg:x="257128" fg:w="507"/><text x="84.1786%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (842 samples, 0.27%)</title><rect x="84.0967%" y="293" width="0.2748%" height="15" fill="rgb(216,185,54)" fg:x="257643" fg:w="842"/><text x="84.3467%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (508 samples, 0.17%)</title><rect x="84.3719%" y="293" width="0.1658%" height="15" fill="rgb(254,217,39)" fg:x="258486" fg:w="508"/><text x="84.6219%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (256 samples, 0.08%)</title><rect x="84.5381%" y="293" width="0.0836%" height="15" fill="rgb(240,178,23)" fg:x="258995" fg:w="256"/><text x="84.7881%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (52 samples, 0.02%)</title><rect x="84.6046%" y="277" width="0.0170%" height="15" fill="rgb(218,11,47)" fg:x="259199" fg:w="52"/><text x="84.8546%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (52 samples, 0.02%)</title><rect x="84.6046%" y="261" width="0.0170%" height="15" fill="rgb(218,51,51)" fg:x="259199" fg:w="52"/><text x="84.8546%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,449 samples, 0.80%)</title><rect x="84.6216%" y="293" width="0.7994%" height="15" fill="rgb(238,126,27)" fg:x="259251" fg:w="2449"/><text x="84.8716%" y="303.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (62 samples, 0.02%)</title><rect x="85.4210%" y="293" width="0.0202%" height="15" fill="rgb(249,202,22)" fg:x="261700" fg:w="62"/><text x="85.6710%" y="303.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (44 samples, 0.01%)</title><rect x="85.4412%" y="293" width="0.0144%" height="15" fill="rgb(254,195,49)" fg:x="261762" fg:w="44"/><text x="85.6912%" y="303.50"></text></g><g><title>powergraph`__rdl_alloc (68 samples, 0.02%)</title><rect x="85.4556%" y="293" width="0.0222%" height="15" fill="rgb(208,123,14)" fg:x="261806" fg:w="68"/><text x="85.7056%" y="303.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (878 samples, 0.29%)</title><rect x="85.4781%" y="293" width="0.2866%" height="15" fill="rgb(224,200,8)" fg:x="261875" fg:w="878"/><text x="85.7281%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (184 samples, 0.06%)</title><rect x="85.9145%" y="277" width="0.0601%" height="15" fill="rgb(217,61,36)" fg:x="263212" fg:w="184"/><text x="86.1645%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,599 samples, 0.52%)</title><rect x="85.9746%" y="277" width="0.5219%" height="15" fill="rgb(206,35,45)" fg:x="263396" fg:w="1599"/><text x="86.2246%" y="287.50"></text></g><g><title>powergraph`DYLD-STUB$$memset (36 samples, 0.01%)</title><rect x="86.4975%" y="277" width="0.0118%" height="15" fill="rgb(217,65,33)" fg:x="264998" fg:w="36"/><text x="86.7475%" y="287.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (714 samples, 0.23%)</title><rect x="86.5096%" y="277" width="0.2331%" height="15" fill="rgb(222,158,48)" fg:x="265035" fg:w="714"/><text x="86.7596%" y="287.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (79 samples, 0.03%)</title><rect x="86.7426%" y="277" width="0.0258%" height="15" fill="rgb(254,2,54)" fg:x="265749" fg:w="79"/><text x="86.9926%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (395 samples, 0.13%)</title><rect x="86.9479%" y="261" width="0.1289%" height="15" fill="rgb(250,143,38)" fg:x="266378" fg:w="395"/><text x="87.1979%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (382 samples, 0.12%)</title><rect x="87.0844%" y="261" width="0.1247%" height="15" fill="rgb(248,25,0)" fg:x="266796" fg:w="382"/><text x="87.3344%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (214 samples, 0.07%)</title><rect x="87.2094%" y="261" width="0.0699%" height="15" fill="rgb(206,152,27)" fg:x="267179" fg:w="214"/><text x="87.4594%" y="271.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (57 samples, 0.02%)</title><rect x="87.2792%" y="261" width="0.0186%" height="15" fill="rgb(240,77,30)" fg:x="267393" fg:w="57"/><text x="87.5292%" y="271.50"></text></g><g><title>powergraph`__rdl_alloc (56 samples, 0.02%)</title><rect x="87.2978%" y="261" width="0.0183%" height="15" fill="rgb(231,5,3)" fg:x="267450" fg:w="56"/><text x="87.5478%" y="271.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (74 samples, 0.02%)</title><rect x="87.3161%" y="261" width="0.0242%" height="15" fill="rgb(207,226,32)" fg:x="267506" fg:w="74"/><text x="87.5661%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,991 samples, 0.65%)</title><rect x="86.7684%" y="277" width="0.6499%" height="15" fill="rgb(222,207,47)" fg:x="265828" fg:w="1991"/><text x="87.0184%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (239 samples, 0.08%)</title><rect x="87.3403%" y="261" width="0.0780%" height="15" fill="rgb(229,115,45)" fg:x="267580" fg:w="239"/><text x="87.5903%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5,118 samples, 1.67%)</title><rect x="85.7647%" y="293" width="1.6706%" height="15" fill="rgb(224,191,6)" fg:x="262753" fg:w="5118"/><text x="86.0147%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (52 samples, 0.02%)</title><rect x="87.4183%" y="277" width="0.0170%" height="15" fill="rgb(230,227,24)" fg:x="267819" fg:w="52"/><text x="87.6683%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (11,355 samples, 3.71%)</title><rect x="83.7720%" y="309" width="3.7064%" height="15" fill="rgb(228,80,19)" fg:x="256648" fg:w="11355"/><text x="84.0220%" y="319.50">powe..</text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (132 samples, 0.04%)</title><rect x="87.4352%" y="293" width="0.0431%" height="15" fill="rgb(247,229,0)" fg:x="267871" fg:w="132"/><text x="87.6852%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (286 samples, 0.09%)</title><rect x="87.5071%" y="293" width="0.0934%" height="15" fill="rgb(237,194,15)" fg:x="268091" fg:w="286"/><text x="87.7571%" y="303.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (12,264 samples, 4.00%)</title><rect x="83.6179%" y="325" width="4.0031%" height="15" fill="rgb(219,203,20)" fg:x="256176" fg:w="12264"/><text x="83.8679%" y="335.50">powe..</text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (437 samples, 0.14%)</title><rect x="87.4783%" y="309" width="0.1426%" height="15" fill="rgb(234,128,8)" fg:x="268003" fg:w="437"/><text x="87.7283%" y="319.50"></text></g><g><title>powergraph`core::ops::function::FnOnce::call_once (63 samples, 0.02%)</title><rect x="87.6004%" y="293" width="0.0206%" height="15" fill="rgb(248,202,8)" fg:x="268377" fg:w="63"/><text x="87.8504%" y="303.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::is_proper_subset_of (15,408 samples, 5.03%)</title><rect x="82.5920%" y="341" width="5.0293%" height="15" fill="rgb(206,104,37)" fg:x="253033" fg:w="15408"/><text x="82.8420%" y="351.50">powerg..</text></g><g><title>libsystem_malloc.dylib`_free (97 samples, 0.03%)</title><rect x="87.6539%" y="325" width="0.0317%" height="15" fill="rgb(223,8,27)" fg:x="268541" fg:w="97"/><text x="87.9039%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (188 samples, 0.06%)</title><rect x="87.6856%" y="325" width="0.0614%" height="15" fill="rgb(216,217,28)" fg:x="268638" fg:w="188"/><text x="87.9356%" y="335.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (42 samples, 0.01%)</title><rect x="87.7620%" y="325" width="0.0137%" height="15" fill="rgb(249,199,1)" fg:x="268872" fg:w="42"/><text x="88.0120%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (310 samples, 0.10%)</title><rect x="87.8175%" y="309" width="0.1012%" height="15" fill="rgb(240,85,17)" fg:x="269042" fg:w="310"/><text x="88.0675%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (415 samples, 0.14%)</title><rect x="87.9196%" y="309" width="0.1355%" height="15" fill="rgb(206,108,45)" fg:x="269355" fg:w="415"/><text x="88.1696%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (454 samples, 0.15%)</title><rect x="88.0551%" y="309" width="0.1482%" height="15" fill="rgb(245,210,41)" fg:x="269770" fg:w="454"/><text x="88.3051%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (164 samples, 0.05%)</title><rect x="88.2033%" y="309" width="0.0535%" height="15" fill="rgb(206,13,37)" fg:x="270224" fg:w="164"/><text x="88.4533%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (91 samples, 0.03%)</title><rect x="88.2271%" y="293" width="0.0297%" height="15" fill="rgb(250,61,18)" fg:x="270297" fg:w="91"/><text x="88.4771%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (85 samples, 0.03%)</title><rect x="88.2291%" y="277" width="0.0277%" height="15" fill="rgb(235,172,48)" fg:x="270303" fg:w="85"/><text x="88.4791%" y="287.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (32 samples, 0.01%)</title><rect x="88.2568%" y="309" width="0.0104%" height="15" fill="rgb(249,201,17)" fg:x="270388" fg:w="32"/><text x="88.5068%" y="319.50"></text></g><g><title>powergraph`__rdl_alloc (42 samples, 0.01%)</title><rect x="88.2728%" y="309" width="0.0137%" height="15" fill="rgb(219,208,6)" fg:x="270437" fg:w="42"/><text x="88.5228%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,667 samples, 0.54%)</title><rect x="87.7757%" y="325" width="0.5441%" height="15" fill="rgb(248,31,23)" fg:x="268914" fg:w="1667"/><text x="88.0257%" y="335.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (102 samples, 0.03%)</title><rect x="88.2865%" y="309" width="0.0333%" height="15" fill="rgb(245,15,42)" fg:x="270479" fg:w="102"/><text x="88.5365%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (99 samples, 0.03%)</title><rect x="88.3489%" y="309" width="0.0323%" height="15" fill="rgb(222,217,39)" fg:x="270670" fg:w="99"/><text x="88.5989%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (139 samples, 0.05%)</title><rect x="88.3812%" y="309" width="0.0454%" height="15" fill="rgb(210,219,27)" fg:x="270769" fg:w="139"/><text x="88.6312%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (123 samples, 0.04%)</title><rect x="88.4357%" y="309" width="0.0401%" height="15" fill="rgb(252,166,36)" fg:x="270936" fg:w="123"/><text x="88.6857%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (35 samples, 0.01%)</title><rect x="88.4804%" y="309" width="0.0114%" height="15" fill="rgb(245,132,34)" fg:x="271073" fg:w="35"/><text x="88.7304%" y="319.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (73 samples, 0.02%)</title><rect x="88.5065%" y="309" width="0.0238%" height="15" fill="rgb(236,54,3)" fg:x="271153" fg:w="73"/><text x="88.7565%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (34 samples, 0.01%)</title><rect x="88.5192%" y="293" width="0.0111%" height="15" fill="rgb(241,173,43)" fg:x="271192" fg:w="34"/><text x="88.7692%" y="303.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (154 samples, 0.05%)</title><rect x="88.5303%" y="309" width="0.0503%" height="15" fill="rgb(215,190,9)" fg:x="271226" fg:w="154"/><text x="88.7803%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (860 samples, 0.28%)</title><rect x="88.3198%" y="325" width="0.2807%" height="15" fill="rgb(242,101,16)" fg:x="270581" fg:w="860"/><text x="88.5698%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (43 samples, 0.01%)</title><rect x="88.5865%" y="309" width="0.0140%" height="15" fill="rgb(223,190,21)" fg:x="271398" fg:w="43"/><text x="88.8365%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (84 samples, 0.03%)</title><rect x="88.6136%" y="309" width="0.0274%" height="15" fill="rgb(215,228,25)" fg:x="271481" fg:w="84"/><text x="88.8636%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (62 samples, 0.02%)</title><rect x="88.6410%" y="309" width="0.0202%" height="15" fill="rgb(225,36,22)" fg:x="271565" fg:w="62"/><text x="88.8910%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (196 samples, 0.06%)</title><rect x="88.7206%" y="293" width="0.0640%" height="15" fill="rgb(251,106,46)" fg:x="271809" fg:w="196"/><text x="88.9706%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (257 samples, 0.08%)</title><rect x="88.7853%" y="293" width="0.0839%" height="15" fill="rgb(208,90,1)" fg:x="272007" fg:w="257"/><text x="89.0353%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (510 samples, 0.17%)</title><rect x="88.8692%" y="293" width="0.1665%" height="15" fill="rgb(243,10,4)" fg:x="272264" fg:w="510"/><text x="89.1192%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (175 samples, 0.06%)</title><rect x="89.0356%" y="293" width="0.0571%" height="15" fill="rgb(212,137,27)" fg:x="272774" fg:w="175"/><text x="89.2856%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (80 samples, 0.03%)</title><rect x="89.0666%" y="277" width="0.0261%" height="15" fill="rgb(231,220,49)" fg:x="272869" fg:w="80"/><text x="89.3166%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (79 samples, 0.03%)</title><rect x="89.0670%" y="261" width="0.0258%" height="15" fill="rgb(237,96,20)" fg:x="272870" fg:w="79"/><text x="89.3170%" y="271.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (45 samples, 0.01%)</title><rect x="89.0927%" y="293" width="0.0147%" height="15" fill="rgb(239,229,30)" fg:x="272949" fg:w="45"/><text x="89.3427%" y="303.50"></text></g><g><title>powergraph`__rdl_alloc (32 samples, 0.01%)</title><rect x="89.1107%" y="293" width="0.0104%" height="15" fill="rgb(219,65,33)" fg:x="273004" fg:w="32"/><text x="89.3607%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (1,399 samples, 0.46%)</title><rect x="88.6648%" y="309" width="0.4566%" height="15" fill="rgb(243,134,7)" fg:x="271638" fg:w="1399"/><text x="88.9148%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (78 samples, 0.03%)</title><rect x="89.1319%" y="293" width="0.0255%" height="15" fill="rgb(216,177,54)" fg:x="273069" fg:w="78"/><text x="89.3819%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (130 samples, 0.04%)</title><rect x="89.1577%" y="293" width="0.0424%" height="15" fill="rgb(211,160,20)" fg:x="273148" fg:w="130"/><text x="89.4077%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (385 samples, 0.13%)</title><rect x="89.1215%" y="309" width="0.1257%" height="15" fill="rgb(239,85,39)" fg:x="273037" fg:w="385"/><text x="89.3715%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (108 samples, 0.04%)</title><rect x="89.2119%" y="293" width="0.0353%" height="15" fill="rgb(232,125,22)" fg:x="273314" fg:w="108"/><text x="89.4619%" y="303.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,980 samples, 0.65%)</title><rect x="88.6067%" y="325" width="0.6463%" height="15" fill="rgb(244,57,34)" fg:x="271460" fg:w="1980"/><text x="88.8567%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_free (215 samples, 0.07%)</title><rect x="89.2788%" y="309" width="0.0702%" height="15" fill="rgb(214,203,32)" fg:x="273519" fg:w="215"/><text x="89.5288%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (40 samples, 0.01%)</title><rect x="89.3490%" y="309" width="0.0131%" height="15" fill="rgb(207,58,43)" fg:x="273734" fg:w="40"/><text x="89.5990%" y="319.50"></text></g><g><title>powergraph`DYLD-STUB$$free (52 samples, 0.02%)</title><rect x="89.3624%" y="309" width="0.0170%" height="15" fill="rgb(215,193,15)" fg:x="273775" fg:w="52"/><text x="89.6124%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (294 samples, 0.10%)</title><rect x="89.4159%" y="293" width="0.0960%" height="15" fill="rgb(232,15,44)" fg:x="273939" fg:w="294"/><text x="89.6659%" y="303.50"></text></g><g><title>libsystem_platform.dylib`__bzero (41 samples, 0.01%)</title><rect x="89.5119%" y="293" width="0.0134%" height="15" fill="rgb(212,3,48)" fg:x="274233" fg:w="41"/><text x="89.7619%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (144 samples, 0.05%)</title><rect x="89.5252%" y="293" width="0.0470%" height="15" fill="rgb(218,128,7)" fg:x="274274" fg:w="144"/><text x="89.7752%" y="303.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (903 samples, 0.29%)</title><rect x="89.2781%" y="325" width="0.2947%" height="15" fill="rgb(226,216,39)" fg:x="273517" fg:w="903"/><text x="89.5281%" y="335.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (591 samples, 0.19%)</title><rect x="89.3800%" y="309" width="0.1929%" height="15" fill="rgb(243,47,51)" fg:x="273829" fg:w="591"/><text x="89.6300%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (38 samples, 0.01%)</title><rect x="89.5781%" y="325" width="0.0124%" height="15" fill="rgb(241,183,40)" fg:x="274436" fg:w="38"/><text x="89.8281%" y="335.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::iter (6,036 samples, 1.97%)</title><rect x="87.6213%" y="341" width="1.9702%" height="15" fill="rgb(231,217,32)" fg:x="268441" fg:w="6036"/><text x="87.8713%" y="351.50">p..</text></g><g><title>libsystem_platform.dylib`_platform_memset (59 samples, 0.02%)</title><rect x="89.6294%" y="309" width="0.0193%" height="15" fill="rgb(229,61,38)" fg:x="274593" fg:w="59"/><text x="89.8794%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (49 samples, 0.02%)</title><rect x="89.7616%" y="293" width="0.0160%" height="15" fill="rgb(225,210,5)" fg:x="274998" fg:w="49"/><text x="90.0116%" y="303.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (248 samples, 0.08%)</title><rect x="89.7776%" y="293" width="0.0809%" height="15" fill="rgb(231,79,45)" fg:x="275047" fg:w="248"/><text x="90.0276%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (290 samples, 0.09%)</title><rect x="90.0162%" y="277" width="0.0947%" height="15" fill="rgb(224,100,7)" fg:x="275778" fg:w="290"/><text x="90.2662%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (720 samples, 0.24%)</title><rect x="90.1115%" y="277" width="0.2350%" height="15" fill="rgb(241,198,18)" fg:x="276070" fg:w="720"/><text x="90.3615%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (675 samples, 0.22%)</title><rect x="90.3471%" y="277" width="0.2203%" height="15" fill="rgb(252,97,53)" fg:x="276792" fg:w="675"/><text x="90.5971%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (173 samples, 0.06%)</title><rect x="90.5675%" y="277" width="0.0565%" height="15" fill="rgb(220,88,7)" fg:x="277467" fg:w="173"/><text x="90.8175%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (32 samples, 0.01%)</title><rect x="90.6135%" y="261" width="0.0104%" height="15" fill="rgb(213,176,14)" fg:x="277608" fg:w="32"/><text x="90.8635%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (31 samples, 0.01%)</title><rect x="90.6138%" y="245" width="0.0101%" height="15" fill="rgb(246,73,7)" fg:x="277609" fg:w="31"/><text x="90.8638%" y="255.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (697 samples, 0.23%)</title><rect x="90.6239%" y="277" width="0.2275%" height="15" fill="rgb(245,64,36)" fg:x="277640" fg:w="697"/><text x="90.8739%" y="287.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (53 samples, 0.02%)</title><rect x="90.8514%" y="277" width="0.0173%" height="15" fill="rgb(245,80,10)" fg:x="278337" fg:w="53"/><text x="91.1014%" y="287.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (32 samples, 0.01%)</title><rect x="90.8687%" y="277" width="0.0104%" height="15" fill="rgb(232,107,50)" fg:x="278390" fg:w="32"/><text x="91.1187%" y="287.50"></text></g><g><title>powergraph`__rdl_alloc (34 samples, 0.01%)</title><rect x="90.8792%" y="277" width="0.0111%" height="15" fill="rgb(253,3,0)" fg:x="278422" fg:w="34"/><text x="91.1292%" y="287.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (169 samples, 0.06%)</title><rect x="90.8903%" y="277" width="0.0552%" height="15" fill="rgb(212,99,53)" fg:x="278456" fg:w="169"/><text x="91.1403%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (997 samples, 0.33%)</title><rect x="91.1263%" y="261" width="0.3254%" height="15" fill="rgb(249,111,54)" fg:x="279179" fg:w="997"/><text x="91.3763%" y="271.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (577 samples, 0.19%)</title><rect x="91.4540%" y="261" width="0.1883%" height="15" fill="rgb(249,55,30)" fg:x="280183" fg:w="577"/><text x="91.7040%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (249 samples, 0.08%)</title><rect x="91.6805%" y="245" width="0.0813%" height="15" fill="rgb(237,47,42)" fg:x="280877" fg:w="249"/><text x="91.9305%" y="255.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (53 samples, 0.02%)</title><rect x="91.7621%" y="245" width="0.0173%" height="15" fill="rgb(211,20,18)" fg:x="281127" fg:w="53"/><text x="92.0121%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (430 samples, 0.14%)</title><rect x="91.6453%" y="261" width="0.1404%" height="15" fill="rgb(231,203,46)" fg:x="280769" fg:w="430"/><text x="91.8953%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,576 samples, 0.84%)</title><rect x="90.9454%" y="277" width="0.8408%" height="15" fill="rgb(237,142,3)" fg:x="278625" fg:w="2576"/><text x="91.1954%" y="287.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,551 samples, 2.14%)</title><rect x="89.6486%" y="309" width="2.1383%" height="15" fill="rgb(241,107,1)" fg:x="274652" fg:w="6551"/><text x="89.8986%" y="319.50">p..</text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (5,908 samples, 1.93%)</title><rect x="89.8585%" y="293" width="1.9284%" height="15" fill="rgb(229,83,13)" fg:x="275295" fg:w="5908"/><text x="90.1085%" y="303.50">p..</text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (34 samples, 0.01%)</title><rect x="91.7934%" y="309" width="0.0111%" height="15" fill="rgb(241,91,40)" fg:x="281223" fg:w="34"/><text x="92.0434%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (82 samples, 0.03%)</title><rect x="91.8333%" y="293" width="0.0268%" height="15" fill="rgb(225,3,45)" fg:x="281345" fg:w="82"/><text x="92.0833%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (135 samples, 0.04%)</title><rect x="91.8613%" y="293" width="0.0441%" height="15" fill="rgb(244,223,14)" fg:x="281431" fg:w="135"/><text x="92.1113%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (51 samples, 0.02%)</title><rect x="91.9335%" y="277" width="0.0166%" height="15" fill="rgb(224,124,37)" fg:x="281652" fg:w="51"/><text x="92.1835%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (37 samples, 0.01%)</title><rect x="91.9380%" y="261" width="0.0121%" height="15" fill="rgb(251,171,30)" fg:x="281666" fg:w="37"/><text x="92.1880%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (448 samples, 0.15%)</title><rect x="91.8045%" y="309" width="0.1462%" height="15" fill="rgb(236,46,54)" fg:x="281257" fg:w="448"/><text x="92.0545%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (108 samples, 0.04%)</title><rect x="91.9155%" y="293" width="0.0353%" height="15" fill="rgb(245,213,5)" fg:x="281597" fg:w="108"/><text x="92.1655%" y="303.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7,177 samples, 2.34%)</title><rect x="89.6163%" y="325" width="2.3426%" height="15" fill="rgb(230,144,27)" fg:x="274553" fg:w="7177"/><text x="89.8663%" y="335.50">p..</text></g><g><title>libdyld.dylib`tlv_get_addr (80 samples, 0.03%)</title><rect x="91.9730%" y="309" width="0.0261%" height="15" fill="rgb(220,86,6)" fg:x="281773" fg:w="80"/><text x="92.2230%" y="319.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::union (7,383 samples, 2.41%)</title><rect x="89.5944%" y="341" width="2.4099%" height="15" fill="rgb(240,20,13)" fg:x="274486" fg:w="7383"/><text x="89.8444%" y="351.50">po..</text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (120 samples, 0.04%)</title><rect x="91.9651%" y="325" width="0.0392%" height="15" fill="rgb(217,89,34)" fg:x="281749" fg:w="120"/><text x="92.2151%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11,072 samples, 3.61%)</title><rect x="92.0105%" y="325" width="3.6140%" height="15" fill="rgb(229,13,5)" fg:x="281888" fg:w="11072"/><text x="92.2605%" y="335.50">libs..</text></g><g><title>powergraph`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (386 samples, 0.13%)</title><rect x="95.7175%" y="277" width="0.1260%" height="15" fill="rgb(244,67,35)" fg:x="293245" fg:w="386"/><text x="95.9675%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (58 samples, 0.02%)</title><rect x="95.9796%" y="261" width="0.0189%" height="15" fill="rgb(221,40,2)" fg:x="294048" fg:w="58"/><text x="96.2296%" y="271.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1,128 samples, 0.37%)</title><rect x="95.6418%" y="293" width="0.3682%" height="15" fill="rgb(237,157,21)" fg:x="293013" fg:w="1128"/><text x="95.8918%" y="303.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (506 samples, 0.17%)</title><rect x="95.8448%" y="277" width="0.1652%" height="15" fill="rgb(222,94,11)" fg:x="293635" fg:w="506"/><text x="96.0948%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,389 samples, 0.45%)</title><rect x="95.6323%" y="309" width="0.4534%" height="15" fill="rgb(249,113,6)" fg:x="292984" fg:w="1389"/><text x="95.8823%" y="319.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (232 samples, 0.08%)</title><rect x="96.0100%" y="293" width="0.0757%" height="15" fill="rgb(238,137,36)" fg:x="294141" fg:w="232"/><text x="96.2600%" y="303.50"></text></g><g><title>powergraph`powergraph::similarity_matrix::SimilarityMatrix::remove_element (12,510 samples, 4.08%)</title><rect x="92.0046%" y="341" width="4.0834%" height="15" fill="rgb(210,102,26)" fg:x="281870" fg:w="12510"/><text x="92.2546%" y="351.50">powe..</text></g><g><title>powergraph`itertools::Itertools::sorted (1,397 samples, 0.46%)</title><rect x="95.6320%" y="325" width="0.4560%" height="15" fill="rgb(218,30,30)" fg:x="292983" fg:w="1397"/><text x="95.8820%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_free (37 samples, 0.01%)</title><rect x="96.0935%" y="325" width="0.0121%" height="15" fill="rgb(214,67,26)" fg:x="294397" fg:w="37"/><text x="96.3435%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9,611 samples, 3.14%)</title><rect x="96.1246%" y="325" width="3.1371%" height="15" fill="rgb(251,9,53)" fg:x="294492" fg:w="9611"/><text x="96.3746%" y="335.50">lib..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (57 samples, 0.02%)</title><rect x="99.2659%" y="309" width="0.0186%" height="15" fill="rgb(228,204,25)" fg:x="304116" fg:w="57"/><text x="99.5159%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (44 samples, 0.01%)</title><rect x="99.3540%" y="197" width="0.0144%" height="15" fill="rgb(207,153,8)" fg:x="304386" fg:w="44"/><text x="99.6040%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (107 samples, 0.03%)</title><rect x="99.3429%" y="213" width="0.0349%" height="15" fill="rgb(242,9,16)" fg:x="304352" fg:w="107"/><text x="99.5929%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (131 samples, 0.04%)</title><rect x="99.3377%" y="229" width="0.0428%" height="15" fill="rgb(217,211,10)" fg:x="304336" fg:w="131"/><text x="99.5877%" y="239.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (161 samples, 0.05%)</title><rect x="99.3325%" y="261" width="0.0526%" height="15" fill="rgb(219,228,52)" fg:x="304320" fg:w="161"/><text x="99.5825%" y="271.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (147 samples, 0.05%)</title><rect x="99.3371%" y="245" width="0.0480%" height="15" fill="rgb(231,92,29)" fg:x="304334" fg:w="147"/><text x="99.5871%" y="255.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (172 samples, 0.06%)</title><rect x="99.3309%" y="277" width="0.0561%" height="15" fill="rgb(232,8,23)" fg:x="304315" fg:w="172"/><text x="99.5809%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (40 samples, 0.01%)</title><rect x="99.3975%" y="261" width="0.0131%" height="15" fill="rgb(216,211,34)" fg:x="304519" fg:w="40"/><text x="99.6475%" y="271.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (35 samples, 0.01%)</title><rect x="99.3991%" y="245" width="0.0114%" height="15" fill="rgb(236,151,0)" fg:x="304524" fg:w="35"/><text x="99.6491%" y="255.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (33 samples, 0.01%)</title><rect x="99.3997%" y="229" width="0.0108%" height="15" fill="rgb(209,168,3)" fg:x="304526" fg:w="33"/><text x="99.6497%" y="239.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (31 samples, 0.01%)</title><rect x="99.4004%" y="213" width="0.0101%" height="15" fill="rgb(208,129,28)" fg:x="304528" fg:w="31"/><text x="99.6504%" y="223.50"></text></g><g><title>powergraph`&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::fold (256 samples, 0.08%)</title><rect x="99.3273%" y="293" width="0.0836%" height="15" fill="rgb(229,78,22)" fg:x="304304" fg:w="256"/><text x="99.5773%" y="303.50"></text></g><g><title>powergraph`core::fmt::write (73 samples, 0.02%)</title><rect x="99.3870%" y="277" width="0.0238%" height="15" fill="rgb(228,187,13)" fg:x="304487" fg:w="73"/><text x="99.6370%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (43 samples, 0.01%)</title><rect x="99.4438%" y="181" width="0.0140%" height="15" fill="rgb(240,119,24)" fg:x="304661" fg:w="43"/><text x="99.6938%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (82 samples, 0.03%)</title><rect x="99.4409%" y="197" width="0.0268%" height="15" fill="rgb(209,194,42)" fg:x="304652" fg:w="82"/><text x="99.6909%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (167 samples, 0.05%)</title><rect x="99.4275%" y="213" width="0.0545%" height="15" fill="rgb(247,200,46)" fg:x="304611" fg:w="167"/><text x="99.6775%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (36 samples, 0.01%)</title><rect x="99.4702%" y="197" width="0.0118%" height="15" fill="rgb(218,76,16)" fg:x="304742" fg:w="36"/><text x="99.7202%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (180 samples, 0.06%)</title><rect x="99.4242%" y="229" width="0.0588%" height="15" fill="rgb(225,21,48)" fg:x="304601" fg:w="180"/><text x="99.6742%" y="239.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (201 samples, 0.07%)</title><rect x="99.4200%" y="261" width="0.0656%" height="15" fill="rgb(239,223,50)" fg:x="304588" fg:w="201"/><text x="99.6700%" y="271.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (188 samples, 0.06%)</title><rect x="99.4242%" y="245" width="0.0614%" height="15" fill="rgb(244,45,21)" fg:x="304601" fg:w="188"/><text x="99.6742%" y="255.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (205 samples, 0.07%)</title><rect x="99.4190%" y="277" width="0.0669%" height="15" fill="rgb(232,33,43)" fg:x="304585" fg:w="205"/><text x="99.6690%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (40 samples, 0.01%)</title><rect x="99.4908%" y="261" width="0.0131%" height="15" fill="rgb(209,8,3)" fg:x="304805" fg:w="40"/><text x="99.7408%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (43 samples, 0.01%)</title><rect x="99.5172%" y="181" width="0.0140%" height="15" fill="rgb(214,25,53)" fg:x="304886" fg:w="43"/><text x="99.7672%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (50 samples, 0.02%)</title><rect x="99.5156%" y="197" width="0.0163%" height="15" fill="rgb(254,186,54)" fg:x="304881" fg:w="50"/><text x="99.7656%" y="207.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (61 samples, 0.02%)</title><rect x="99.5130%" y="229" width="0.0199%" height="15" fill="rgb(208,174,49)" fg:x="304873" fg:w="61"/><text x="99.7630%" y="239.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (56 samples, 0.02%)</title><rect x="99.5146%" y="213" width="0.0183%" height="15" fill="rgb(233,191,51)" fg:x="304878" fg:w="56"/><text x="99.7646%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (90 samples, 0.03%)</title><rect x="99.5039%" y="261" width="0.0294%" height="15" fill="rgb(222,134,10)" fg:x="304845" fg:w="90"/><text x="99.7539%" y="271.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (62 samples, 0.02%)</title><rect x="99.5130%" y="245" width="0.0202%" height="15" fill="rgb(230,226,20)" fg:x="304873" fg:w="62"/><text x="99.7630%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (374 samples, 0.12%)</title><rect x="99.4134%" y="293" width="0.1221%" height="15" fill="rgb(251,111,25)" fg:x="304568" fg:w="374"/><text x="99.6634%" y="303.50"></text></g><g><title>powergraph`core::fmt::write (146 samples, 0.05%)</title><rect x="99.4879%" y="277" width="0.0477%" height="15" fill="rgb(224,40,46)" fg:x="304796" fg:w="146"/><text x="99.7379%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (79 samples, 0.03%)</title><rect x="99.5486%" y="277" width="0.0258%" height="15" fill="rgb(236,108,47)" fg:x="304982" fg:w="79"/><text x="99.7986%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (38 samples, 0.01%)</title><rect x="99.6103%" y="181" width="0.0124%" height="15" fill="rgb(234,93,0)" fg:x="305171" fg:w="38"/><text x="99.8603%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (47 samples, 0.02%)</title><rect x="99.6227%" y="181" width="0.0153%" height="15" fill="rgb(224,213,32)" fg:x="305209" fg:w="47"/><text x="99.8727%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (31 samples, 0.01%)</title><rect x="99.6429%" y="165" width="0.0101%" height="15" fill="rgb(251,11,48)" fg:x="305271" fg:w="31"/><text x="99.8929%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (59 samples, 0.02%)</title><rect x="99.6380%" y="181" width="0.0193%" height="15" fill="rgb(236,173,5)" fg:x="305256" fg:w="59"/><text x="99.8880%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (189 samples, 0.06%)</title><rect x="99.6008%" y="197" width="0.0617%" height="15" fill="rgb(230,95,12)" fg:x="305142" fg:w="189"/><text x="99.8508%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (227 samples, 0.07%)</title><rect x="99.5900%" y="213" width="0.0741%" height="15" fill="rgb(232,209,1)" fg:x="305109" fg:w="227"/><text x="99.8400%" y="223.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (274 samples, 0.09%)</title><rect x="99.5802%" y="245" width="0.0894%" height="15" fill="rgb(232,6,1)" fg:x="305079" fg:w="274"/><text x="99.8302%" y="255.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (252 samples, 0.08%)</title><rect x="99.5874%" y="229" width="0.0823%" height="15" fill="rgb(210,224,50)" fg:x="305101" fg:w="252"/><text x="99.8374%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (297 samples, 0.10%)</title><rect x="99.5744%" y="277" width="0.0969%" height="15" fill="rgb(228,127,35)" fg:x="305061" fg:w="297"/><text x="99.8244%" y="287.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (282 samples, 0.09%)</title><rect x="99.5793%" y="261" width="0.0920%" height="15" fill="rgb(245,102,45)" fg:x="305076" fg:w="282"/><text x="99.8293%" y="271.50"></text></g><g><title>powergraph`&lt;powergraph::unordered_tuple::UnorderedTuple&lt;T&gt; as core::cmp::Ord&gt;::cmp (1,262 samples, 0.41%)</title><rect x="99.2630%" y="325" width="0.4119%" height="15" fill="rgb(214,1,49)" fg:x="304107" fg:w="1262"/><text x="99.5130%" y="335.50"></text></g><g><title>powergraph`itertools::Itertools::join (1,134 samples, 0.37%)</title><rect x="99.3048%" y="309" width="0.3701%" height="15" fill="rgb(226,163,40)" fg:x="304235" fg:w="1134"/><text x="99.5548%" y="319.50"></text></g><g><title>powergraph`core::fmt::write (402 samples, 0.13%)</title><rect x="99.5437%" y="293" width="0.1312%" height="15" fill="rgb(239,212,28)" fg:x="304967" fg:w="402"/><text x="99.7937%" y="303.50"></text></g><g><title>powergraph`powergraph::similarity_matrix::SimilarityMatrix::set_similarity (11,031 samples, 3.60%)</title><rect x="96.0880%" y="341" width="3.6006%" height="15" fill="rgb(220,20,13)" fg:x="294380" fg:w="11031"/><text x="96.3380%" y="351.50">powe..</text></g><g><title>powergraph`powergraph::PowerGraph::decompose (303,794 samples, 99.16%)</title><rect x="0.5304%" y="357" width="99.1608%" height="15" fill="rgb(210,164,35)" fg:x="1625" fg:w="303794"/><text x="0.7804%" y="367.50">powergraph`powergraph::PowerGraph::decompose</text></g><g><title>powergraph`powergraph::edge_repository::EdgeRepository::get_edge (48 samples, 0.02%)</title><rect x="99.6945%" y="357" width="0.0157%" height="15" fill="rgb(248,109,41)" fg:x="305429" fg:w="48"/><text x="99.9445%" y="367.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (288 samples, 0.09%)</title><rect x="99.7101%" y="357" width="0.0940%" height="15" fill="rgb(238,23,50)" fg:x="305477" fg:w="288"/><text x="99.9601%" y="367.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (82 samples, 0.03%)</title><rect x="99.8042%" y="357" width="0.0268%" height="15" fill="rgb(211,48,49)" fg:x="305765" fg:w="82"/><text x="100.0542%" y="367.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::is_proper_subset_of (58 samples, 0.02%)</title><rect x="99.8309%" y="357" width="0.0189%" height="15" fill="rgb(223,36,21)" fg:x="305847" fg:w="58"/><text x="100.0809%" y="367.50"></text></g><g><title>powergraph`&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.02%)</title><rect x="99.9018%" y="261" width="0.0157%" height="15" fill="rgb(207,123,46)" fg:x="306064" fg:w="48"/><text x="100.1518%" y="271.50"></text></g><g><title>powergraph`&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 0.02%)</title><rect x="99.9311%" y="245" width="0.0222%" height="15" fill="rgb(240,218,32)" fg:x="306154" fg:w="68"/><text x="100.1811%" y="255.50"></text></g><g><title>powergraph`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::ignore_str (252 samples, 0.08%)</title><rect x="99.8796%" y="277" width="0.0823%" height="15" fill="rgb(252,5,43)" fg:x="305996" fg:w="252"/><text x="100.1296%" y="287.50"></text></g><g><title>powergraph`serde_json::read::next_or_eof (136 samples, 0.04%)</title><rect x="99.9174%" y="261" width="0.0444%" height="15" fill="rgb(252,84,19)" fg:x="306112" fg:w="136"/><text x="100.1674%" y="271.50"></text></g><g><title>powergraph`serde::de::MapAccess::next_value (325 samples, 0.11%)</title><rect x="99.8747%" y="293" width="0.1061%" height="15" fill="rgb(243,152,39)" fg:x="305981" fg:w="325"/><text x="100.1247%" y="303.50"></text></g><g><title>powergraph`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (367 samples, 0.12%)</title><rect x="99.8629%" y="309" width="0.1198%" height="15" fill="rgb(234,160,15)" fg:x="305945" fg:w="367"/><text x="100.1129%" y="319.50"></text></g><g><title>powergraph`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (405 samples, 0.13%)</title><rect x="99.8583%" y="325" width="0.1322%" height="15" fill="rgb(237,34,20)" fg:x="305931" fg:w="405"/><text x="100.1083%" y="335.50"></text></g><g><title>dyld`start (306,357 samples, 100.00%)</title><rect x="0.0000%" y="453" width="99.9974%" height="15" fill="rgb(229,97,13)" fg:x="0" fg:w="306357"/><text x="0.2500%" y="463.50">dyld`start</text></g><g><title>powergraph`main (306,356 samples, 100.00%)</title><rect x="0.0003%" y="437" width="99.9971%" height="15" fill="rgb(234,71,50)" fg:x="1" fg:w="306356"/><text x="0.2503%" y="447.50">powergraph`main</text></g><g><title>powergraph`std::rt::lang_start_internal (306,356 samples, 100.00%)</title><rect x="0.0003%" y="421" width="99.9971%" height="15" fill="rgb(253,155,4)" fg:x="1" fg:w="306356"/><text x="0.2503%" y="431.50">powergraph`std::rt::lang_start_internal</text></g><g><title>powergraph`std::rt::lang_start::_{{closure}} (306,356 samples, 100.00%)</title><rect x="0.0003%" y="405" width="99.9971%" height="15" fill="rgb(222,185,37)" fg:x="1" fg:w="306356"/><text x="0.2503%" y="415.50">powergraph`std::rt::lang_start::_{{closure}}</text></g><g><title>powergraph`std::sys::backtrace::__rust_begin_short_backtrace (306,356 samples, 100.00%)</title><rect x="0.0003%" y="389" width="99.9971%" height="15" fill="rgb(251,177,13)" fg:x="1" fg:w="306356"/><text x="0.2503%" y="399.50">powergraph`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>powergraph`powergraph::main (306,356 samples, 100.00%)</title><rect x="0.0003%" y="373" width="99.9971%" height="15" fill="rgb(250,179,40)" fg:x="1" fg:w="306356"/><text x="0.2503%" y="383.50">powergraph`powergraph::main</text></g><g><title>powergraph`serde_json::de::from_reader (426 samples, 0.14%)</title><rect x="99.8583%" y="357" width="0.1390%" height="15" fill="rgb(242,44,2)" fg:x="305931" fg:w="426"/><text x="100.1083%" y="367.50"></text></g><g><title>powergraph`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (426 samples, 0.14%)</title><rect x="99.8583%" y="341" width="0.1390%" height="15" fill="rgb(216,177,13)" fg:x="305931" fg:w="426"/><text x="100.1083%" y="351.50"></text></g><g><title>all (306,365 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(216,106,43)" fg:x="0" fg:w="306365"/><text x="0.2500%" y="479.50"></text></g></svg></svg>