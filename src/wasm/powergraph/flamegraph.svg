<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="163083"><g><title>libsystem_malloc.dylib`_free (767 samples, 0.47%)</title><rect x="0.0006%" y="357" width="0.4703%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="767"/><text x="0.2506%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (285 samples, 0.17%)</title><rect x="0.4709%" y="357" width="0.1748%" height="15" fill="rgb(217,0,24)" fg:x="768" fg:w="285"/><text x="0.7209%" y="367.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.03%)</title><rect x="0.6610%" y="357" width="0.0251%" height="15" fill="rgb(221,193,54)" fg:x="1078" fg:w="41"/><text x="0.9110%" y="367.50"></text></g><g><title>powergraph`&lt;powergraph::Edge as core::cmp::PartialEq&gt;::eq (17 samples, 0.01%)</title><rect x="0.6929%" y="357" width="0.0104%" height="15" fill="rgb(248,212,6)" fg:x="1130" fg:w="17"/><text x="0.9429%" y="367.50"></text></g><g><title>powergraph`&lt;powergraph::PowerEdgeCandidate as core::cmp::PartialEq&gt;::eq (93 samples, 0.06%)</title><rect x="0.7039%" y="357" width="0.0570%" height="15" fill="rgb(208,68,35)" fg:x="1148" fg:w="93"/><text x="0.9539%" y="367.50"></text></g><g><title>powergraph`DYLD-STUB$$free (213 samples, 0.13%)</title><rect x="0.7738%" y="357" width="0.1306%" height="15" fill="rgb(232,128,0)" fg:x="1262" fg:w="213"/><text x="1.0238%" y="367.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (46 samples, 0.03%)</title><rect x="0.9173%" y="357" width="0.0282%" height="15" fill="rgb(207,160,47)" fg:x="1496" fg:w="46"/><text x="1.1673%" y="367.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (156 samples, 0.10%)</title><rect x="0.9510%" y="357" width="0.0957%" height="15" fill="rgb(228,23,34)" fg:x="1551" fg:w="156"/><text x="1.2010%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (200 samples, 0.12%)</title><rect x="1.3993%" y="341" width="0.1226%" height="15" fill="rgb(218,30,26)" fg:x="2282" fg:w="200"/><text x="1.6493%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_free (493 samples, 0.30%)</title><rect x="1.5238%" y="341" width="0.3023%" height="15" fill="rgb(220,122,19)" fg:x="2485" fg:w="493"/><text x="1.7738%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2,192 samples, 1.34%)</title><rect x="1.8279%" y="341" width="1.3441%" height="15" fill="rgb(250,228,42)" fg:x="2981" fg:w="2192"/><text x="2.0779%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (32 samples, 0.02%)</title><rect x="3.1720%" y="341" width="0.0196%" height="15" fill="rgb(240,193,28)" fg:x="5173" fg:w="32"/><text x="3.4220%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (18 samples, 0.01%)</title><rect x="3.2370%" y="309" width="0.0110%" height="15" fill="rgb(216,20,37)" fg:x="5279" fg:w="18"/><text x="3.4870%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (91 samples, 0.06%)</title><rect x="3.1996%" y="341" width="0.0558%" height="15" fill="rgb(206,188,39)" fg:x="5218" fg:w="91"/><text x="3.4496%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (60 samples, 0.04%)</title><rect x="3.2186%" y="325" width="0.0368%" height="15" fill="rgb(217,207,13)" fg:x="5249" fg:w="60"/><text x="3.4686%" y="335.50"></text></g><g><title>libsystem_platform.dylib`__bzero (128 samples, 0.08%)</title><rect x="3.2658%" y="341" width="0.0785%" height="15" fill="rgb(231,73,38)" fg:x="5326" fg:w="128"/><text x="3.5158%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (622 samples, 0.38%)</title><rect x="3.3486%" y="341" width="0.3814%" height="15" fill="rgb(225,20,46)" fg:x="5461" fg:w="622"/><text x="3.5986%" y="351.50"></text></g><g><title>powergraph`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (67 samples, 0.04%)</title><rect x="3.7300%" y="341" width="0.0411%" height="15" fill="rgb(210,31,41)" fg:x="6083" fg:w="67"/><text x="3.9800%" y="351.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.02%)</title><rect x="3.7711%" y="341" width="0.0227%" height="15" fill="rgb(221,200,47)" fg:x="6150" fg:w="37"/><text x="4.0211%" y="351.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (49 samples, 0.03%)</title><rect x="3.7938%" y="341" width="0.0300%" height="15" fill="rgb(226,26,5)" fg:x="6187" fg:w="49"/><text x="4.0438%" y="351.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (28 samples, 0.02%)</title><rect x="3.8238%" y="341" width="0.0172%" height="15" fill="rgb(249,33,26)" fg:x="6236" fg:w="28"/><text x="4.0738%" y="351.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.03%)</title><rect x="3.8410%" y="341" width="0.0258%" height="15" fill="rgb(235,183,28)" fg:x="6264" fg:w="42"/><text x="4.0910%" y="351.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.01%)</title><rect x="3.8778%" y="325" width="0.0117%" height="15" fill="rgb(221,5,38)" fg:x="6324" fg:w="19"/><text x="4.1278%" y="335.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (17 samples, 0.01%)</title><rect x="3.8790%" y="309" width="0.0104%" height="15" fill="rgb(247,18,42)" fg:x="6326" fg:w="17"/><text x="4.1290%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_free (40 samples, 0.02%)</title><rect x="3.9354%" y="309" width="0.0245%" height="15" fill="rgb(241,131,45)" fg:x="6418" fg:w="40"/><text x="4.1854%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.02%)</title><rect x="4.0035%" y="197" width="0.0166%" height="15" fill="rgb(249,31,29)" fg:x="6529" fg:w="27"/><text x="4.2535%" y="207.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (34 samples, 0.02%)</title><rect x="4.0200%" y="197" width="0.0208%" height="15" fill="rgb(225,111,53)" fg:x="6556" fg:w="34"/><text x="4.2700%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (26 samples, 0.02%)</title><rect x="4.0249%" y="181" width="0.0159%" height="15" fill="rgb(238,160,17)" fg:x="6564" fg:w="26"/><text x="4.2749%" y="191.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (80 samples, 0.05%)</title><rect x="3.9924%" y="213" width="0.0491%" height="15" fill="rgb(214,148,48)" fg:x="6511" fg:w="80"/><text x="4.2424%" y="223.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (118 samples, 0.07%)</title><rect x="3.9814%" y="229" width="0.0724%" height="15" fill="rgb(232,36,49)" fg:x="6493" fg:w="118"/><text x="4.2314%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (20 samples, 0.01%)</title><rect x="4.0415%" y="213" width="0.0123%" height="15" fill="rgb(209,103,24)" fg:x="6591" fg:w="20"/><text x="4.2915%" y="223.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (120 samples, 0.07%)</title><rect x="3.9808%" y="261" width="0.0736%" height="15" fill="rgb(229,88,8)" fg:x="6492" fg:w="120"/><text x="4.2308%" y="271.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (120 samples, 0.07%)</title><rect x="3.9808%" y="245" width="0.0736%" height="15" fill="rgb(213,181,19)" fg:x="6492" fg:w="120"/><text x="4.2308%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (131 samples, 0.08%)</title><rect x="3.9790%" y="277" width="0.0803%" height="15" fill="rgb(254,191,54)" fg:x="6489" fg:w="131"/><text x="4.2290%" y="287.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (149 samples, 0.09%)</title><rect x="3.9777%" y="293" width="0.0914%" height="15" fill="rgb(241,83,37)" fg:x="6487" fg:w="149"/><text x="4.2277%" y="303.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (168 samples, 0.10%)</title><rect x="3.9734%" y="309" width="0.1030%" height="15" fill="rgb(233,36,39)" fg:x="6480" fg:w="168"/><text x="4.2234%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (46 samples, 0.03%)</title><rect x="4.1402%" y="261" width="0.0282%" height="15" fill="rgb(226,3,54)" fg:x="6752" fg:w="46"/><text x="4.3902%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (100 samples, 0.06%)</title><rect x="4.1697%" y="261" width="0.0613%" height="15" fill="rgb(245,192,40)" fg:x="6800" fg:w="100"/><text x="4.4197%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (31 samples, 0.02%)</title><rect x="4.2402%" y="245" width="0.0190%" height="15" fill="rgb(238,167,29)" fg:x="6915" fg:w="31"/><text x="4.4902%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (30 samples, 0.02%)</title><rect x="4.2408%" y="229" width="0.0184%" height="15" fill="rgb(232,182,51)" fg:x="6916" fg:w="30"/><text x="4.4908%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (47 samples, 0.03%)</title><rect x="4.2310%" y="261" width="0.0288%" height="15" fill="rgb(231,60,39)" fg:x="6900" fg:w="47"/><text x="4.4810%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (75 samples, 0.05%)</title><rect x="4.2849%" y="245" width="0.0460%" height="15" fill="rgb(208,69,12)" fg:x="6988" fg:w="75"/><text x="4.5349%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (122 samples, 0.07%)</title><rect x="4.3309%" y="245" width="0.0748%" height="15" fill="rgb(235,93,37)" fg:x="7063" fg:w="122"/><text x="4.5809%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (260 samples, 0.16%)</title><rect x="4.5793%" y="229" width="0.1594%" height="15" fill="rgb(213,116,39)" fg:x="7468" fg:w="260"/><text x="4.8293%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc (25 samples, 0.02%)</title><rect x="4.7387%" y="229" width="0.0153%" height="15" fill="rgb(222,207,29)" fg:x="7728" fg:w="25"/><text x="4.9887%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (384 samples, 0.24%)</title><rect x="4.7552%" y="229" width="0.2355%" height="15" fill="rgb(206,96,30)" fg:x="7755" fg:w="384"/><text x="5.0052%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,066 samples, 0.65%)</title><rect x="4.9907%" y="229" width="0.6537%" height="15" fill="rgb(218,138,4)" fg:x="8139" fg:w="1066"/><text x="5.2407%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (527 samples, 0.32%)</title><rect x="5.6444%" y="229" width="0.3231%" height="15" fill="rgb(250,191,14)" fg:x="9205" fg:w="527"/><text x="5.8944%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (391 samples, 0.24%)</title><rect x="5.7278%" y="213" width="0.2398%" height="15" fill="rgb(239,60,40)" fg:x="9341" fg:w="391"/><text x="5.9778%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (387 samples, 0.24%)</title><rect x="5.7302%" y="197" width="0.2373%" height="15" fill="rgb(206,27,48)" fg:x="9345" fg:w="387"/><text x="5.9802%" y="207.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (43 samples, 0.03%)</title><rect x="5.9675%" y="229" width="0.0264%" height="15" fill="rgb(225,35,8)" fg:x="9732" fg:w="43"/><text x="6.2175%" y="239.50"></text></g><g><title>powergraph`__rdl_alloc (28 samples, 0.02%)</title><rect x="6.0000%" y="229" width="0.0172%" height="15" fill="rgb(250,213,24)" fg:x="9785" fg:w="28"/><text x="6.2500%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (2,626 samples, 1.61%)</title><rect x="4.4106%" y="245" width="1.6102%" height="15" fill="rgb(247,123,22)" fg:x="7193" fg:w="2626"/><text x="4.6606%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (41 samples, 0.03%)</title><rect x="6.0405%" y="229" width="0.0251%" height="15" fill="rgb(231,138,38)" fg:x="9851" fg:w="41"/><text x="6.2905%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (84 samples, 0.05%)</title><rect x="6.0681%" y="229" width="0.0515%" height="15" fill="rgb(231,145,46)" fg:x="9896" fg:w="84"/><text x="6.3181%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (72 samples, 0.04%)</title><rect x="6.1613%" y="213" width="0.0441%" height="15" fill="rgb(251,118,11)" fg:x="10048" fg:w="72"/><text x="6.4113%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (31 samples, 0.02%)</title><rect x="6.1864%" y="197" width="0.0190%" height="15" fill="rgb(217,147,25)" fg:x="10089" fg:w="31"/><text x="6.4364%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (79 samples, 0.05%)</title><rect x="6.2054%" y="213" width="0.0484%" height="15" fill="rgb(247,81,37)" fg:x="10120" fg:w="79"/><text x="6.4554%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (55 samples, 0.03%)</title><rect x="6.2201%" y="197" width="0.0337%" height="15" fill="rgb(209,12,38)" fg:x="10144" fg:w="55"/><text x="6.4701%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (36 samples, 0.02%)</title><rect x="6.2318%" y="181" width="0.0221%" height="15" fill="rgb(227,1,9)" fg:x="10163" fg:w="36"/><text x="6.4818%" y="191.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (382 samples, 0.23%)</title><rect x="6.0209%" y="245" width="0.2342%" height="15" fill="rgb(248,47,43)" fg:x="9819" fg:w="382"/><text x="6.2709%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (196 samples, 0.12%)</title><rect x="6.1349%" y="229" width="0.1202%" height="15" fill="rgb(221,10,30)" fg:x="10005" fg:w="196"/><text x="6.3849%" y="239.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,275 samples, 2.01%)</title><rect x="4.2598%" y="261" width="2.0082%" height="15" fill="rgb(210,229,1)" fg:x="6947" fg:w="3275"/><text x="4.5098%" y="271.50">p..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (21 samples, 0.01%)</title><rect x="6.2551%" y="245" width="0.0129%" height="15" fill="rgb(222,148,37)" fg:x="10201" fg:w="21"/><text x="6.5051%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (44 samples, 0.03%)</title><rect x="6.2717%" y="261" width="0.0270%" height="15" fill="rgb(234,67,33)" fg:x="10228" fg:w="44"/><text x="6.5217%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,629 samples, 2.23%)</title><rect x="4.0814%" y="277" width="2.2252%" height="15" fill="rgb(247,98,35)" fg:x="6656" fg:w="3629"/><text x="4.3314%" y="287.50">p..</text></g><g><title>libsystem_malloc.dylib`_free (18 samples, 0.01%)</title><rect x="6.3367%" y="245" width="0.0110%" height="15" fill="rgb(247,138,52)" fg:x="10334" fg:w="18"/><text x="6.5867%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (42 samples, 0.03%)</title><rect x="6.3728%" y="229" width="0.0258%" height="15" fill="rgb(213,79,30)" fg:x="10393" fg:w="42"/><text x="6.6228%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (50 samples, 0.03%)</title><rect x="6.3986%" y="229" width="0.0307%" height="15" fill="rgb(246,177,23)" fg:x="10435" fg:w="50"/><text x="6.6486%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (22 samples, 0.01%)</title><rect x="6.4654%" y="197" width="0.0135%" height="15" fill="rgb(230,62,27)" fg:x="10544" fg:w="22"/><text x="6.7154%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (72 samples, 0.04%)</title><rect x="6.4409%" y="229" width="0.0441%" height="15" fill="rgb(216,154,8)" fg:x="10504" fg:w="72"/><text x="6.6909%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (55 samples, 0.03%)</title><rect x="6.4513%" y="213" width="0.0337%" height="15" fill="rgb(244,35,45)" fg:x="10521" fg:w="55"/><text x="6.7013%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (35 samples, 0.02%)</title><rect x="6.4857%" y="197" width="0.0215%" height="15" fill="rgb(251,115,12)" fg:x="10577" fg:w="35"/><text x="6.7357%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (37 samples, 0.02%)</title><rect x="6.4850%" y="229" width="0.0227%" height="15" fill="rgb(240,54,50)" fg:x="10576" fg:w="37"/><text x="6.7350%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (37 samples, 0.02%)</title><rect x="6.4850%" y="213" width="0.0227%" height="15" fill="rgb(233,84,52)" fg:x="10576" fg:w="37"/><text x="6.7350%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (46 samples, 0.03%)</title><rect x="6.5096%" y="229" width="0.0282%" height="15" fill="rgb(207,117,47)" fg:x="10616" fg:w="46"/><text x="6.7596%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (65 samples, 0.04%)</title><rect x="6.5445%" y="213" width="0.0399%" height="15" fill="rgb(249,43,39)" fg:x="10673" fg:w="65"/><text x="6.7945%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (23 samples, 0.01%)</title><rect x="6.5942%" y="213" width="0.0141%" height="15" fill="rgb(209,38,44)" fg:x="10754" fg:w="23"/><text x="6.8442%" y="223.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;powergraph::PowerNode&gt; (110 samples, 0.07%)</title><rect x="6.5421%" y="229" width="0.0675%" height="15" fill="rgb(236,212,23)" fg:x="10669" fg:w="110"/><text x="6.7921%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (36 samples, 0.02%)</title><rect x="6.6126%" y="213" width="0.0221%" height="15" fill="rgb(242,79,21)" fg:x="10784" fg:w="36"/><text x="6.8626%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (53 samples, 0.03%)</title><rect x="6.6347%" y="213" width="0.0325%" height="15" fill="rgb(211,96,35)" fg:x="10820" fg:w="53"/><text x="6.8847%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (53 samples, 0.03%)</title><rect x="6.6347%" y="197" width="0.0325%" height="15" fill="rgb(253,215,40)" fg:x="10820" fg:w="53"/><text x="6.8847%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (53 samples, 0.03%)</title><rect x="6.6347%" y="181" width="0.0325%" height="15" fill="rgb(211,81,21)" fg:x="10820" fg:w="53"/><text x="6.8847%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (21 samples, 0.01%)</title><rect x="6.6684%" y="213" width="0.0129%" height="15" fill="rgb(208,190,38)" fg:x="10875" fg:w="21"/><text x="6.9184%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (23 samples, 0.01%)</title><rect x="6.6898%" y="197" width="0.0141%" height="15" fill="rgb(235,213,38)" fg:x="10910" fg:w="23"/><text x="6.9398%" y="207.50"></text></g><g><title>powergraph`DYLD-STUB$$free (17 samples, 0.01%)</title><rect x="6.7131%" y="197" width="0.0104%" height="15" fill="rgb(237,122,38)" fg:x="10948" fg:w="17"/><text x="6.9631%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (73 samples, 0.04%)</title><rect x="6.7493%" y="181" width="0.0448%" height="15" fill="rgb(244,218,35)" fg:x="11007" fg:w="73"/><text x="6.9993%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (23 samples, 0.01%)</title><rect x="6.7984%" y="181" width="0.0141%" height="15" fill="rgb(240,68,47)" fg:x="11087" fg:w="23"/><text x="7.0484%" y="191.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;powergraph::clusters::Cluster&gt; (333 samples, 0.20%)</title><rect x="6.6095%" y="229" width="0.2042%" height="15" fill="rgb(210,16,53)" fg:x="10779" fg:w="333"/><text x="6.8595%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (211 samples, 0.13%)</title><rect x="6.6843%" y="213" width="0.1294%" height="15" fill="rgb(235,124,12)" fg:x="10901" fg:w="211"/><text x="6.9343%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (125 samples, 0.08%)</title><rect x="6.7371%" y="197" width="0.0766%" height="15" fill="rgb(224,169,11)" fg:x="10987" fg:w="125"/><text x="6.9871%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (227 samples, 0.14%)</title><rect x="6.8229%" y="213" width="0.1392%" height="15" fill="rgb(250,166,2)" fg:x="11127" fg:w="227"/><text x="7.0729%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (44 samples, 0.03%)</title><rect x="6.9621%" y="213" width="0.0270%" height="15" fill="rgb(242,216,29)" fg:x="11354" fg:w="44"/><text x="7.2121%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.03%)</title><rect x="6.9958%" y="213" width="0.0276%" height="15" fill="rgb(230,116,27)" fg:x="11409" fg:w="45"/><text x="7.2458%" y="223.50"></text></g><g><title>powergraph`DYLD-STUB$$free (80 samples, 0.05%)</title><rect x="7.0234%" y="213" width="0.0491%" height="15" fill="rgb(228,99,48)" fg:x="11454" fg:w="80"/><text x="7.2734%" y="223.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::string::String&gt; (44 samples, 0.03%)</title><rect x="7.0804%" y="213" width="0.0270%" height="15" fill="rgb(253,11,6)" fg:x="11547" fg:w="44"/><text x="7.3304%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (331 samples, 0.20%)</title><rect x="7.1755%" y="197" width="0.2030%" height="15" fill="rgb(247,143,39)" fg:x="11702" fg:w="331"/><text x="7.4255%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (58 samples, 0.04%)</title><rect x="7.3797%" y="197" width="0.0356%" height="15" fill="rgb(236,97,10)" fg:x="12035" fg:w="58"/><text x="7.6297%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (355 samples, 0.22%)</title><rect x="7.4152%" y="197" width="0.2177%" height="15" fill="rgb(233,208,19)" fg:x="12093" fg:w="355"/><text x="7.6652%" y="207.50"></text></g><g><title>powergraph`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,093 samples, 1.28%)</title><rect x="6.3600%" y="245" width="1.2834%" height="15" fill="rgb(216,164,2)" fg:x="10372" fg:w="2093"/><text x="6.6100%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (1,346 samples, 0.83%)</title><rect x="6.8180%" y="229" width="0.8253%" height="15" fill="rgb(220,129,5)" fg:x="11119" fg:w="1346"/><text x="7.0680%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (874 samples, 0.54%)</title><rect x="7.1074%" y="213" width="0.5359%" height="15" fill="rgb(242,17,10)" fg:x="11591" fg:w="874"/><text x="7.3574%" y="223.50"></text></g><g><title>powergraph`alloc::vec::in_place_collect::from_iter_in_place (2,146 samples, 1.32%)</title><rect x="6.3367%" y="261" width="1.3159%" height="15" fill="rgb(242,107,0)" fg:x="10334" fg:w="2146"/><text x="6.5867%" y="271.50"></text></g><g><title>powergraph`powergraph::PowerGraph::find_power_node (2,157 samples, 1.32%)</title><rect x="6.3324%" y="277" width="1.3226%" height="15" fill="rgb(251,28,31)" fg:x="10327" fg:w="2157"/><text x="6.5824%" y="287.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,838 samples, 3.58%)</title><rect x="4.0765%" y="309" width="3.5798%" height="15" fill="rgb(233,223,10)" fg:x="6648" fg:w="5838"/><text x="4.3265%" y="319.50">powe..</text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,837 samples, 3.58%)</title><rect x="4.0771%" y="293" width="3.5792%" height="15" fill="rgb(215,21,27)" fg:x="6649" fg:w="5837"/><text x="4.3271%" y="303.50">powe..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (43 samples, 0.03%)</title><rect x="7.6605%" y="293" width="0.0264%" height="15" fill="rgb(232,23,21)" fg:x="12493" fg:w="43"/><text x="7.9105%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (60 samples, 0.04%)</title><rect x="7.6869%" y="293" width="0.0368%" height="15" fill="rgb(244,5,23)" fg:x="12536" fg:w="60"/><text x="7.9369%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (47 samples, 0.03%)</title><rect x="7.7237%" y="293" width="0.0288%" height="15" fill="rgb(226,81,46)" fg:x="12596" fg:w="47"/><text x="7.9737%" y="303.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (19 samples, 0.01%)</title><rect x="7.7408%" y="277" width="0.0117%" height="15" fill="rgb(247,70,30)" fg:x="12624" fg:w="19"/><text x="7.9908%" y="287.50"></text></g><g><title>powergraph`itertools::combinations_with_replacement::CombinationsWithReplacement&lt;I&gt;::increment_indices (45 samples, 0.03%)</title><rect x="7.7599%" y="293" width="0.0276%" height="15" fill="rgb(212,68,19)" fg:x="12655" fg:w="45"/><text x="8.0099%" y="303.50"></text></g><g><title>powergraph`&lt;itertools::combinations_with_replacement::CombinationsWithReplacement&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (219 samples, 0.13%)</title><rect x="7.6562%" y="309" width="0.1343%" height="15" fill="rgb(240,187,13)" fg:x="12486" fg:w="219"/><text x="7.9062%" y="319.50"></text></g><g><title>powergraph`&lt;powergraph::sets::SetIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.02%)</title><rect x="7.8169%" y="261" width="0.0245%" height="15" fill="rgb(223,113,26)" fg:x="12748" fg:w="40"/><text x="8.0669%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (30 samples, 0.02%)</title><rect x="7.8708%" y="213" width="0.0184%" height="15" fill="rgb(206,192,2)" fg:x="12836" fg:w="30"/><text x="8.1208%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (29 samples, 0.02%)</title><rect x="7.8892%" y="213" width="0.0178%" height="15" fill="rgb(241,108,4)" fg:x="12866" fg:w="29"/><text x="8.1392%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (29 samples, 0.02%)</title><rect x="7.8892%" y="197" width="0.0178%" height="15" fill="rgb(247,173,49)" fg:x="12866" fg:w="29"/><text x="8.1392%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (29 samples, 0.02%)</title><rect x="7.8892%" y="181" width="0.0178%" height="15" fill="rgb(224,114,35)" fg:x="12866" fg:w="29"/><text x="8.1392%" y="191.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (91 samples, 0.06%)</title><rect x="7.8549%" y="229" width="0.0558%" height="15" fill="rgb(245,159,27)" fg:x="12810" fg:w="91"/><text x="8.1049%" y="239.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (112 samples, 0.07%)</title><rect x="7.8500%" y="245" width="0.0687%" height="15" fill="rgb(245,172,44)" fg:x="12802" fg:w="112"/><text x="8.1000%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (45 samples, 0.03%)</title><rect x="7.9187%" y="245" width="0.0276%" height="15" fill="rgb(236,23,11)" fg:x="12914" fg:w="45"/><text x="8.1687%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (28 samples, 0.02%)</title><rect x="7.9291%" y="229" width="0.0172%" height="15" fill="rgb(205,117,38)" fg:x="12931" fg:w="28"/><text x="8.1791%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (42 samples, 0.03%)</title><rect x="7.9469%" y="229" width="0.0258%" height="15" fill="rgb(237,72,25)" fg:x="12960" fg:w="42"/><text x="8.1969%" y="239.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (44 samples, 0.03%)</title><rect x="7.9463%" y="245" width="0.0270%" height="15" fill="rgb(244,70,9)" fg:x="12959" fg:w="44"/><text x="8.1963%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (21 samples, 0.01%)</title><rect x="7.9745%" y="229" width="0.0129%" height="15" fill="rgb(217,125,39)" fg:x="13005" fg:w="21"/><text x="8.2245%" y="239.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (18 samples, 0.01%)</title><rect x="7.9880%" y="229" width="0.0110%" height="15" fill="rgb(235,36,10)" fg:x="13027" fg:w="18"/><text x="8.2380%" y="239.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (253 samples, 0.16%)</title><rect x="7.8457%" y="261" width="0.1551%" height="15" fill="rgb(251,123,47)" fg:x="12795" fg:w="253"/><text x="8.0957%" y="271.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::iter (45 samples, 0.03%)</title><rect x="7.9732%" y="245" width="0.0276%" height="15" fill="rgb(221,13,13)" fg:x="13003" fg:w="45"/><text x="8.2232%" y="255.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (311 samples, 0.19%)</title><rect x="7.8107%" y="277" width="0.1907%" height="15" fill="rgb(238,131,9)" fg:x="12738" fg:w="311"/><text x="8.0607%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (26 samples, 0.02%)</title><rect x="8.0333%" y="229" width="0.0159%" height="15" fill="rgb(211,50,8)" fg:x="13101" fg:w="26"/><text x="8.2833%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (26 samples, 0.02%)</title><rect x="8.0333%" y="213" width="0.0159%" height="15" fill="rgb(245,182,24)" fg:x="13101" fg:w="26"/><text x="8.2833%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (24 samples, 0.01%)</title><rect x="8.0346%" y="197" width="0.0147%" height="15" fill="rgb(242,14,37)" fg:x="13103" fg:w="24"/><text x="8.2846%" y="207.50"></text></g><g><title>powergraph`&lt;powergraph::sets::SetIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 0.03%)</title><rect x="8.0168%" y="245" width="0.0337%" height="15" fill="rgb(246,228,12)" fg:x="13074" fg:w="55"/><text x="8.2668%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.01%)</title><rect x="8.0836%" y="197" width="0.0123%" height="15" fill="rgb(213,55,15)" fg:x="13183" fg:w="20"/><text x="8.3336%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.01%)</title><rect x="8.0959%" y="197" width="0.0123%" height="15" fill="rgb(209,9,3)" fg:x="13203" fg:w="20"/><text x="8.3459%" y="207.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (24 samples, 0.01%)</title><rect x="8.1081%" y="197" width="0.0147%" height="15" fill="rgb(230,59,30)" fg:x="13223" fg:w="24"/><text x="8.3581%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (21 samples, 0.01%)</title><rect x="8.1100%" y="181" width="0.0129%" height="15" fill="rgb(209,121,21)" fg:x="13226" fg:w="21"/><text x="8.3600%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (20 samples, 0.01%)</title><rect x="8.1106%" y="165" width="0.0123%" height="15" fill="rgb(220,109,13)" fg:x="13227" fg:w="20"/><text x="8.3606%" y="175.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (70 samples, 0.04%)</title><rect x="8.0812%" y="213" width="0.0429%" height="15" fill="rgb(232,18,1)" fg:x="13179" fg:w="70"/><text x="8.3312%" y="223.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (92 samples, 0.06%)</title><rect x="8.0738%" y="229" width="0.0564%" height="15" fill="rgb(215,41,42)" fg:x="13167" fg:w="92"/><text x="8.3238%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (24 samples, 0.01%)</title><rect x="8.1314%" y="229" width="0.0147%" height="15" fill="rgb(224,123,36)" fg:x="13261" fg:w="24"/><text x="8.3814%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22 samples, 0.01%)</title><rect x="8.1627%" y="197" width="0.0135%" height="15" fill="rgb(240,125,3)" fg:x="13312" fg:w="22"/><text x="8.4127%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (57 samples, 0.03%)</title><rect x="8.1480%" y="213" width="0.0350%" height="15" fill="rgb(205,98,50)" fg:x="13288" fg:w="57"/><text x="8.3980%" y="223.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (61 samples, 0.04%)</title><rect x="8.1462%" y="229" width="0.0374%" height="15" fill="rgb(205,185,37)" fg:x="13285" fg:w="61"/><text x="8.3962%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (18 samples, 0.01%)</title><rect x="8.1915%" y="197" width="0.0110%" height="15" fill="rgb(238,207,15)" fg:x="13359" fg:w="18"/><text x="8.4415%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (18 samples, 0.01%)</title><rect x="8.1915%" y="181" width="0.0110%" height="15" fill="rgb(213,199,42)" fg:x="13359" fg:w="18"/><text x="8.4415%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (18 samples, 0.01%)</title><rect x="8.1915%" y="165" width="0.0110%" height="15" fill="rgb(235,201,11)" fg:x="13359" fg:w="18"/><text x="8.4415%" y="175.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (26 samples, 0.02%)</title><rect x="8.1885%" y="213" width="0.0159%" height="15" fill="rgb(207,46,11)" fg:x="13354" fg:w="26"/><text x="8.4385%" y="223.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (262 samples, 0.16%)</title><rect x="8.0603%" y="245" width="0.1607%" height="15" fill="rgb(241,35,35)" fg:x="13145" fg:w="262"/><text x="8.3103%" y="255.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::iter (61 samples, 0.04%)</title><rect x="8.1836%" y="229" width="0.0374%" height="15" fill="rgb(243,32,47)" fg:x="13346" fg:w="61"/><text x="8.4336%" y="239.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (378 samples, 0.23%)</title><rect x="8.0033%" y="261" width="0.2318%" height="15" fill="rgb(247,202,23)" fg:x="13052" fg:w="378"/><text x="8.2533%" y="271.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (387 samples, 0.24%)</title><rect x="8.0014%" y="277" width="0.2373%" height="15" fill="rgb(219,102,11)" fg:x="13049" fg:w="387"/><text x="8.2514%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (701 samples, 0.43%)</title><rect x="7.8095%" y="293" width="0.4298%" height="15" fill="rgb(243,110,44)" fg:x="12736" fg:w="701"/><text x="8.0595%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (67 samples, 0.04%)</title><rect x="8.2700%" y="261" width="0.0411%" height="15" fill="rgb(222,74,54)" fg:x="13487" fg:w="67"/><text x="8.5200%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (68 samples, 0.04%)</title><rect x="8.3142%" y="245" width="0.0417%" height="15" fill="rgb(216,99,12)" fg:x="13559" fg:w="68"/><text x="8.5642%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (67 samples, 0.04%)</title><rect x="8.3148%" y="229" width="0.0411%" height="15" fill="rgb(226,22,26)" fg:x="13560" fg:w="67"/><text x="8.5648%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (74 samples, 0.05%)</title><rect x="8.3111%" y="261" width="0.0454%" height="15" fill="rgb(217,163,10)" fg:x="13554" fg:w="74"/><text x="8.5611%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (180 samples, 0.11%)</title><rect x="8.2473%" y="277" width="0.1104%" height="15" fill="rgb(213,25,53)" fg:x="13450" fg:w="180"/><text x="8.4973%" y="287.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (200 samples, 0.12%)</title><rect x="8.2394%" y="293" width="0.1226%" height="15" fill="rgb(252,105,26)" fg:x="13437" fg:w="200"/><text x="8.4894%" y="303.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;powergraph::clusters::Cluster&gt; (21 samples, 0.01%)</title><rect x="8.3632%" y="293" width="0.0129%" height="15" fill="rgb(220,39,43)" fg:x="13639" fg:w="21"/><text x="8.6132%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (17 samples, 0.01%)</title><rect x="8.3657%" y="277" width="0.0104%" height="15" fill="rgb(229,68,48)" fg:x="13643" fg:w="17"/><text x="8.6157%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (24 samples, 0.01%)</title><rect x="8.3786%" y="277" width="0.0147%" height="15" fill="rgb(252,8,32)" fg:x="13664" fg:w="24"/><text x="8.6286%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (63 samples, 0.04%)</title><rect x="8.4129%" y="261" width="0.0386%" height="15" fill="rgb(223,20,43)" fg:x="13720" fg:w="63"/><text x="8.6629%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (28 samples, 0.02%)</title><rect x="8.4540%" y="261" width="0.0172%" height="15" fill="rgb(229,81,49)" fg:x="13787" fg:w="28"/><text x="8.7040%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (159 samples, 0.10%)</title><rect x="8.3786%" y="293" width="0.0975%" height="15" fill="rgb(236,28,36)" fg:x="13664" fg:w="159"/><text x="8.6286%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (121 samples, 0.07%)</title><rect x="8.4019%" y="277" width="0.0742%" height="15" fill="rgb(249,185,26)" fg:x="13702" fg:w="121"/><text x="8.6519%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (19 samples, 0.01%)</title><rect x="8.4797%" y="277" width="0.0117%" height="15" fill="rgb(249,174,33)" fg:x="13829" fg:w="19"/><text x="8.7297%" y="287.50"></text></g><g><title>powergraph`powergraph::cluster_repository::ClusterRepository::get (29 samples, 0.02%)</title><rect x="8.4761%" y="293" width="0.0178%" height="15" fill="rgb(233,201,37)" fg:x="13823" fg:w="29"/><text x="8.7261%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (39 samples, 0.02%)</title><rect x="8.5233%" y="229" width="0.0239%" height="15" fill="rgb(221,78,26)" fg:x="13900" fg:w="39"/><text x="8.7733%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (37 samples, 0.02%)</title><rect x="8.5245%" y="213" width="0.0227%" height="15" fill="rgb(250,127,30)" fg:x="13902" fg:w="37"/><text x="8.7745%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (37 samples, 0.02%)</title><rect x="8.5245%" y="197" width="0.0227%" height="15" fill="rgb(230,49,44)" fg:x="13902" fg:w="37"/><text x="8.7745%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (53 samples, 0.03%)</title><rect x="8.5159%" y="245" width="0.0325%" height="15" fill="rgb(229,67,23)" fg:x="13888" fg:w="53"/><text x="8.7659%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (21 samples, 0.01%)</title><rect x="8.5484%" y="245" width="0.0129%" height="15" fill="rgb(249,83,47)" fg:x="13941" fg:w="21"/><text x="8.7984%" y="255.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (77 samples, 0.05%)</title><rect x="8.5153%" y="261" width="0.0472%" height="15" fill="rgb(215,43,3)" fg:x="13887" fg:w="77"/><text x="8.7653%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (33 samples, 0.02%)</title><rect x="8.5760%" y="245" width="0.0202%" height="15" fill="rgb(238,154,13)" fg:x="13986" fg:w="33"/><text x="8.8260%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (57 samples, 0.03%)</title><rect x="8.5962%" y="245" width="0.0350%" height="15" fill="rgb(219,56,2)" fg:x="14019" fg:w="57"/><text x="8.8462%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (265 samples, 0.16%)</title><rect x="8.6312%" y="245" width="0.1625%" height="15" fill="rgb(233,0,4)" fg:x="14076" fg:w="265"/><text x="8.8812%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (260 samples, 0.16%)</title><rect x="8.6343%" y="229" width="0.1594%" height="15" fill="rgb(235,30,7)" fg:x="14081" fg:w="260"/><text x="8.8843%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (260 samples, 0.16%)</title><rect x="8.6343%" y="213" width="0.1594%" height="15" fill="rgb(250,79,13)" fg:x="14081" fg:w="260"/><text x="8.8843%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (49 samples, 0.03%)</title><rect x="8.8066%" y="229" width="0.0300%" height="15" fill="rgb(211,146,34)" fg:x="14362" fg:w="49"/><text x="9.0566%" y="239.50"></text></g><g><title>powergraph`&lt;hashbrown::set::IntoIter&lt;K,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (463 samples, 0.28%)</title><rect x="8.5625%" y="261" width="0.2839%" height="15" fill="rgb(228,22,38)" fg:x="13964" fg:w="463"/><text x="8.8125%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (80 samples, 0.05%)</title><rect x="8.7974%" y="245" width="0.0491%" height="15" fill="rgb(235,168,5)" fg:x="14347" fg:w="80"/><text x="9.0474%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (28 samples, 0.02%)</title><rect x="8.8789%" y="229" width="0.0172%" height="15" fill="rgb(221,155,16)" fg:x="14480" fg:w="28"/><text x="9.1289%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (103 samples, 0.06%)</title><rect x="8.8489%" y="261" width="0.0632%" height="15" fill="rgb(215,215,53)" fg:x="14431" fg:w="103"/><text x="9.0989%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (67 samples, 0.04%)</title><rect x="8.8709%" y="245" width="0.0411%" height="15" fill="rgb(223,4,10)" fg:x="14467" fg:w="67"/><text x="9.1209%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (22 samples, 0.01%)</title><rect x="8.8985%" y="229" width="0.0135%" height="15" fill="rgb(234,103,6)" fg:x="14512" fg:w="22"/><text x="9.1485%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (98 samples, 0.06%)</title><rect x="8.9513%" y="229" width="0.0601%" height="15" fill="rgb(227,97,0)" fg:x="14598" fg:w="98"/><text x="9.2013%" y="239.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (29 samples, 0.02%)</title><rect x="9.0114%" y="229" width="0.0178%" height="15" fill="rgb(234,150,53)" fg:x="14696" fg:w="29"/><text x="9.2614%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 samples, 0.03%)</title><rect x="9.0439%" y="213" width="0.0325%" height="15" fill="rgb(228,201,54)" fg:x="14749" fg:w="53"/><text x="9.2939%" y="223.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (18 samples, 0.01%)</title><rect x="9.0764%" y="213" width="0.0110%" height="15" fill="rgb(222,22,37)" fg:x="14802" fg:w="18"/><text x="9.3264%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (119 samples, 0.07%)</title><rect x="9.1076%" y="197" width="0.0730%" height="15" fill="rgb(237,53,32)" fg:x="14853" fg:w="119"/><text x="9.3576%" y="207.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (28 samples, 0.02%)</title><rect x="9.1806%" y="197" width="0.0172%" height="15" fill="rgb(233,25,53)" fg:x="14972" fg:w="28"/><text x="9.4306%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (198 samples, 0.12%)</title><rect x="9.0886%" y="213" width="0.1214%" height="15" fill="rgb(210,40,34)" fg:x="14822" fg:w="198"/><text x="9.3386%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (20 samples, 0.01%)</title><rect x="9.1978%" y="197" width="0.0123%" height="15" fill="rgb(241,220,44)" fg:x="15000" fg:w="20"/><text x="9.4478%" y="207.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (297 samples, 0.18%)</title><rect x="9.0291%" y="229" width="0.1821%" height="15" fill="rgb(235,28,35)" fg:x="14725" fg:w="297"/><text x="9.2791%" y="239.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::new (1,166 samples, 0.71%)</title><rect x="8.4975%" y="277" width="0.7150%" height="15" fill="rgb(210,56,17)" fg:x="13858" fg:w="1166"/><text x="8.7475%" y="287.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (490 samples, 0.30%)</title><rect x="8.9120%" y="261" width="0.3005%" height="15" fill="rgb(224,130,29)" fg:x="14534" fg:w="490"/><text x="9.1620%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (474 samples, 0.29%)</title><rect x="8.9218%" y="245" width="0.2906%" height="15" fill="rgb(235,212,8)" fg:x="14550" fg:w="474"/><text x="9.1718%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.01%)</title><rect x="9.2389%" y="213" width="0.0110%" height="15" fill="rgb(223,33,50)" fg:x="15067" fg:w="18"/><text x="9.4889%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (41 samples, 0.03%)</title><rect x="9.2505%" y="213" width="0.0251%" height="15" fill="rgb(219,149,13)" fg:x="15086" fg:w="41"/><text x="9.5005%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (59 samples, 0.04%)</title><rect x="9.2756%" y="213" width="0.0362%" height="15" fill="rgb(250,156,29)" fg:x="15127" fg:w="59"/><text x="9.5256%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (231 samples, 0.14%)</title><rect x="9.3124%" y="213" width="0.1416%" height="15" fill="rgb(216,193,19)" fg:x="15187" fg:w="231"/><text x="9.5624%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (226 samples, 0.14%)</title><rect x="9.3155%" y="197" width="0.1386%" height="15" fill="rgb(216,135,14)" fg:x="15192" fg:w="226"/><text x="9.5655%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (224 samples, 0.14%)</title><rect x="9.3167%" y="181" width="0.1374%" height="15" fill="rgb(241,47,5)" fg:x="15194" fg:w="224"/><text x="9.5667%" y="191.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (32 samples, 0.02%)</title><rect x="9.4541%" y="213" width="0.0196%" height="15" fill="rgb(233,42,35)" fg:x="15418" fg:w="32"/><text x="9.7041%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (67 samples, 0.04%)</title><rect x="9.4939%" y="197" width="0.0411%" height="15" fill="rgb(231,13,6)" fg:x="15483" fg:w="67"/><text x="9.7439%" y="207.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (33 samples, 0.02%)</title><rect x="9.5350%" y="197" width="0.0202%" height="15" fill="rgb(207,181,40)" fg:x="15550" fg:w="33"/><text x="9.7850%" y="207.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (29 samples, 0.02%)</title><rect x="9.5583%" y="181" width="0.0178%" height="15" fill="rgb(254,173,49)" fg:x="15588" fg:w="29"/><text x="9.8083%" y="191.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (600 samples, 0.37%)</title><rect x="9.2149%" y="245" width="0.3679%" height="15" fill="rgb(221,1,38)" fg:x="15028" fg:w="600"/><text x="9.4649%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (584 samples, 0.36%)</title><rect x="9.2248%" y="229" width="0.3581%" height="15" fill="rgb(206,124,46)" fg:x="15044" fg:w="584"/><text x="9.4748%" y="239.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (168 samples, 0.10%)</title><rect x="9.4798%" y="213" width="0.1030%" height="15" fill="rgb(249,21,11)" fg:x="15460" fg:w="168"/><text x="9.7298%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (45 samples, 0.03%)</title><rect x="9.5553%" y="197" width="0.0276%" height="15" fill="rgb(222,201,40)" fg:x="15583" fg:w="45"/><text x="9.8053%" y="207.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (620 samples, 0.38%)</title><rect x="9.2131%" y="261" width="0.3802%" height="15" fill="rgb(235,61,29)" fg:x="15025" fg:w="620"/><text x="9.4631%" y="271.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::union (1,797 samples, 1.10%)</title><rect x="8.4938%" y="293" width="1.1019%" height="15" fill="rgb(219,207,3)" fg:x="13852" fg:w="1797"/><text x="8.7438%" y="303.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::union (625 samples, 0.38%)</title><rect x="9.2125%" y="277" width="0.3832%" height="15" fill="rgb(222,56,46)" fg:x="15024" fg:w="625"/><text x="9.4625%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (25 samples, 0.02%)</title><rect x="9.5988%" y="245" width="0.0153%" height="15" fill="rgb(239,76,54)" fg:x="15654" fg:w="25"/><text x="9.8488%" y="255.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (27 samples, 0.02%)</title><rect x="9.5988%" y="261" width="0.0166%" height="15" fill="rgb(231,124,27)" fg:x="15654" fg:w="27"/><text x="9.8488%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (22 samples, 0.01%)</title><rect x="9.6153%" y="261" width="0.0135%" height="15" fill="rgb(249,195,6)" fg:x="15681" fg:w="22"/><text x="9.8653%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (50 samples, 0.03%)</title><rect x="9.5988%" y="277" width="0.0307%" height="15" fill="rgb(237,174,47)" fg:x="15654" fg:w="50"/><text x="9.8488%" y="287.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::from_iter (56 samples, 0.03%)</title><rect x="9.5957%" y="293" width="0.0343%" height="15" fill="rgb(206,201,31)" fg:x="15649" fg:w="56"/><text x="9.8457%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (35 samples, 0.02%)</title><rect x="9.6356%" y="277" width="0.0215%" height="15" fill="rgb(231,57,52)" fg:x="15714" fg:w="35"/><text x="9.8856%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (23 samples, 0.01%)</title><rect x="9.6662%" y="261" width="0.0141%" height="15" fill="rgb(248,177,22)" fg:x="15764" fg:w="23"/><text x="9.9162%" y="271.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (28 samples, 0.02%)</title><rect x="9.6656%" y="277" width="0.0172%" height="15" fill="rgb(215,211,37)" fg:x="15763" fg:w="28"/><text x="9.9156%" y="287.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,093 samples, 1.90%)</title><rect x="7.7954%" y="309" width="1.8966%" height="15" fill="rgb(241,128,51)" fg:x="12713" fg:w="3093"/><text x="8.0454%" y="319.50">p..</text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::iter (94 samples, 0.06%)</title><rect x="9.6344%" y="293" width="0.0576%" height="15" fill="rgb(227,165,31)" fg:x="15712" fg:w="94"/><text x="9.8844%" y="303.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (82 samples, 0.05%)</title><rect x="9.6920%" y="309" width="0.0503%" height="15" fill="rgb(228,167,24)" fg:x="15806" fg:w="82"/><text x="9.9420%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (67 samples, 0.04%)</title><rect x="9.7012%" y="293" width="0.0411%" height="15" fill="rgb(228,143,12)" fg:x="15821" fg:w="67"/><text x="9.9512%" y="303.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (9,541 samples, 5.85%)</title><rect x="3.9017%" y="325" width="5.8504%" height="15" fill="rgb(249,149,8)" fg:x="6363" fg:w="9541"/><text x="4.1517%" y="335.50">powergr..</text></g><g><title>powergraph`&lt;powergraph::sets::SetIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (80 samples, 0.05%)</title><rect x="9.8005%" y="277" width="0.0491%" height="15" fill="rgb(243,35,44)" fg:x="15983" fg:w="80"/><text x="10.0505%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (35 samples, 0.02%)</title><rect x="9.8281%" y="261" width="0.0215%" height="15" fill="rgb(246,89,9)" fg:x="16028" fg:w="35"/><text x="10.0781%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (34 samples, 0.02%)</title><rect x="9.8287%" y="245" width="0.0208%" height="15" fill="rgb(233,213,13)" fg:x="16029" fg:w="34"/><text x="10.0787%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (33 samples, 0.02%)</title><rect x="9.8294%" y="229" width="0.0202%" height="15" fill="rgb(233,141,41)" fg:x="16030" fg:w="33"/><text x="10.0794%" y="239.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (33 samples, 0.02%)</title><rect x="9.8502%" y="277" width="0.0202%" height="15" fill="rgb(239,167,4)" fg:x="16064" fg:w="33"/><text x="10.1002%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.01%)</title><rect x="9.9078%" y="229" width="0.0123%" height="15" fill="rgb(209,217,16)" fg:x="16158" fg:w="20"/><text x="10.1578%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (47 samples, 0.03%)</title><rect x="9.9219%" y="229" width="0.0288%" height="15" fill="rgb(219,88,35)" fg:x="16181" fg:w="47"/><text x="10.1719%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (86 samples, 0.05%)</title><rect x="9.9508%" y="229" width="0.0527%" height="15" fill="rgb(220,193,23)" fg:x="16228" fg:w="86"/><text x="10.2008%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (90 samples, 0.06%)</title><rect x="10.0035%" y="229" width="0.0552%" height="15" fill="rgb(230,90,52)" fg:x="16314" fg:w="90"/><text x="10.2535%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (78 samples, 0.05%)</title><rect x="10.0109%" y="213" width="0.0478%" height="15" fill="rgb(252,106,19)" fg:x="16326" fg:w="78"/><text x="10.2609%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (77 samples, 0.05%)</title><rect x="10.0115%" y="197" width="0.0472%" height="15" fill="rgb(206,74,20)" fg:x="16327" fg:w="77"/><text x="10.2615%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (271 samples, 0.17%)</title><rect x="9.8980%" y="245" width="0.1662%" height="15" fill="rgb(230,138,44)" fg:x="16142" fg:w="271"/><text x="10.1480%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (20 samples, 0.01%)</title><rect x="10.0642%" y="245" width="0.0123%" height="15" fill="rgb(235,182,43)" fg:x="16413" fg:w="20"/><text x="10.3142%" y="255.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (303 samples, 0.19%)</title><rect x="9.8913%" y="261" width="0.1858%" height="15" fill="rgb(242,16,51)" fg:x="16131" fg:w="303"/><text x="10.1413%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (44 samples, 0.03%)</title><rect x="10.1102%" y="229" width="0.0270%" height="15" fill="rgb(248,9,4)" fg:x="16488" fg:w="44"/><text x="10.3602%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (124 samples, 0.08%)</title><rect x="10.0808%" y="261" width="0.0760%" height="15" fill="rgb(210,31,22)" fg:x="16440" fg:w="124"/><text x="10.3308%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (92 samples, 0.06%)</title><rect x="10.1004%" y="245" width="0.0564%" height="15" fill="rgb(239,54,39)" fg:x="16472" fg:w="92"/><text x="10.3504%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (23 samples, 0.01%)</title><rect x="10.1427%" y="229" width="0.0141%" height="15" fill="rgb(230,99,41)" fg:x="16541" fg:w="23"/><text x="10.3927%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (32 samples, 0.02%)</title><rect x="10.1832%" y="229" width="0.0196%" height="15" fill="rgb(253,106,12)" fg:x="16607" fg:w="32"/><text x="10.4332%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (32 samples, 0.02%)</title><rect x="10.1832%" y="213" width="0.0196%" height="15" fill="rgb(213,46,41)" fg:x="16607" fg:w="32"/><text x="10.4332%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (32 samples, 0.02%)</title><rect x="10.1832%" y="197" width="0.0196%" height="15" fill="rgb(215,133,35)" fg:x="16607" fg:w="32"/><text x="10.4332%" y="207.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (37 samples, 0.02%)</title><rect x="10.2028%" y="229" width="0.0227%" height="15" fill="rgb(213,28,5)" fg:x="16639" fg:w="37"/><text x="10.4528%" y="239.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (32 samples, 0.02%)</title><rect x="10.2316%" y="229" width="0.0196%" height="15" fill="rgb(215,77,49)" fg:x="16686" fg:w="32"/><text x="10.4816%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (148 samples, 0.09%)</title><rect x="10.1611%" y="245" width="0.0908%" height="15" fill="rgb(248,100,22)" fg:x="16571" fg:w="148"/><text x="10.4111%" y="255.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (158 samples, 0.10%)</title><rect x="10.1568%" y="261" width="0.0969%" height="15" fill="rgb(208,67,9)" fg:x="16564" fg:w="158"/><text x="10.4068%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="10.2690%" y="229" width="0.0153%" height="15" fill="rgb(219,133,21)" fg:x="16747" fg:w="25"/><text x="10.5190%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (25 samples, 0.02%)</title><rect x="10.2690%" y="213" width="0.0153%" height="15" fill="rgb(246,46,29)" fg:x="16747" fg:w="25"/><text x="10.5190%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (24 samples, 0.01%)</title><rect x="10.2696%" y="197" width="0.0147%" height="15" fill="rgb(246,185,52)" fg:x="16748" fg:w="24"/><text x="10.5196%" y="207.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (57 samples, 0.03%)</title><rect x="10.2561%" y="245" width="0.0350%" height="15" fill="rgb(252,136,11)" fg:x="16726" fg:w="57"/><text x="10.5061%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (26 samples, 0.02%)</title><rect x="10.3021%" y="229" width="0.0159%" height="15" fill="rgb(219,138,53)" fg:x="16801" fg:w="26"/><text x="10.5521%" y="239.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (39 samples, 0.02%)</title><rect x="10.2997%" y="245" width="0.0239%" height="15" fill="rgb(211,51,23)" fg:x="16797" fg:w="39"/><text x="10.5497%" y="255.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (756 samples, 0.46%)</title><rect x="9.8704%" y="277" width="0.4636%" height="15" fill="rgb(247,221,28)" fg:x="16097" fg:w="756"/><text x="10.1204%" y="287.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::iter (131 samples, 0.08%)</title><rect x="10.2537%" y="261" width="0.0803%" height="15" fill="rgb(251,222,45)" fg:x="16722" fg:w="131"/><text x="10.5037%" y="271.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (888 samples, 0.54%)</title><rect x="9.7901%" y="293" width="0.5445%" height="15" fill="rgb(217,162,53)" fg:x="15966" fg:w="888"/><text x="10.0401%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_free (19 samples, 0.01%)</title><rect x="10.3499%" y="261" width="0.0117%" height="15" fill="rgb(229,93,14)" fg:x="16879" fg:w="19"/><text x="10.5999%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (19 samples, 0.01%)</title><rect x="10.3616%" y="261" width="0.0117%" height="15" fill="rgb(209,67,49)" fg:x="16898" fg:w="19"/><text x="10.6116%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.01%)</title><rect x="10.4131%" y="245" width="0.0135%" height="15" fill="rgb(213,87,29)" fg:x="16982" fg:w="22"/><text x="10.6631%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (33 samples, 0.02%)</title><rect x="10.4272%" y="245" width="0.0202%" height="15" fill="rgb(205,151,52)" fg:x="17005" fg:w="33"/><text x="10.6772%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (130 samples, 0.08%)</title><rect x="10.4530%" y="245" width="0.0797%" height="15" fill="rgb(253,215,39)" fg:x="17047" fg:w="130"/><text x="10.7030%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (128 samples, 0.08%)</title><rect x="10.4542%" y="229" width="0.0785%" height="15" fill="rgb(221,220,41)" fg:x="17049" fg:w="128"/><text x="10.7042%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (128 samples, 0.08%)</title><rect x="10.4542%" y="213" width="0.0785%" height="15" fill="rgb(218,133,21)" fg:x="17049" fg:w="128"/><text x="10.7042%" y="223.50"></text></g><g><title>powergraph`&lt;powergraph::sets::SetIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (239 samples, 0.15%)</title><rect x="10.3886%" y="261" width="0.1466%" height="15" fill="rgb(221,193,43)" fg:x="16942" fg:w="239"/><text x="10.6386%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (24 samples, 0.01%)</title><rect x="10.5486%" y="245" width="0.0147%" height="15" fill="rgb(240,128,52)" fg:x="17203" fg:w="24"/><text x="10.7986%" y="255.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (45 samples, 0.03%)</title><rect x="10.5394%" y="261" width="0.0276%" height="15" fill="rgb(253,114,12)" fg:x="17188" fg:w="45"/><text x="10.7894%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (33 samples, 0.02%)</title><rect x="10.5971%" y="245" width="0.0202%" height="15" fill="rgb(215,223,47)" fg:x="17282" fg:w="33"/><text x="10.8471%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (31 samples, 0.02%)</title><rect x="10.5983%" y="229" width="0.0190%" height="15" fill="rgb(248,225,23)" fg:x="17284" fg:w="31"/><text x="10.8483%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (29 samples, 0.02%)</title><rect x="10.5995%" y="213" width="0.0178%" height="15" fill="rgb(250,108,0)" fg:x="17286" fg:w="29"/><text x="10.8495%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.01%)</title><rect x="10.6406%" y="213" width="0.0141%" height="15" fill="rgb(228,208,7)" fg:x="17353" fg:w="23"/><text x="10.8906%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (65 samples, 0.04%)</title><rect x="10.6565%" y="213" width="0.0399%" height="15" fill="rgb(244,45,10)" fg:x="17379" fg:w="65"/><text x="10.9065%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (71 samples, 0.04%)</title><rect x="10.6964%" y="213" width="0.0435%" height="15" fill="rgb(207,125,25)" fg:x="17444" fg:w="71"/><text x="10.9464%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (67 samples, 0.04%)</title><rect x="10.7399%" y="213" width="0.0411%" height="15" fill="rgb(210,195,18)" fg:x="17515" fg:w="67"/><text x="10.9899%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (57 samples, 0.03%)</title><rect x="10.7461%" y="197" width="0.0350%" height="15" fill="rgb(249,80,12)" fg:x="17525" fg:w="57"/><text x="10.9961%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (56 samples, 0.03%)</title><rect x="10.7467%" y="181" width="0.0343%" height="15" fill="rgb(221,65,9)" fg:x="17526" fg:w="56"/><text x="10.9967%" y="191.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (251 samples, 0.15%)</title><rect x="10.6302%" y="229" width="0.1539%" height="15" fill="rgb(235,49,36)" fg:x="17336" fg:w="251"/><text x="10.8802%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.01%)</title><rect x="10.7871%" y="213" width="0.0129%" height="15" fill="rgb(225,32,20)" fg:x="17592" fg:w="21"/><text x="11.0371%" y="223.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (305 samples, 0.19%)</title><rect x="10.6173%" y="245" width="0.1870%" height="15" fill="rgb(215,141,46)" fg:x="17315" fg:w="305"/><text x="10.8673%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (33 samples, 0.02%)</title><rect x="10.7841%" y="229" width="0.0202%" height="15" fill="rgb(250,160,47)" fg:x="17587" fg:w="33"/><text x="11.0341%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (19 samples, 0.01%)</title><rect x="10.8307%" y="213" width="0.0117%" height="15" fill="rgb(216,222,40)" fg:x="17663" fg:w="19"/><text x="11.0807%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (54 samples, 0.03%)</title><rect x="10.8104%" y="245" width="0.0331%" height="15" fill="rgb(234,217,39)" fg:x="17630" fg:w="54"/><text x="11.0604%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (44 samples, 0.03%)</title><rect x="10.8166%" y="229" width="0.0270%" height="15" fill="rgb(207,178,40)" fg:x="17640" fg:w="44"/><text x="11.0666%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (58 samples, 0.04%)</title><rect x="10.8724%" y="213" width="0.0356%" height="15" fill="rgb(221,136,13)" fg:x="17731" fg:w="58"/><text x="11.1224%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (57 samples, 0.03%)</title><rect x="10.8730%" y="197" width="0.0350%" height="15" fill="rgb(249,199,10)" fg:x="17732" fg:w="57"/><text x="11.1230%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (57 samples, 0.03%)</title><rect x="10.8730%" y="181" width="0.0350%" height="15" fill="rgb(249,222,13)" fg:x="17732" fg:w="57"/><text x="11.1230%" y="191.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (49 samples, 0.03%)</title><rect x="10.9079%" y="213" width="0.0300%" height="15" fill="rgb(244,185,38)" fg:x="17789" fg:w="49"/><text x="11.1579%" y="223.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (19 samples, 0.01%)</title><rect x="10.9386%" y="213" width="0.0117%" height="15" fill="rgb(236,202,9)" fg:x="17839" fg:w="19"/><text x="11.1886%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.01%)</title><rect x="10.9576%" y="197" width="0.0104%" height="15" fill="rgb(250,229,37)" fg:x="17870" fg:w="17"/><text x="11.2076%" y="207.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (30 samples, 0.02%)</title><rect x="10.9503%" y="213" width="0.0184%" height="15" fill="rgb(206,174,23)" fg:x="17858" fg:w="30"/><text x="11.2003%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (195 samples, 0.12%)</title><rect x="10.8497%" y="229" width="0.1196%" height="15" fill="rgb(211,33,43)" fg:x="17694" fg:w="195"/><text x="11.0997%" y="239.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (209 samples, 0.13%)</title><rect x="10.8436%" y="245" width="0.1282%" height="15" fill="rgb(245,58,50)" fg:x="17684" fg:w="209"/><text x="11.0936%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (76 samples, 0.05%)</title><rect x="10.9877%" y="213" width="0.0466%" height="15" fill="rgb(244,68,36)" fg:x="17919" fg:w="76"/><text x="11.2377%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (76 samples, 0.05%)</title><rect x="10.9877%" y="197" width="0.0466%" height="15" fill="rgb(232,229,15)" fg:x="17919" fg:w="76"/><text x="11.2377%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (75 samples, 0.05%)</title><rect x="10.9883%" y="181" width="0.0460%" height="15" fill="rgb(254,30,23)" fg:x="17920" fg:w="75"/><text x="11.2383%" y="191.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (117 samples, 0.07%)</title><rect x="10.9772%" y="229" width="0.0717%" height="15" fill="rgb(235,160,14)" fg:x="17902" fg:w="117"/><text x="11.2272%" y="239.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (24 samples, 0.01%)</title><rect x="11.0343%" y="213" width="0.0147%" height="15" fill="rgb(212,155,44)" fg:x="17995" fg:w="24"/><text x="11.2843%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (23 samples, 0.01%)</title><rect x="11.0349%" y="197" width="0.0141%" height="15" fill="rgb(226,2,50)" fg:x="17996" fg:w="23"/><text x="11.2849%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (23 samples, 0.01%)</title><rect x="11.0349%" y="181" width="0.0141%" height="15" fill="rgb(234,177,6)" fg:x="17996" fg:w="23"/><text x="11.2849%" y="191.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (32 samples, 0.02%)</title><rect x="11.0729%" y="197" width="0.0196%" height="15" fill="rgb(217,24,9)" fg:x="18058" fg:w="32"/><text x="11.3229%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (31 samples, 0.02%)</title><rect x="11.0735%" y="181" width="0.0190%" height="15" fill="rgb(220,13,46)" fg:x="18059" fg:w="31"/><text x="11.3235%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (31 samples, 0.02%)</title><rect x="11.0735%" y="165" width="0.0190%" height="15" fill="rgb(239,221,27)" fg:x="18059" fg:w="31"/><text x="11.3235%" y="175.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (51 samples, 0.03%)</title><rect x="11.0619%" y="213" width="0.0313%" height="15" fill="rgb(222,198,25)" fg:x="18040" fg:w="51"/><text x="11.3119%" y="223.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (74 samples, 0.05%)</title><rect x="11.0588%" y="229" width="0.0454%" height="15" fill="rgb(211,99,13)" fg:x="18035" fg:w="74"/><text x="11.3088%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (18 samples, 0.01%)</title><rect x="11.0931%" y="213" width="0.0110%" height="15" fill="rgb(232,111,31)" fg:x="18091" fg:w="18"/><text x="11.3431%" y="223.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (891 samples, 0.55%)</title><rect x="10.5670%" y="261" width="0.5463%" height="15" fill="rgb(245,82,37)" fg:x="17233" fg:w="891"/><text x="10.8170%" y="271.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::iter (231 samples, 0.14%)</title><rect x="10.9717%" y="245" width="0.1416%" height="15" fill="rgb(227,149,46)" fg:x="17893" fg:w="231"/><text x="11.2217%" y="255.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (38 samples, 0.02%)</title><rect x="11.1152%" y="261" width="0.0233%" height="15" fill="rgb(218,36,50)" fg:x="18127" fg:w="38"/><text x="11.3652%" y="271.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (32 samples, 0.02%)</title><rect x="11.1189%" y="245" width="0.0196%" height="15" fill="rgb(226,80,48)" fg:x="18133" fg:w="32"/><text x="11.3689%" y="255.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::map::Map&lt;powergraph::sets::SetIterator&lt;alloc::string::String&gt;,powergraph::edge_repository::EdgeRepository::subgraph::{{closure}}::{{closure}}&gt;&gt;&gt; (44 samples, 0.03%)</title><rect x="11.1385%" y="261" width="0.0270%" height="15" fill="rgb(238,224,15)" fg:x="18165" fg:w="44"/><text x="11.3885%" y="271.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (33 samples, 0.02%)</title><rect x="11.1452%" y="245" width="0.0202%" height="15" fill="rgb(241,136,10)" fg:x="18176" fg:w="33"/><text x="11.3952%" y="255.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (23 samples, 0.01%)</title><rect x="11.1514%" y="229" width="0.0141%" height="15" fill="rgb(208,32,45)" fg:x="18186" fg:w="23"/><text x="11.4014%" y="239.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,342 samples, 0.82%)</title><rect x="10.3438%" y="277" width="0.8229%" height="15" fill="rgb(207,135,9)" fg:x="16869" fg:w="1342"/><text x="10.5938%" y="287.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (17 samples, 0.01%)</title><rect x="11.1673%" y="277" width="0.0104%" height="15" fill="rgb(206,86,44)" fg:x="18212" fg:w="17"/><text x="11.4173%" y="287.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1,380 samples, 0.85%)</title><rect x="10.3346%" y="293" width="0.8462%" height="15" fill="rgb(245,177,15)" fg:x="16854" fg:w="1380"/><text x="10.5846%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,272 samples, 1.39%)</title><rect x="9.7889%" y="309" width="1.3932%" height="15" fill="rgb(206,64,50)" fg:x="15964" fg:w="2272"/><text x="10.0389%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.02%)</title><rect x="11.2164%" y="277" width="0.0184%" height="15" fill="rgb(234,36,40)" fg:x="18292" fg:w="30"/><text x="11.4664%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (63 samples, 0.04%)</title><rect x="11.2384%" y="277" width="0.0386%" height="15" fill="rgb(213,64,8)" fg:x="18328" fg:w="63"/><text x="11.4884%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (122 samples, 0.07%)</title><rect x="11.2771%" y="277" width="0.0748%" height="15" fill="rgb(210,75,36)" fg:x="18391" fg:w="122"/><text x="11.5271%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (193 samples, 0.12%)</title><rect x="11.3611%" y="261" width="0.1183%" height="15" fill="rgb(229,88,21)" fg:x="18528" fg:w="193"/><text x="11.6111%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (191 samples, 0.12%)</title><rect x="11.3623%" y="245" width="0.1171%" height="15" fill="rgb(252,204,47)" fg:x="18530" fg:w="191"/><text x="11.6123%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (209 samples, 0.13%)</title><rect x="11.3519%" y="277" width="0.1282%" height="15" fill="rgb(208,77,27)" fg:x="18513" fg:w="209"/><text x="11.6019%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (476 samples, 0.29%)</title><rect x="11.1949%" y="293" width="0.2919%" height="15" fill="rgb(221,76,26)" fg:x="18257" fg:w="476"/><text x="11.4449%" y="303.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (520 samples, 0.32%)</title><rect x="11.1820%" y="309" width="0.3189%" height="15" fill="rgb(225,139,18)" fg:x="18236" fg:w="520"/><text x="11.4320%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (23 samples, 0.01%)</title><rect x="11.4868%" y="293" width="0.0141%" height="15" fill="rgb(230,137,11)" fg:x="18733" fg:w="23"/><text x="11.7368%" y="303.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;powergraph::clusters::Cluster&gt; (68 samples, 0.04%)</title><rect x="11.5033%" y="309" width="0.0417%" height="15" fill="rgb(212,28,1)" fg:x="18760" fg:w="68"/><text x="11.7533%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (59 samples, 0.04%)</title><rect x="11.5089%" y="293" width="0.0362%" height="15" fill="rgb(248,164,17)" fg:x="18769" fg:w="59"/><text x="11.7589%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (37 samples, 0.02%)</title><rect x="11.5224%" y="277" width="0.0227%" height="15" fill="rgb(222,171,42)" fg:x="18791" fg:w="37"/><text x="11.7724%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (60 samples, 0.04%)</title><rect x="11.5518%" y="293" width="0.0368%" height="15" fill="rgb(243,84,45)" fg:x="18839" fg:w="60"/><text x="11.8018%" y="303.50"></text></g><g><title>powergraph`DYLD-STUB$$free (21 samples, 0.01%)</title><rect x="11.6057%" y="293" width="0.0129%" height="15" fill="rgb(252,49,23)" fg:x="18927" fg:w="21"/><text x="11.8557%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (136 samples, 0.08%)</title><rect x="11.6591%" y="277" width="0.0834%" height="15" fill="rgb(215,19,7)" fg:x="19014" fg:w="136"/><text x="11.9091%" y="287.50"></text></g><g><title>libsystem_platform.dylib`__bzero (23 samples, 0.01%)</title><rect x="11.7425%" y="277" width="0.0141%" height="15" fill="rgb(238,81,41)" fg:x="19150" fg:w="23"/><text x="11.9925%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (87 samples, 0.05%)</title><rect x="11.7566%" y="277" width="0.0533%" height="15" fill="rgb(210,199,37)" fg:x="19173" fg:w="87"/><text x="12.0066%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (448 samples, 0.27%)</title><rect x="11.5518%" y="309" width="0.2747%" height="15" fill="rgb(244,192,49)" fg:x="18839" fg:w="448"/><text x="11.8018%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (334 samples, 0.20%)</title><rect x="11.6217%" y="293" width="0.2048%" height="15" fill="rgb(226,211,11)" fg:x="18953" fg:w="334"/><text x="11.8717%" y="303.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;(powergraph::Edge,())&gt; (18 samples, 0.01%)</title><rect x="11.8155%" y="277" width="0.0110%" height="15" fill="rgb(236,162,54)" fg:x="19269" fg:w="18"/><text x="12.0655%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (65 samples, 0.04%)</title><rect x="11.8388%" y="293" width="0.0399%" height="15" fill="rgb(220,229,9)" fg:x="19307" fg:w="65"/><text x="12.0888%" y="303.50"></text></g><g><title>powergraph`powergraph::cluster_repository::ClusterRepository::get (97 samples, 0.06%)</title><rect x="11.8265%" y="309" width="0.0595%" height="15" fill="rgb(250,87,22)" fg:x="19287" fg:w="97"/><text x="12.0765%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (22 samples, 0.01%)</title><rect x="11.9038%" y="277" width="0.0135%" height="15" fill="rgb(239,43,17)" fg:x="19413" fg:w="22"/><text x="12.1538%" y="287.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (20 samples, 0.01%)</title><rect x="11.9295%" y="277" width="0.0123%" height="15" fill="rgb(231,177,25)" fg:x="19455" fg:w="20"/><text x="12.1795%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.01%)</title><rect x="11.9313%" y="261" width="0.0104%" height="15" fill="rgb(219,179,1)" fg:x="19458" fg:w="17"/><text x="12.1813%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (122 samples, 0.07%)</title><rect x="11.9571%" y="245" width="0.0748%" height="15" fill="rgb(238,219,53)" fg:x="19500" fg:w="122"/><text x="12.2071%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (120 samples, 0.07%)</title><rect x="11.9583%" y="229" width="0.0736%" height="15" fill="rgb(232,167,36)" fg:x="19502" fg:w="120"/><text x="12.2083%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (119 samples, 0.07%)</title><rect x="11.9589%" y="213" width="0.0730%" height="15" fill="rgb(244,19,51)" fg:x="19503" fg:w="119"/><text x="12.2089%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (145 samples, 0.09%)</title><rect x="11.9436%" y="261" width="0.0889%" height="15" fill="rgb(224,6,22)" fg:x="19478" fg:w="145"/><text x="12.1936%" y="271.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (179 samples, 0.11%)</title><rect x="11.9418%" y="277" width="0.1098%" height="15" fill="rgb(224,145,5)" fg:x="19475" fg:w="179"/><text x="12.1918%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (31 samples, 0.02%)</title><rect x="12.0325%" y="261" width="0.0190%" height="15" fill="rgb(234,130,49)" fg:x="19623" fg:w="31"/><text x="12.2825%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (23 samples, 0.01%)</title><rect x="12.0374%" y="245" width="0.0141%" height="15" fill="rgb(254,6,2)" fg:x="19631" fg:w="23"/><text x="12.2874%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.01%)</title><rect x="12.0669%" y="261" width="0.0135%" height="15" fill="rgb(208,96,46)" fg:x="19679" fg:w="22"/><text x="12.3169%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (59 samples, 0.04%)</title><rect x="12.0828%" y="261" width="0.0362%" height="15" fill="rgb(239,3,39)" fg:x="19705" fg:w="59"/><text x="12.3328%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (89 samples, 0.05%)</title><rect x="12.1190%" y="261" width="0.0546%" height="15" fill="rgb(233,210,1)" fg:x="19764" fg:w="89"/><text x="12.3690%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (598 samples, 0.37%)</title><rect x="12.1736%" y="261" width="0.3667%" height="15" fill="rgb(244,137,37)" fg:x="19853" fg:w="598"/><text x="12.4236%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (591 samples, 0.36%)</title><rect x="12.1778%" y="245" width="0.3624%" height="15" fill="rgb(240,136,2)" fg:x="19860" fg:w="591"/><text x="12.4278%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (586 samples, 0.36%)</title><rect x="12.1809%" y="229" width="0.3593%" height="15" fill="rgb(239,18,37)" fg:x="19865" fg:w="586"/><text x="12.4309%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (117 samples, 0.07%)</title><rect x="12.5629%" y="245" width="0.0717%" height="15" fill="rgb(218,185,22)" fg:x="20488" fg:w="117"/><text x="12.8129%" y="255.50"></text></g><g><title>powergraph`&lt;hashbrown::set::IntoIter&lt;K,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,005 samples, 0.62%)</title><rect x="12.0515%" y="277" width="0.6163%" height="15" fill="rgb(225,218,4)" fg:x="19654" fg:w="1005"/><text x="12.3015%" y="287.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (200 samples, 0.12%)</title><rect x="12.5451%" y="261" width="0.1226%" height="15" fill="rgb(230,182,32)" fg:x="20459" fg:w="200"/><text x="12.7951%" y="271.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (54 samples, 0.03%)</title><rect x="12.6347%" y="245" width="0.0331%" height="15" fill="rgb(242,56,43)" fg:x="20605" fg:w="54"/><text x="12.8847%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (40 samples, 0.02%)</title><rect x="12.6776%" y="261" width="0.0245%" height="15" fill="rgb(233,99,24)" fg:x="20675" fg:w="40"/><text x="12.9276%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (105 samples, 0.06%)</title><rect x="12.7493%" y="245" width="0.0644%" height="15" fill="rgb(234,209,42)" fg:x="20792" fg:w="105"/><text x="12.9993%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (47 samples, 0.03%)</title><rect x="12.8192%" y="245" width="0.0288%" height="15" fill="rgb(227,7,12)" fg:x="20906" fg:w="47"/><text x="13.0692%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (280 samples, 0.17%)</title><rect x="12.6770%" y="277" width="0.1717%" height="15" fill="rgb(245,203,43)" fg:x="20674" fg:w="280"/><text x="12.9270%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (197 samples, 0.12%)</title><rect x="12.7279%" y="261" width="0.1208%" height="15" fill="rgb(238,205,33)" fg:x="20757" fg:w="197"/><text x="12.9779%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (270 samples, 0.17%)</title><rect x="12.9241%" y="245" width="0.1656%" height="15" fill="rgb(231,56,7)" fg:x="21077" fg:w="270"/><text x="13.1741%" y="255.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (56 samples, 0.03%)</title><rect x="13.0897%" y="245" width="0.0343%" height="15" fill="rgb(244,186,29)" fg:x="21347" fg:w="56"/><text x="13.3397%" y="255.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (136 samples, 0.08%)</title><rect x="13.1706%" y="229" width="0.0834%" height="15" fill="rgb(234,111,31)" fg:x="21479" fg:w="136"/><text x="13.4206%" y="239.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (38 samples, 0.02%)</title><rect x="13.2552%" y="229" width="0.0233%" height="15" fill="rgb(241,149,10)" fg:x="21617" fg:w="38"/><text x="13.5052%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (231 samples, 0.14%)</title><rect x="13.3202%" y="213" width="0.1416%" height="15" fill="rgb(249,206,44)" fg:x="21723" fg:w="231"/><text x="13.5702%" y="223.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (56 samples, 0.03%)</title><rect x="13.4631%" y="213" width="0.0343%" height="15" fill="rgb(251,153,30)" fg:x="21956" fg:w="56"/><text x="13.7131%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (48 samples, 0.03%)</title><rect x="13.4986%" y="197" width="0.0294%" height="15" fill="rgb(239,152,38)" fg:x="22014" fg:w="48"/><text x="13.7486%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (48 samples, 0.03%)</title><rect x="13.4986%" y="181" width="0.0294%" height="15" fill="rgb(249,139,47)" fg:x="22014" fg:w="48"/><text x="13.7486%" y="191.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (414 samples, 0.25%)</title><rect x="13.2791%" y="229" width="0.2539%" height="15" fill="rgb(244,64,35)" fg:x="21656" fg:w="414"/><text x="13.5291%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (58 samples, 0.04%)</title><rect x="13.4974%" y="213" width="0.0356%" height="15" fill="rgb(216,46,15)" fg:x="22012" fg:w="58"/><text x="13.7474%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (1,097 samples, 0.67%)</title><rect x="12.8609%" y="261" width="0.6727%" height="15" fill="rgb(250,74,19)" fg:x="20974" fg:w="1097"/><text x="13.1109%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (668 samples, 0.41%)</title><rect x="13.1240%" y="245" width="0.4096%" height="15" fill="rgb(249,42,33)" fg:x="21403" fg:w="668"/><text x="13.3740%" y="255.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (1,119 samples, 0.69%)</title><rect x="12.8487%" y="277" width="0.6862%" height="15" fill="rgb(242,149,17)" fg:x="20954" fg:w="1119"/><text x="13.0987%" y="287.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::new (2,679 samples, 1.64%)</title><rect x="11.8927%" y="293" width="1.6427%" height="15" fill="rgb(244,29,21)" fg:x="19395" fg:w="2679"/><text x="12.1427%" y="303.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (27 samples, 0.02%)</title><rect x="13.5526%" y="245" width="0.0166%" height="15" fill="rgb(220,130,37)" fg:x="22102" fg:w="27"/><text x="13.8026%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (38 samples, 0.02%)</title><rect x="13.6152%" y="229" width="0.0233%" height="15" fill="rgb(211,67,2)" fg:x="22204" fg:w="38"/><text x="13.8652%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (75 samples, 0.05%)</title><rect x="13.6409%" y="229" width="0.0460%" height="15" fill="rgb(235,68,52)" fg:x="22246" fg:w="75"/><text x="13.8909%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (138 samples, 0.08%)</title><rect x="13.6875%" y="229" width="0.0846%" height="15" fill="rgb(246,142,3)" fg:x="22322" fg:w="138"/><text x="13.9375%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (619 samples, 0.38%)</title><rect x="13.7813%" y="213" width="0.3796%" height="15" fill="rgb(241,25,7)" fg:x="22475" fg:w="619"/><text x="14.0313%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (617 samples, 0.38%)</title><rect x="13.7826%" y="197" width="0.3783%" height="15" fill="rgb(242,119,39)" fg:x="22477" fg:w="617"/><text x="14.0326%" y="207.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (637 samples, 0.39%)</title><rect x="13.7721%" y="229" width="0.3906%" height="15" fill="rgb(241,98,45)" fg:x="22460" fg:w="637"/><text x="14.0221%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (66 samples, 0.04%)</title><rect x="14.1627%" y="229" width="0.0405%" height="15" fill="rgb(254,28,30)" fg:x="23097" fg:w="66"/><text x="14.4127%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (167 samples, 0.10%)</title><rect x="14.2731%" y="213" width="0.1024%" height="15" fill="rgb(241,142,54)" fg:x="23277" fg:w="167"/><text x="14.5231%" y="223.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (83 samples, 0.05%)</title><rect x="14.3767%" y="213" width="0.0509%" height="15" fill="rgb(222,85,15)" fg:x="23446" fg:w="83"/><text x="14.6267%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (71 samples, 0.04%)</title><rect x="14.4423%" y="197" width="0.0435%" height="15" fill="rgb(210,85,47)" fg:x="23553" fg:w="71"/><text x="14.6923%" y="207.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,563 samples, 0.96%)</title><rect x="13.5416%" y="261" width="0.9584%" height="15" fill="rgb(224,206,25)" fg:x="22084" fg:w="1563"/><text x="13.7916%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (1,518 samples, 0.93%)</title><rect x="13.5692%" y="245" width="0.9308%" height="15" fill="rgb(243,201,19)" fg:x="22129" fg:w="1518"/><text x="13.8192%" y="255.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (457 samples, 0.28%)</title><rect x="14.2198%" y="229" width="0.2802%" height="15" fill="rgb(236,59,4)" fg:x="23190" fg:w="457"/><text x="14.4698%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (118 samples, 0.07%)</title><rect x="14.4276%" y="213" width="0.0724%" height="15" fill="rgb(254,179,45)" fg:x="23529" fg:w="118"/><text x="14.6776%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (50 samples, 0.03%)</title><rect x="14.5024%" y="261" width="0.0307%" height="15" fill="rgb(226,14,10)" fg:x="23651" fg:w="50"/><text x="14.7524%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (28 samples, 0.02%)</title><rect x="14.5159%" y="245" width="0.0172%" height="15" fill="rgb(244,27,41)" fg:x="23673" fg:w="28"/><text x="14.7659%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.01%)</title><rect x="14.5208%" y="229" width="0.0123%" height="15" fill="rgb(235,35,32)" fg:x="23681" fg:w="20"/><text x="14.7708%" y="239.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,626 samples, 1.00%)</title><rect x="13.5367%" y="277" width="0.9970%" height="15" fill="rgb(218,68,31)" fg:x="22076" fg:w="1626"/><text x="13.7867%" y="287.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::union (4,329 samples, 2.65%)</title><rect x="11.8860%" y="309" width="2.6545%" height="15" fill="rgb(207,120,37)" fg:x="19384" fg:w="4329"/><text x="12.1360%" y="319.50">po..</text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::union (1,638 samples, 1.00%)</title><rect x="13.5361%" y="293" width="1.0044%" height="15" fill="rgb(227,98,0)" fg:x="22075" fg:w="1638"/><text x="13.7861%" y="303.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (63 samples, 0.04%)</title><rect x="14.5588%" y="261" width="0.0386%" height="15" fill="rgb(207,7,3)" fg:x="23743" fg:w="63"/><text x="14.8088%" y="271.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (78 samples, 0.05%)</title><rect x="14.5515%" y="277" width="0.0478%" height="15" fill="rgb(206,98,19)" fg:x="23731" fg:w="78"/><text x="14.8015%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (48 samples, 0.03%)</title><rect x="14.6140%" y="245" width="0.0294%" height="15" fill="rgb(217,5,26)" fg:x="23833" fg:w="48"/><text x="14.8640%" y="255.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (56 samples, 0.03%)</title><rect x="14.6097%" y="261" width="0.0343%" height="15" fill="rgb(235,190,38)" fg:x="23826" fg:w="56"/><text x="14.8597%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (174 samples, 0.11%)</title><rect x="14.5466%" y="293" width="0.1067%" height="15" fill="rgb(247,86,24)" fg:x="23723" fg:w="174"/><text x="14.7966%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (88 samples, 0.05%)</title><rect x="14.5993%" y="277" width="0.0540%" height="15" fill="rgb(205,101,16)" fg:x="23809" fg:w="88"/><text x="14.8493%" y="287.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::from_iter (189 samples, 0.12%)</title><rect x="14.5404%" y="309" width="0.1159%" height="15" fill="rgb(246,168,33)" fg:x="23713" fg:w="189"/><text x="14.7904%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (18 samples, 0.01%)</title><rect x="14.6563%" y="293" width="0.0110%" height="15" fill="rgb(231,114,1)" fg:x="23902" fg:w="18"/><text x="14.9063%" y="303.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (19 samples, 0.01%)</title><rect x="14.6563%" y="309" width="0.0117%" height="15" fill="rgb(207,184,53)" fg:x="23902" fg:w="19"/><text x="14.9063%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.01%)</title><rect x="14.6839%" y="277" width="0.0129%" height="15" fill="rgb(224,95,51)" fg:x="23947" fg:w="21"/><text x="14.9339%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (52 samples, 0.03%)</title><rect x="14.6968%" y="277" width="0.0319%" height="15" fill="rgb(212,188,45)" fg:x="23968" fg:w="52"/><text x="14.9468%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (49 samples, 0.03%)</title><rect x="14.6987%" y="261" width="0.0300%" height="15" fill="rgb(223,154,38)" fg:x="23971" fg:w="49"/><text x="14.9487%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (49 samples, 0.03%)</title><rect x="14.6987%" y="245" width="0.0300%" height="15" fill="rgb(251,22,52)" fg:x="23971" fg:w="49"/><text x="14.9487%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (105 samples, 0.06%)</title><rect x="14.6723%" y="293" width="0.0644%" height="15" fill="rgb(229,209,22)" fg:x="23928" fg:w="105"/><text x="14.9223%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (19 samples, 0.01%)</title><rect x="14.7367%" y="293" width="0.0117%" height="15" fill="rgb(234,138,34)" fg:x="24033" fg:w="19"/><text x="14.9867%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (26 samples, 0.02%)</title><rect x="14.7728%" y="261" width="0.0159%" height="15" fill="rgb(212,95,11)" fg:x="24092" fg:w="26"/><text x="15.0228%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (24 samples, 0.01%)</title><rect x="14.7741%" y="245" width="0.0147%" height="15" fill="rgb(240,179,47)" fg:x="24094" fg:w="24"/><text x="15.0241%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (24 samples, 0.01%)</title><rect x="14.7741%" y="229" width="0.0147%" height="15" fill="rgb(240,163,11)" fg:x="24094" fg:w="24"/><text x="15.0241%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (64 samples, 0.04%)</title><rect x="14.7508%" y="277" width="0.0392%" height="15" fill="rgb(236,37,12)" fg:x="24056" fg:w="64"/><text x="15.0008%" y="287.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (84 samples, 0.05%)</title><rect x="14.7483%" y="293" width="0.0515%" height="15" fill="rgb(232,164,16)" fg:x="24052" fg:w="84"/><text x="14.9983%" y="303.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (29 samples, 0.02%)</title><rect x="14.8004%" y="293" width="0.0178%" height="15" fill="rgb(244,205,15)" fg:x="24137" fg:w="29"/><text x="15.0504%" y="303.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (25 samples, 0.02%)</title><rect x="14.8029%" y="277" width="0.0153%" height="15" fill="rgb(223,117,47)" fg:x="24141" fg:w="25"/><text x="15.0529%" y="287.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (8,263 samples, 5.07%)</title><rect x="9.7521%" y="325" width="5.0667%" height="15" fill="rgb(244,107,35)" fg:x="15904" fg:w="8263"/><text x="10.0021%" y="335.50">powerg..</text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::iter (246 samples, 0.15%)</title><rect x="14.6680%" y="309" width="0.1508%" height="15" fill="rgb(205,140,8)" fg:x="23921" fg:w="246"/><text x="14.9180%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (17,868 samples, 10.96%)</title><rect x="3.8667%" y="341" width="10.9564%" height="15" fill="rgb(228,84,46)" fg:x="6306" fg:w="17868"/><text x="4.1167%" y="351.50">powergraph`&lt;allo..</text></g><g><title>libsystem_malloc.dylib`_free (21 samples, 0.01%)</title><rect x="14.8286%" y="309" width="0.0129%" height="15" fill="rgb(254,188,9)" fg:x="24183" fg:w="21"/><text x="15.0786%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (31 samples, 0.02%)</title><rect x="14.8562%" y="293" width="0.0190%" height="15" fill="rgb(206,112,54)" fg:x="24228" fg:w="31"/><text x="15.1062%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (99 samples, 0.06%)</title><rect x="14.8280%" y="325" width="0.0607%" height="15" fill="rgb(216,84,49)" fg:x="24182" fg:w="99"/><text x="15.0780%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (65 samples, 0.04%)</title><rect x="14.8489%" y="309" width="0.0399%" height="15" fill="rgb(214,194,35)" fg:x="24216" fg:w="65"/><text x="15.0989%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (18 samples, 0.01%)</title><rect x="14.8777%" y="293" width="0.0110%" height="15" fill="rgb(249,28,3)" fg:x="24263" fg:w="18"/><text x="15.1277%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (19 samples, 0.01%)</title><rect x="14.8906%" y="309" width="0.0117%" height="15" fill="rgb(222,56,52)" fg:x="24284" fg:w="19"/><text x="15.1406%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (36 samples, 0.02%)</title><rect x="14.9053%" y="277" width="0.0221%" height="15" fill="rgb(245,217,50)" fg:x="24308" fg:w="36"/><text x="15.1553%" y="287.50"></text></g><g><title>powergraph`powergraph::edge_repository::EdgeRepository::children (44 samples, 0.03%)</title><rect x="14.9022%" y="309" width="0.0270%" height="15" fill="rgb(213,201,24)" fg:x="24303" fg:w="44"/><text x="15.1522%" y="319.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (42 samples, 0.03%)</title><rect x="14.9035%" y="293" width="0.0258%" height="15" fill="rgb(248,116,28)" fg:x="24305" fg:w="42"/><text x="15.1535%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (20 samples, 0.01%)</title><rect x="14.9317%" y="277" width="0.0123%" height="15" fill="rgb(219,72,43)" fg:x="24351" fg:w="20"/><text x="15.1817%" y="287.50"></text></g><g><title>powergraph`powergraph::edge_repository::EdgeRepository::parents (27 samples, 0.02%)</title><rect x="14.9292%" y="309" width="0.0166%" height="15" fill="rgb(209,138,14)" fg:x="24347" fg:w="27"/><text x="15.1792%" y="319.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (23 samples, 0.01%)</title><rect x="14.9317%" y="293" width="0.0141%" height="15" fill="rgb(222,18,33)" fg:x="24351" fg:w="23"/><text x="15.1817%" y="303.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (66 samples, 0.04%)</title><rect x="14.9458%" y="277" width="0.0405%" height="15" fill="rgb(213,199,7)" fg:x="24374" fg:w="66"/><text x="15.1958%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (64 samples, 0.04%)</title><rect x="14.9470%" y="261" width="0.0392%" height="15" fill="rgb(250,110,10)" fg:x="24376" fg:w="64"/><text x="15.1970%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (26 samples, 0.02%)</title><rect x="14.9703%" y="245" width="0.0159%" height="15" fill="rgb(248,123,6)" fg:x="24414" fg:w="26"/><text x="15.2203%" y="255.50"></text></g><g><title>powergraph`powergraph::PowerGraph::neighbors (162 samples, 0.10%)</title><rect x="14.8887%" y="325" width="0.0993%" height="15" fill="rgb(206,91,31)" fg:x="24281" fg:w="162"/><text x="15.1387%" y="335.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::union (69 samples, 0.04%)</title><rect x="14.9458%" y="309" width="0.0423%" height="15" fill="rgb(211,154,13)" fg:x="24374" fg:w="69"/><text x="15.1958%" y="319.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (69 samples, 0.04%)</title><rect x="14.9458%" y="293" width="0.0423%" height="15" fill="rgb(225,148,7)" fg:x="24374" fg:w="69"/><text x="15.1958%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.01%)</title><rect x="15.0218%" y="261" width="0.0135%" height="15" fill="rgb(220,160,43)" fg:x="24498" fg:w="22"/><text x="15.2718%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (78 samples, 0.05%)</title><rect x="15.0359%" y="261" width="0.0478%" height="15" fill="rgb(213,52,39)" fg:x="24521" fg:w="78"/><text x="15.2859%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (92 samples, 0.06%)</title><rect x="15.0843%" y="261" width="0.0564%" height="15" fill="rgb(243,137,7)" fg:x="24600" fg:w="92"/><text x="15.3343%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (87 samples, 0.05%)</title><rect x="15.0874%" y="245" width="0.0533%" height="15" fill="rgb(230,79,13)" fg:x="24605" fg:w="87"/><text x="15.3374%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (87 samples, 0.05%)</title><rect x="15.0874%" y="229" width="0.0533%" height="15" fill="rgb(247,105,23)" fg:x="24605" fg:w="87"/><text x="15.3374%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (36 samples, 0.02%)</title><rect x="15.1665%" y="245" width="0.0221%" height="15" fill="rgb(223,179,41)" fg:x="24734" fg:w="36"/><text x="15.4165%" y="255.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (24 samples, 0.01%)</title><rect x="15.1886%" y="245" width="0.0147%" height="15" fill="rgb(218,9,34)" fg:x="24770" fg:w="24"/><text x="15.4386%" y="255.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (374 samples, 0.23%)</title><rect x="14.9893%" y="293" width="0.2293%" height="15" fill="rgb(222,106,8)" fg:x="24445" fg:w="374"/><text x="15.2393%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (360 samples, 0.22%)</title><rect x="14.9979%" y="277" width="0.2207%" height="15" fill="rgb(211,220,0)" fg:x="24459" fg:w="360"/><text x="15.2479%" y="287.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (100 samples, 0.06%)</title><rect x="15.1573%" y="261" width="0.0613%" height="15" fill="rgb(229,52,16)" fg:x="24719" fg:w="100"/><text x="15.4073%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (25 samples, 0.02%)</title><rect x="15.2033%" y="245" width="0.0153%" height="15" fill="rgb(212,155,18)" fg:x="24794" fg:w="25"/><text x="15.4533%" y="255.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (644 samples, 0.39%)</title><rect x="14.8256%" y="341" width="0.3949%" height="15" fill="rgb(242,21,14)" fg:x="24178" fg:w="644"/><text x="15.0756%" y="351.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::union (378 samples, 0.23%)</title><rect x="14.9887%" y="325" width="0.2318%" height="15" fill="rgb(222,19,48)" fg:x="24444" fg:w="378"/><text x="15.2387%" y="335.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (378 samples, 0.23%)</title><rect x="14.9887%" y="309" width="0.2318%" height="15" fill="rgb(232,45,27)" fg:x="24444" fg:w="378"/><text x="15.2387%" y="319.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (19 samples, 0.01%)</title><rect x="15.2205%" y="341" width="0.0117%" height="15" fill="rgb(249,103,42)" fg:x="24822" fg:w="19"/><text x="15.4705%" y="351.50"></text></g><g><title>powergraph`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.02%)</title><rect x="15.2321%" y="341" width="0.0208%" height="15" fill="rgb(246,81,33)" fg:x="24841" fg:w="34"/><text x="15.4821%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (28 samples, 0.02%)</title><rect x="15.2634%" y="325" width="0.0172%" height="15" fill="rgb(252,33,42)" fg:x="24892" fg:w="28"/><text x="15.5134%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (53 samples, 0.03%)</title><rect x="15.3051%" y="309" width="0.0325%" height="15" fill="rgb(209,212,41)" fg:x="24960" fg:w="53"/><text x="15.5551%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (67 samples, 0.04%)</title><rect x="15.3376%" y="309" width="0.0411%" height="15" fill="rgb(207,154,6)" fg:x="25013" fg:w="67"/><text x="15.5876%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (96 samples, 0.06%)</title><rect x="15.3787%" y="309" width="0.0589%" height="15" fill="rgb(223,64,47)" fg:x="25080" fg:w="96"/><text x="15.6287%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (88 samples, 0.05%)</title><rect x="15.3836%" y="293" width="0.0540%" height="15" fill="rgb(211,161,38)" fg:x="25088" fg:w="88"/><text x="15.6336%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (67 samples, 0.04%)</title><rect x="15.3965%" y="277" width="0.0411%" height="15" fill="rgb(219,138,40)" fg:x="25109" fg:w="67"/><text x="15.6465%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (18 samples, 0.01%)</title><rect x="15.4382%" y="293" width="0.0110%" height="15" fill="rgb(241,228,46)" fg:x="25177" fg:w="18"/><text x="15.6882%" y="303.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (21 samples, 0.01%)</title><rect x="15.4375%" y="309" width="0.0129%" height="15" fill="rgb(223,209,38)" fg:x="25176" fg:w="21"/><text x="15.6875%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (282 samples, 0.17%)</title><rect x="15.2842%" y="325" width="0.1729%" height="15" fill="rgb(236,164,45)" fg:x="24926" fg:w="282"/><text x="15.5342%" y="335.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (374 samples, 0.23%)</title><rect x="15.2530%" y="341" width="0.2293%" height="15" fill="rgb(231,15,5)" fg:x="24875" fg:w="374"/><text x="15.5030%" y="351.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (41 samples, 0.03%)</title><rect x="15.4572%" y="325" width="0.0251%" height="15" fill="rgb(252,35,15)" fg:x="25208" fg:w="41"/><text x="15.7072%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (22 samples, 0.01%)</title><rect x="15.4688%" y="309" width="0.0135%" height="15" fill="rgb(248,181,18)" fg:x="25227" fg:w="22"/><text x="15.7188%" y="319.50"></text></g><g><title>powergraph`&lt;powergraph::Edge as core::cmp::PartialEq&gt;::eq (44 samples, 0.03%)</title><rect x="15.4823%" y="341" width="0.0270%" height="15" fill="rgb(233,39,42)" fg:x="25249" fg:w="44"/><text x="15.7323%" y="351.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (38 samples, 0.02%)</title><rect x="15.5363%" y="293" width="0.0233%" height="15" fill="rgb(238,110,33)" fg:x="25337" fg:w="38"/><text x="15.7863%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (37 samples, 0.02%)</title><rect x="15.5369%" y="277" width="0.0227%" height="15" fill="rgb(233,195,10)" fg:x="25338" fg:w="37"/><text x="15.7869%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (36 samples, 0.02%)</title><rect x="15.5375%" y="261" width="0.0221%" height="15" fill="rgb(254,105,3)" fg:x="25339" fg:w="36"/><text x="15.7875%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (78 samples, 0.05%)</title><rect x="15.5123%" y="309" width="0.0478%" height="15" fill="rgb(221,225,9)" fg:x="25298" fg:w="78"/><text x="15.7623%" y="319.50"></text></g><g><title>powergraph`&lt;powergraph::PowerEdgeCandidate as core::clone::Clone&gt;::clone (107 samples, 0.07%)</title><rect x="15.5093%" y="341" width="0.0656%" height="15" fill="rgb(224,227,45)" fg:x="25293" fg:w="107"/><text x="15.7593%" y="351.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (107 samples, 0.07%)</title><rect x="15.5093%" y="325" width="0.0656%" height="15" fill="rgb(229,198,43)" fg:x="25293" fg:w="107"/><text x="15.7593%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (24 samples, 0.01%)</title><rect x="15.5602%" y="309" width="0.0147%" height="15" fill="rgb(206,209,35)" fg:x="25376" fg:w="24"/><text x="15.8102%" y="319.50"></text></g><g><title>powergraph`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (220 samples, 0.13%)</title><rect x="15.5872%" y="325" width="0.1349%" height="15" fill="rgb(245,195,53)" fg:x="25420" fg:w="220"/><text x="15.8372%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (19 samples, 0.01%)</title><rect x="16.3034%" y="309" width="0.0117%" height="15" fill="rgb(240,92,26)" fg:x="26588" fg:w="19"/><text x="16.5534%" y="319.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,706 samples, 3.50%)</title><rect x="16.3162%" y="309" width="3.4988%" height="15" fill="rgb(207,40,23)" fg:x="26609" fg:w="5706"/><text x="16.5662%" y="319.50">pow..</text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (1,243 samples, 0.76%)</title><rect x="19.8194%" y="309" width="0.7622%" height="15" fill="rgb(223,111,35)" fg:x="32322" fg:w="1243"/><text x="20.0694%" y="319.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (8,423 samples, 5.16%)</title><rect x="15.7221%" y="325" width="5.1649%" height="15" fill="rgb(229,147,28)" fg:x="25640" fg:w="8423"/><text x="15.9721%" y="335.50">powerg..</text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (498 samples, 0.31%)</title><rect x="20.5815%" y="309" width="0.3054%" height="15" fill="rgb(211,29,28)" fg:x="33565" fg:w="498"/><text x="20.8315%" y="319.50"></text></g><g><title>powergraph`&lt;powergraph::PowerEdgeCandidate as core::cmp::PartialEq&gt;::eq (8,680 samples, 5.32%)</title><rect x="15.5749%" y="341" width="5.3224%" height="15" fill="rgb(228,72,33)" fg:x="25400" fg:w="8680"/><text x="15.8249%" y="351.50">powergr..</text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (17 samples, 0.01%)</title><rect x="20.8869%" y="325" width="0.0104%" height="15" fill="rgb(205,214,31)" fg:x="34063" fg:w="17"/><text x="21.1369%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (212 samples, 0.13%)</title><rect x="20.9249%" y="325" width="0.1300%" height="15" fill="rgb(224,111,15)" fg:x="34125" fg:w="212"/><text x="21.1749%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (147 samples, 0.09%)</title><rect x="21.0549%" y="325" width="0.0901%" height="15" fill="rgb(253,21,26)" fg:x="34337" fg:w="147"/><text x="21.3049%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (252 samples, 0.15%)</title><rect x="21.1469%" y="325" width="0.1545%" height="15" fill="rgb(245,139,43)" fg:x="34487" fg:w="252"/><text x="21.3969%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (279 samples, 0.17%)</title><rect x="21.3057%" y="325" width="0.1711%" height="15" fill="rgb(252,170,7)" fg:x="34746" fg:w="279"/><text x="21.5557%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (50 samples, 0.03%)</title><rect x="21.4768%" y="325" width="0.0307%" height="15" fill="rgb(231,118,14)" fg:x="35025" fg:w="50"/><text x="21.7268%" y="335.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (163 samples, 0.10%)</title><rect x="21.5075%" y="325" width="0.0999%" height="15" fill="rgb(238,83,0)" fg:x="35075" fg:w="163"/><text x="21.7575%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (89 samples, 0.05%)</title><rect x="21.5528%" y="309" width="0.0546%" height="15" fill="rgb(221,39,39)" fg:x="35149" fg:w="89"/><text x="21.8028%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (88 samples, 0.05%)</title><rect x="21.5534%" y="293" width="0.0540%" height="15" fill="rgb(222,119,46)" fg:x="35150" fg:w="88"/><text x="21.8034%" y="303.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (36 samples, 0.02%)</title><rect x="21.6111%" y="325" width="0.0221%" height="15" fill="rgb(222,165,49)" fg:x="35244" fg:w="36"/><text x="21.8611%" y="335.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (19 samples, 0.01%)</title><rect x="21.6332%" y="325" width="0.0117%" height="15" fill="rgb(219,113,52)" fg:x="35280" fg:w="19"/><text x="21.8832%" y="335.50"></text></g><g><title>powergraph`__rdl_alloc (22 samples, 0.01%)</title><rect x="21.6448%" y="325" width="0.0135%" height="15" fill="rgb(214,7,15)" fg:x="35299" fg:w="22"/><text x="21.8948%" y="335.50"></text></g><g><title>powergraph`&lt;powergraph::sets::SetIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,241 samples, 0.76%)</title><rect x="20.8986%" y="341" width="0.7610%" height="15" fill="rgb(235,32,4)" fg:x="34082" fg:w="1241"/><text x="21.1486%" y="351.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94 samples, 0.06%)</title><rect x="21.8760%" y="325" width="0.0576%" height="15" fill="rgb(238,90,54)" fg:x="35676" fg:w="94"/><text x="22.1260%" y="335.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (36 samples, 0.02%)</title><rect x="21.9385%" y="325" width="0.0221%" height="15" fill="rgb(213,208,19)" fg:x="35778" fg:w="36"/><text x="22.1885%" y="335.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (486 samples, 0.30%)</title><rect x="21.6644%" y="341" width="0.2980%" height="15" fill="rgb(233,156,4)" fg:x="35331" fg:w="486"/><text x="21.9144%" y="351.50"></text></g><g><title>powergraph`DYLD-STUB$$free (156 samples, 0.10%)</title><rect x="21.9624%" y="341" width="0.0957%" height="15" fill="rgb(207,194,5)" fg:x="35817" fg:w="156"/><text x="22.2124%" y="351.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (18 samples, 0.01%)</title><rect x="22.1360%" y="101" width="0.0110%" height="15" fill="rgb(206,111,30)" fg:x="36100" fg:w="18"/><text x="22.3860%" y="111.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.01%)</title><rect x="22.1360%" y="85" width="0.0110%" height="15" fill="rgb(243,70,54)" fg:x="36100" fg:w="18"/><text x="22.3860%" y="95.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (18 samples, 0.01%)</title><rect x="22.1360%" y="69" width="0.0110%" height="15" fill="rgb(242,28,8)" fg:x="36100" fg:w="18"/><text x="22.3860%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (18 samples, 0.01%)</title><rect x="22.1360%" y="53" width="0.0110%" height="15" fill="rgb(219,106,18)" fg:x="36100" fg:w="18"/><text x="22.3860%" y="63.50"></text></g><g><title>powergraph`&lt;str as core::fmt::Debug&gt;::fmt (76 samples, 0.05%)</title><rect x="22.1010%" y="117" width="0.0466%" height="15" fill="rgb(244,222,10)" fg:x="36043" fg:w="76"/><text x="22.3510%" y="127.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entry (81 samples, 0.05%)</title><rect x="22.0986%" y="133" width="0.0497%" height="15" fill="rgb(236,179,52)" fg:x="36039" fg:w="81"/><text x="22.3486%" y="143.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entries (87 samples, 0.05%)</title><rect x="22.0967%" y="149" width="0.0533%" height="15" fill="rgb(213,23,39)" fg:x="36036" fg:w="87"/><text x="22.3467%" y="159.50"></text></g><g><title>powergraph`&lt;&amp;T as core::fmt::Debug&gt;::fmt (96 samples, 0.06%)</title><rect x="22.0918%" y="213" width="0.0589%" height="15" fill="rgb(238,48,10)" fg:x="36028" fg:w="96"/><text x="22.3418%" y="223.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field1_finish (96 samples, 0.06%)</title><rect x="22.0918%" y="197" width="0.0589%" height="15" fill="rgb(251,196,23)" fg:x="36028" fg:w="96"/><text x="22.3418%" y="207.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (94 samples, 0.06%)</title><rect x="22.0930%" y="181" width="0.0576%" height="15" fill="rgb(250,152,24)" fg:x="36030" fg:w="94"/><text x="22.3430%" y="191.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::fmt::Debug&gt;::fmt (94 samples, 0.06%)</title><rect x="22.0930%" y="165" width="0.0576%" height="15" fill="rgb(209,150,17)" fg:x="36030" fg:w="94"/><text x="22.3430%" y="175.50"></text></g><g><title>powergraph`&lt;powergraph::clusters::Cluster as core::fmt::Debug&gt;::fmt (131 samples, 0.08%)</title><rect x="22.0869%" y="261" width="0.0803%" height="15" fill="rgb(234,202,34)" fg:x="36020" fg:w="131"/><text x="22.3369%" y="271.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field2_finish (131 samples, 0.08%)</title><rect x="22.0869%" y="245" width="0.0803%" height="15" fill="rgb(253,148,53)" fg:x="36020" fg:w="131"/><text x="22.3369%" y="255.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (124 samples, 0.08%)</title><rect x="22.0912%" y="229" width="0.0760%" height="15" fill="rgb(218,129,16)" fg:x="36027" fg:w="124"/><text x="22.3412%" y="239.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::fmt::Debug&gt;::fmt (22 samples, 0.01%)</title><rect x="22.1537%" y="213" width="0.0135%" height="15" fill="rgb(216,85,19)" fg:x="36129" fg:w="22"/><text x="22.4037%" y="223.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field1_finish (22 samples, 0.01%)</title><rect x="22.1537%" y="197" width="0.0135%" height="15" fill="rgb(235,228,7)" fg:x="36129" fg:w="22"/><text x="22.4037%" y="207.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (17 samples, 0.01%)</title><rect x="22.1568%" y="181" width="0.0104%" height="15" fill="rgb(245,175,0)" fg:x="36134" fg:w="17"/><text x="22.4068%" y="191.50"></text></g><g><title>powergraph`&lt;&amp;T as core::fmt::Debug&gt;::fmt (146 samples, 0.09%)</title><rect x="22.0845%" y="309" width="0.0895%" height="15" fill="rgb(208,168,36)" fg:x="36016" fg:w="146"/><text x="22.3345%" y="319.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field3_finish (146 samples, 0.09%)</title><rect x="22.0845%" y="293" width="0.0895%" height="15" fill="rgb(246,171,24)" fg:x="36016" fg:w="146"/><text x="22.3345%" y="303.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (143 samples, 0.09%)</title><rect x="22.0863%" y="277" width="0.0877%" height="15" fill="rgb(215,142,24)" fg:x="36019" fg:w="143"/><text x="22.3363%" y="287.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entry (20 samples, 0.01%)</title><rect x="22.1850%" y="101" width="0.0123%" height="15" fill="rgb(250,187,7)" fg:x="36180" fg:w="20"/><text x="22.4350%" y="111.50"></text></g><g><title>powergraph`&lt;str as core::fmt::Debug&gt;::fmt (19 samples, 0.01%)</title><rect x="22.1856%" y="85" width="0.0117%" height="15" fill="rgb(228,66,33)" fg:x="36181" fg:w="19"/><text x="22.4356%" y="95.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::fmt::Debug&gt;::fmt (24 samples, 0.01%)</title><rect x="22.1832%" y="133" width="0.0147%" height="15" fill="rgb(234,215,21)" fg:x="36177" fg:w="24"/><text x="22.4332%" y="143.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entries (22 samples, 0.01%)</title><rect x="22.1844%" y="117" width="0.0135%" height="15" fill="rgb(222,191,20)" fg:x="36179" fg:w="22"/><text x="22.4344%" y="127.50"></text></g><g><title>powergraph`&lt;&amp;T as core::fmt::Debug&gt;::fmt (26 samples, 0.02%)</title><rect x="22.1826%" y="181" width="0.0159%" height="15" fill="rgb(245,79,54)" fg:x="36176" fg:w="26"/><text x="22.4326%" y="191.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field1_finish (26 samples, 0.02%)</title><rect x="22.1826%" y="165" width="0.0159%" height="15" fill="rgb(240,10,37)" fg:x="36176" fg:w="26"/><text x="22.4326%" y="175.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (25 samples, 0.02%)</title><rect x="22.1832%" y="149" width="0.0153%" height="15" fill="rgb(214,192,32)" fg:x="36177" fg:w="25"/><text x="22.4332%" y="159.50"></text></g><g><title>powergraph`&lt;[T] as core::fmt::Debug&gt;::fmt (43 samples, 0.03%)</title><rect x="22.1758%" y="309" width="0.0264%" height="15" fill="rgb(209,36,54)" fg:x="36165" fg:w="43"/><text x="22.4258%" y="319.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entry (43 samples, 0.03%)</title><rect x="22.1758%" y="293" width="0.0264%" height="15" fill="rgb(220,10,11)" fg:x="36165" fg:w="43"/><text x="22.4258%" y="303.50"></text></g><g><title>powergraph`&lt;&amp;T as core::fmt::Debug&gt;::fmt (43 samples, 0.03%)</title><rect x="22.1758%" y="277" width="0.0264%" height="15" fill="rgb(221,106,17)" fg:x="36165" fg:w="43"/><text x="22.4258%" y="287.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field3_finish (35 samples, 0.02%)</title><rect x="22.1807%" y="261" width="0.0215%" height="15" fill="rgb(251,142,44)" fg:x="36173" fg:w="35"/><text x="22.4307%" y="271.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (35 samples, 0.02%)</title><rect x="22.1807%" y="245" width="0.0215%" height="15" fill="rgb(238,13,15)" fg:x="36173" fg:w="35"/><text x="22.4307%" y="255.50"></text></g><g><title>powergraph`&lt;powergraph::clusters::Cluster as core::fmt::Debug&gt;::fmt (33 samples, 0.02%)</title><rect x="22.1820%" y="229" width="0.0202%" height="15" fill="rgb(208,107,27)" fg:x="36175" fg:w="33"/><text x="22.4320%" y="239.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field2_finish (33 samples, 0.02%)</title><rect x="22.1820%" y="213" width="0.0202%" height="15" fill="rgb(205,136,37)" fg:x="36175" fg:w="33"/><text x="22.4320%" y="223.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (33 samples, 0.02%)</title><rect x="22.1820%" y="197" width="0.0202%" height="15" fill="rgb(250,205,27)" fg:x="36175" fg:w="33"/><text x="22.4320%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (24 samples, 0.01%)</title><rect x="22.2549%" y="37" width="0.0147%" height="15" fill="rgb(210,80,43)" fg:x="36294" fg:w="24"/><text x="22.5049%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (26 samples, 0.02%)</title><rect x="22.2549%" y="53" width="0.0159%" height="15" fill="rgb(247,160,36)" fg:x="36294" fg:w="26"/><text x="22.5049%" y="63.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (30 samples, 0.02%)</title><rect x="22.2531%" y="101" width="0.0184%" height="15" fill="rgb(234,13,49)" fg:x="36291" fg:w="30"/><text x="22.5031%" y="111.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (28 samples, 0.02%)</title><rect x="22.2543%" y="85" width="0.0172%" height="15" fill="rgb(234,122,0)" fg:x="36293" fg:w="28"/><text x="22.5043%" y="95.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (27 samples, 0.02%)</title><rect x="22.2549%" y="69" width="0.0166%" height="15" fill="rgb(207,146,38)" fg:x="36294" fg:w="27"/><text x="22.5049%" y="79.50"></text></g><g><title>powergraph`&lt;str as core::fmt::Debug&gt;::fmt (87 samples, 0.05%)</title><rect x="22.2200%" y="117" width="0.0533%" height="15" fill="rgb(207,177,25)" fg:x="36237" fg:w="87"/><text x="22.4700%" y="127.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entry (89 samples, 0.05%)</title><rect x="22.2194%" y="133" width="0.0546%" height="15" fill="rgb(211,178,42)" fg:x="36236" fg:w="89"/><text x="22.4694%" y="143.50"></text></g><g><title>powergraph`&lt;&amp;T as core::fmt::Debug&gt;::fmt (97 samples, 0.06%)</title><rect x="22.2151%" y="213" width="0.0595%" height="15" fill="rgb(230,69,54)" fg:x="36229" fg:w="97"/><text x="22.4651%" y="223.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field1_finish (96 samples, 0.06%)</title><rect x="22.2157%" y="197" width="0.0589%" height="15" fill="rgb(214,135,41)" fg:x="36230" fg:w="96"/><text x="22.4657%" y="207.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (95 samples, 0.06%)</title><rect x="22.2163%" y="181" width="0.0583%" height="15" fill="rgb(237,67,25)" fg:x="36231" fg:w="95"/><text x="22.4663%" y="191.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::fmt::Debug&gt;::fmt (95 samples, 0.06%)</title><rect x="22.2163%" y="165" width="0.0583%" height="15" fill="rgb(222,189,50)" fg:x="36231" fg:w="95"/><text x="22.4663%" y="175.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entries (91 samples, 0.06%)</title><rect x="22.2187%" y="149" width="0.0558%" height="15" fill="rgb(245,148,34)" fg:x="36235" fg:w="91"/><text x="22.4687%" y="159.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::fmt::Debug&gt;::fmt (20 samples, 0.01%)</title><rect x="22.2807%" y="165" width="0.0123%" height="15" fill="rgb(222,29,6)" fg:x="36336" fg:w="20"/><text x="22.5307%" y="175.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entries (20 samples, 0.01%)</title><rect x="22.2807%" y="149" width="0.0123%" height="15" fill="rgb(221,189,43)" fg:x="36336" fg:w="20"/><text x="22.5307%" y="159.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entry (19 samples, 0.01%)</title><rect x="22.2813%" y="133" width="0.0117%" height="15" fill="rgb(207,36,27)" fg:x="36337" fg:w="19"/><text x="22.5313%" y="143.50"></text></g><g><title>powergraph`&lt;str as core::fmt::Debug&gt;::fmt (18 samples, 0.01%)</title><rect x="22.2819%" y="117" width="0.0110%" height="15" fill="rgb(217,90,24)" fg:x="36338" fg:w="18"/><text x="22.5319%" y="127.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field2_finish (139 samples, 0.09%)</title><rect x="22.2083%" y="245" width="0.0852%" height="15" fill="rgb(224,66,35)" fg:x="36218" fg:w="139"/><text x="22.4583%" y="255.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (128 samples, 0.08%)</title><rect x="22.2151%" y="229" width="0.0785%" height="15" fill="rgb(221,13,50)" fg:x="36229" fg:w="128"/><text x="22.4651%" y="239.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::fmt::Debug&gt;::fmt (29 samples, 0.02%)</title><rect x="22.2758%" y="213" width="0.0178%" height="15" fill="rgb(236,68,49)" fg:x="36328" fg:w="29"/><text x="22.5258%" y="223.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field1_finish (29 samples, 0.02%)</title><rect x="22.2758%" y="197" width="0.0178%" height="15" fill="rgb(229,146,28)" fg:x="36328" fg:w="29"/><text x="22.5258%" y="207.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (22 samples, 0.01%)</title><rect x="22.2801%" y="181" width="0.0135%" height="15" fill="rgb(225,31,38)" fg:x="36335" fg:w="22"/><text x="22.5301%" y="191.50"></text></g><g><title>powergraph`&lt;powergraph::clusters::Cluster as core::fmt::Debug&gt;::fmt (142 samples, 0.09%)</title><rect x="22.2077%" y="261" width="0.0871%" height="15" fill="rgb(250,208,3)" fg:x="36217" fg:w="142"/><text x="22.4577%" y="271.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (160 samples, 0.10%)</title><rect x="22.2053%" y="277" width="0.0981%" height="15" fill="rgb(246,54,23)" fg:x="36213" fg:w="160"/><text x="22.4553%" y="287.50"></text></g><g><title>powergraph`&lt;powergraph::PowerEdgeCandidate as core::fmt::Debug&gt;::fmt (163 samples, 0.10%)</title><rect x="22.2046%" y="309" width="0.0999%" height="15" fill="rgb(243,76,11)" fg:x="36212" fg:w="163"/><text x="22.4546%" y="319.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field3_finish (163 samples, 0.10%)</title><rect x="22.2046%" y="293" width="0.0999%" height="15" fill="rgb(245,21,50)" fg:x="36212" fg:w="163"/><text x="22.4546%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (23 samples, 0.01%)</title><rect x="22.3500%" y="85" width="0.0141%" height="15" fill="rgb(228,9,43)" fg:x="36449" fg:w="23"/><text x="22.6000%" y="95.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (30 samples, 0.02%)</title><rect x="22.3475%" y="149" width="0.0184%" height="15" fill="rgb(208,100,47)" fg:x="36445" fg:w="30"/><text x="22.5975%" y="159.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (26 samples, 0.02%)</title><rect x="22.3500%" y="133" width="0.0159%" height="15" fill="rgb(232,26,8)" fg:x="36449" fg:w="26"/><text x="22.6000%" y="143.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (26 samples, 0.02%)</title><rect x="22.3500%" y="117" width="0.0159%" height="15" fill="rgb(216,166,38)" fg:x="36449" fg:w="26"/><text x="22.6000%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (26 samples, 0.02%)</title><rect x="22.3500%" y="101" width="0.0159%" height="15" fill="rgb(251,202,51)" fg:x="36449" fg:w="26"/><text x="22.6000%" y="111.50"></text></g><g><title>powergraph`&lt;str as core::fmt::Debug&gt;::fmt (78 samples, 0.05%)</title><rect x="22.3187%" y="165" width="0.0478%" height="15" fill="rgb(254,216,34)" fg:x="36398" fg:w="78"/><text x="22.5687%" y="175.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entry (82 samples, 0.05%)</title><rect x="22.3169%" y="181" width="0.0503%" height="15" fill="rgb(251,32,27)" fg:x="36395" fg:w="82"/><text x="22.5669%" y="191.50"></text></g><g><title>powergraph`&lt;&amp;T as core::fmt::Debug&gt;::fmt (89 samples, 0.05%)</title><rect x="22.3150%" y="261" width="0.0546%" height="15" fill="rgb(208,127,28)" fg:x="36392" fg:w="89"/><text x="22.5650%" y="271.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field1_finish (89 samples, 0.05%)</title><rect x="22.3150%" y="245" width="0.0546%" height="15" fill="rgb(224,137,22)" fg:x="36392" fg:w="89"/><text x="22.5650%" y="255.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (88 samples, 0.05%)</title><rect x="22.3156%" y="229" width="0.0540%" height="15" fill="rgb(254,70,32)" fg:x="36393" fg:w="88"/><text x="22.5656%" y="239.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::fmt::Debug&gt;::fmt (88 samples, 0.05%)</title><rect x="22.3156%" y="213" width="0.0540%" height="15" fill="rgb(229,75,37)" fg:x="36393" fg:w="88"/><text x="22.5656%" y="223.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entries (87 samples, 0.05%)</title><rect x="22.3162%" y="197" width="0.0533%" height="15" fill="rgb(252,64,23)" fg:x="36394" fg:w="87"/><text x="22.5662%" y="207.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::fmt::Debug&gt;::fmt (24 samples, 0.01%)</title><rect x="22.3714%" y="261" width="0.0147%" height="15" fill="rgb(232,162,48)" fg:x="36484" fg:w="24"/><text x="22.6214%" y="271.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field1_finish (23 samples, 0.01%)</title><rect x="22.3720%" y="245" width="0.0141%" height="15" fill="rgb(246,160,12)" fg:x="36485" fg:w="23"/><text x="22.6220%" y="255.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (18 samples, 0.01%)</title><rect x="22.3751%" y="229" width="0.0110%" height="15" fill="rgb(247,166,0)" fg:x="36490" fg:w="18"/><text x="22.6251%" y="239.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field2_finish (121 samples, 0.07%)</title><rect x="22.3126%" y="293" width="0.0742%" height="15" fill="rgb(249,219,21)" fg:x="36388" fg:w="121"/><text x="22.5626%" y="303.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (118 samples, 0.07%)</title><rect x="22.3144%" y="277" width="0.0724%" height="15" fill="rgb(205,209,3)" fg:x="36391" fg:w="118"/><text x="22.5644%" y="287.50"></text></g><g><title>powergraph`&lt;powergraph::clusters::Cluster as core::fmt::Debug&gt;::fmt (122 samples, 0.07%)</title><rect x="22.3126%" y="309" width="0.0748%" height="15" fill="rgb(243,44,1)" fg:x="36388" fg:w="122"/><text x="22.5626%" y="319.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entries (20 samples, 0.01%)</title><rect x="22.3904%" y="245" width="0.0123%" height="15" fill="rgb(206,159,16)" fg:x="36515" fg:w="20"/><text x="22.6404%" y="255.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entry (19 samples, 0.01%)</title><rect x="22.3911%" y="229" width="0.0117%" height="15" fill="rgb(244,77,30)" fg:x="36516" fg:w="19"/><text x="22.6411%" y="239.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field1_finish (26 samples, 0.02%)</title><rect x="22.3874%" y="293" width="0.0159%" height="15" fill="rgb(218,69,12)" fg:x="36510" fg:w="26"/><text x="22.6374%" y="303.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (21 samples, 0.01%)</title><rect x="22.3904%" y="277" width="0.0129%" height="15" fill="rgb(212,87,7)" fg:x="36515" fg:w="21"/><text x="22.6404%" y="287.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::fmt::Debug&gt;::fmt (21 samples, 0.01%)</title><rect x="22.3904%" y="261" width="0.0129%" height="15" fill="rgb(245,114,25)" fg:x="36515" fg:w="21"/><text x="22.6404%" y="271.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::fmt::Debug&gt;::fmt (27 samples, 0.02%)</title><rect x="22.3874%" y="309" width="0.0166%" height="15" fill="rgb(210,61,42)" fg:x="36510" fg:w="27"/><text x="22.6374%" y="319.50"></text></g><g><title>powergraph`alloc::fmt::format::format_inner (575 samples, 0.35%)</title><rect x="22.0642%" y="341" width="0.3526%" height="15" fill="rgb(211,52,33)" fg:x="35983" fg:w="575"/><text x="22.3142%" y="351.50"></text></g><g><title>powergraph`core::fmt::write (549 samples, 0.34%)</title><rect x="22.0802%" y="325" width="0.3366%" height="15" fill="rgb(234,58,33)" fg:x="36009" fg:w="549"/><text x="22.3302%" y="335.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22 samples, 0.01%)</title><rect x="22.4346%" y="293" width="0.0135%" height="15" fill="rgb(220,115,36)" fg:x="36587" fg:w="22"/><text x="22.6846%" y="303.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::hash::Hash&gt;::hash (79 samples, 0.05%)</title><rect x="22.4272%" y="309" width="0.0484%" height="15" fill="rgb(243,153,54)" fg:x="36575" fg:w="79"/><text x="22.6772%" y="319.50"></text></g><g><title>powergraph`itertools::Itertools::sorted (45 samples, 0.03%)</title><rect x="22.4481%" y="293" width="0.0276%" height="15" fill="rgb(251,47,18)" fg:x="36609" fg:w="45"/><text x="22.6981%" y="303.50"></text></g><g><title>powergraph`core::slice::sort::stable::driftsort_main (21 samples, 0.01%)</title><rect x="22.4628%" y="277" width="0.0129%" height="15" fill="rgb(242,102,42)" fg:x="36633" fg:w="21"/><text x="22.7128%" y="287.50"></text></g><g><title>powergraph`core::slice::sort::stable::drift::sort (21 samples, 0.01%)</title><rect x="22.4628%" y="261" width="0.0129%" height="15" fill="rgb(234,31,38)" fg:x="36633" fg:w="21"/><text x="22.7128%" y="271.50"></text></g><g><title>powergraph`&lt;powergraph::PowerEdgeCandidate as core::hash::Hash&gt;::hash (83 samples, 0.05%)</title><rect x="22.4260%" y="325" width="0.0509%" height="15" fill="rgb(221,117,51)" fg:x="36573" fg:w="83"/><text x="22.6760%" y="335.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (129 samples, 0.08%)</title><rect x="22.4242%" y="341" width="0.0791%" height="15" fill="rgb(212,20,18)" fg:x="36570" fg:w="129"/><text x="22.6742%" y="351.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::hash::Hash&gt;::hash (43 samples, 0.03%)</title><rect x="22.4769%" y="325" width="0.0264%" height="15" fill="rgb(245,133,36)" fg:x="36656" fg:w="43"/><text x="22.7269%" y="335.50"></text></g><g><title>powergraph`itertools::Itertools::sorted (32 samples, 0.02%)</title><rect x="22.4836%" y="309" width="0.0196%" height="15" fill="rgb(212,6,19)" fg:x="36667" fg:w="32"/><text x="22.7336%" y="319.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (49 samples, 0.03%)</title><rect x="22.5051%" y="341" width="0.0300%" height="15" fill="rgb(218,1,36)" fg:x="36702" fg:w="49"/><text x="22.7551%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_free (219 samples, 0.13%)</title><rect x="22.5480%" y="325" width="0.1343%" height="15" fill="rgb(246,84,54)" fg:x="36772" fg:w="219"/><text x="22.7980%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (49 samples, 0.03%)</title><rect x="22.6823%" y="325" width="0.0300%" height="15" fill="rgb(242,110,6)" fg:x="36991" fg:w="49"/><text x="22.9323%" y="335.50"></text></g><g><title>powergraph`DYLD-STUB$$free (68 samples, 0.04%)</title><rect x="22.7148%" y="325" width="0.0417%" height="15" fill="rgb(214,47,5)" fg:x="37044" fg:w="68"/><text x="22.9648%" y="335.50"></text></g><g><title>powergraph`__rdl_dealloc (35 samples, 0.02%)</title><rect x="22.7565%" y="325" width="0.0215%" height="15" fill="rgb(218,159,25)" fg:x="37112" fg:w="35"/><text x="23.0065%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (21 samples, 0.01%)</title><rect x="22.8528%" y="309" width="0.0129%" height="15" fill="rgb(215,211,28)" fg:x="37269" fg:w="21"/><text x="23.1028%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (344 samples, 0.21%)</title><rect x="22.8657%" y="309" width="0.2109%" height="15" fill="rgb(238,59,32)" fg:x="37290" fg:w="344"/><text x="23.1157%" y="319.50"></text></g><g><title>libsystem_platform.dylib`__bzero (53 samples, 0.03%)</title><rect x="23.0766%" y="309" width="0.0325%" height="15" fill="rgb(226,82,3)" fg:x="37634" fg:w="53"/><text x="23.3266%" y="319.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (1,057 samples, 0.65%)</title><rect x="22.5425%" y="341" width="0.6481%" height="15" fill="rgb(240,164,32)" fg:x="36763" fg:w="1057"/><text x="22.7925%" y="351.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (673 samples, 0.41%)</title><rect x="22.7780%" y="325" width="0.4127%" height="15" fill="rgb(232,46,7)" fg:x="37147" fg:w="673"/><text x="23.0280%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (133 samples, 0.08%)</title><rect x="23.1091%" y="309" width="0.0816%" height="15" fill="rgb(229,129,53)" fg:x="37687" fg:w="133"/><text x="23.3591%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (25 samples, 0.02%)</title><rect x="23.2323%" y="261" width="0.0153%" height="15" fill="rgb(234,188,29)" fg:x="37888" fg:w="25"/><text x="23.4823%" y="271.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;powergraph::unordered_tuple::UnorderedTuple&lt;powergraph::clusters::Cluster&gt;&gt; (74 samples, 0.05%)</title><rect x="23.2097%" y="309" width="0.0454%" height="15" fill="rgb(246,141,4)" fg:x="37851" fg:w="74"/><text x="23.4597%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (49 samples, 0.03%)</title><rect x="23.2250%" y="293" width="0.0300%" height="15" fill="rgb(229,23,39)" fg:x="37876" fg:w="49"/><text x="23.4750%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (44 samples, 0.03%)</title><rect x="23.2280%" y="277" width="0.0270%" height="15" fill="rgb(206,12,3)" fg:x="37881" fg:w="44"/><text x="23.4780%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (23 samples, 0.01%)</title><rect x="23.2740%" y="277" width="0.0141%" height="15" fill="rgb(252,226,20)" fg:x="37956" fg:w="23"/><text x="23.5240%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (170 samples, 0.10%)</title><rect x="23.1937%" y="325" width="0.1042%" height="15" fill="rgb(216,123,35)" fg:x="37825" fg:w="170"/><text x="23.4437%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (70 samples, 0.04%)</title><rect x="23.2550%" y="309" width="0.0429%" height="15" fill="rgb(212,68,40)" fg:x="37925" fg:w="70"/><text x="23.5050%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (56 samples, 0.03%)</title><rect x="23.2636%" y="293" width="0.0343%" height="15" fill="rgb(254,125,32)" fg:x="37939" fg:w="56"/><text x="23.5136%" y="303.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;powergraph::unordered_tuple::UnorderedTuple&lt;powergraph::clusters::Cluster&gt;&gt;&gt; (172 samples, 0.11%)</title><rect x="23.1931%" y="341" width="0.1055%" height="15" fill="rgb(253,97,22)" fg:x="37824" fg:w="172"/><text x="23.4431%" y="351.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;powergraph::PowerEdgeCandidate&gt; (62 samples, 0.04%)</title><rect x="23.2998%" y="341" width="0.0380%" height="15" fill="rgb(241,101,14)" fg:x="37998" fg:w="62"/><text x="23.5498%" y="351.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (35 samples, 0.02%)</title><rect x="23.3163%" y="325" width="0.0215%" height="15" fill="rgb(238,103,29)" fg:x="38025" fg:w="35"/><text x="23.5663%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (29 samples, 0.02%)</title><rect x="23.3200%" y="309" width="0.0178%" height="15" fill="rgb(233,195,47)" fg:x="38031" fg:w="29"/><text x="23.5700%" y="319.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;powergraph::clusters::Cluster&gt; (33 samples, 0.02%)</title><rect x="23.3464%" y="341" width="0.0202%" height="15" fill="rgb(246,218,30)" fg:x="38074" fg:w="33"/><text x="23.5964%" y="351.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (18 samples, 0.01%)</title><rect x="23.3556%" y="325" width="0.0110%" height="15" fill="rgb(219,145,47)" fg:x="38089" fg:w="18"/><text x="23.6056%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`madvise (215 samples, 0.13%)</title><rect x="23.3795%" y="309" width="0.1318%" height="15" fill="rgb(243,12,26)" fg:x="38128" fg:w="215"/><text x="23.6295%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (226 samples, 0.14%)</title><rect x="23.3740%" y="325" width="0.1386%" height="15" fill="rgb(214,87,16)" fg:x="38119" fg:w="226"/><text x="23.6240%" y="335.50"></text></g><g><title>powergraph`core::slice::sort::stable::drift::create_run (629 samples, 0.39%)</title><rect x="23.5205%" y="309" width="0.3857%" height="15" fill="rgb(208,99,42)" fg:x="38358" fg:w="629"/><text x="23.7705%" y="319.50"></text></g><g><title>powergraph`core::slice::sort::stable::driftsort_main (874 samples, 0.54%)</title><rect x="23.3715%" y="341" width="0.5359%" height="15" fill="rgb(253,99,2)" fg:x="38115" fg:w="874"/><text x="23.6215%" y="351.50"></text></g><g><title>powergraph`core::slice::sort::stable::drift::sort (633 samples, 0.39%)</title><rect x="23.5193%" y="325" width="0.3881%" height="15" fill="rgb(220,168,23)" fg:x="38356" fg:w="633"/><text x="23.7693%" y="335.50"></text></g><g><title>powergraph`&lt;powergraph::PowerEdgeCandidate as core::hash::Hash&gt;::hash (17 samples, 0.01%)</title><rect x="23.9124%" y="309" width="0.0104%" height="15" fill="rgb(242,38,24)" fg:x="38997" fg:w="17"/><text x="24.1624%" y="319.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (38 samples, 0.02%)</title><rect x="23.9118%" y="325" width="0.0233%" height="15" fill="rgb(225,182,9)" fg:x="38996" fg:w="38"/><text x="24.1618%" y="335.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::hash::Hash&gt;::hash (20 samples, 0.01%)</title><rect x="23.9228%" y="309" width="0.0123%" height="15" fill="rgb(243,178,37)" fg:x="39014" fg:w="20"/><text x="24.1728%" y="319.50"></text></g><g><title>powergraph`&lt;powergraph::PowerEdgeCandidate as core::hash::Hash&gt;::hash (24 samples, 0.01%)</title><rect x="23.9357%" y="293" width="0.0147%" height="15" fill="rgb(232,139,19)" fg:x="39035" fg:w="24"/><text x="24.1857%" y="303.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::hash::Hash&gt;::hash (24 samples, 0.01%)</title><rect x="23.9357%" y="277" width="0.0147%" height="15" fill="rgb(225,201,24)" fg:x="39035" fg:w="24"/><text x="24.1857%" y="287.50"></text></g><g><title>powergraph`itertools::Itertools::sorted (17 samples, 0.01%)</title><rect x="23.9400%" y="261" width="0.0104%" height="15" fill="rgb(221,47,46)" fg:x="39042" fg:w="17"/><text x="24.1900%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (105 samples, 0.06%)</title><rect x="23.9075%" y="341" width="0.0644%" height="15" fill="rgb(249,23,13)" fg:x="38989" fg:w="105"/><text x="24.1575%" y="351.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (60 samples, 0.04%)</title><rect x="23.9351%" y="325" width="0.0368%" height="15" fill="rgb(219,9,5)" fg:x="39034" fg:w="60"/><text x="24.1851%" y="335.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (59 samples, 0.04%)</title><rect x="23.9357%" y="309" width="0.0362%" height="15" fill="rgb(254,171,16)" fg:x="39035" fg:w="59"/><text x="24.1857%" y="319.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::hash::Hash&gt;::hash (35 samples, 0.02%)</title><rect x="23.9504%" y="293" width="0.0215%" height="15" fill="rgb(230,171,20)" fg:x="39059" fg:w="35"/><text x="24.2004%" y="303.50"></text></g><g><title>powergraph`itertools::Itertools::sorted (29 samples, 0.02%)</title><rect x="23.9541%" y="277" width="0.0178%" height="15" fill="rgb(210,71,41)" fg:x="39065" fg:w="29"/><text x="24.2041%" y="287.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (17 samples, 0.01%)</title><rect x="23.9718%" y="341" width="0.0104%" height="15" fill="rgb(206,173,20)" fg:x="39094" fg:w="17"/><text x="24.2218%" y="351.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (419 samples, 0.26%)</title><rect x="23.9823%" y="341" width="0.2569%" height="15" fill="rgb(233,88,34)" fg:x="39111" fg:w="419"/><text x="24.2323%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_free (218 samples, 0.13%)</title><rect x="24.3171%" y="325" width="0.1337%" height="15" fill="rgb(223,209,46)" fg:x="39657" fg:w="218"/><text x="24.5671%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (64 samples, 0.04%)</title><rect x="24.4507%" y="325" width="0.0392%" height="15" fill="rgb(250,43,18)" fg:x="39875" fg:w="64"/><text x="24.7007%" y="335.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="24.4900%" y="325" width="0.0172%" height="15" fill="rgb(208,13,10)" fg:x="39939" fg:w="28"/><text x="24.7400%" y="335.50"></text></g><g><title>powergraph`DYLD-STUB$$free (70 samples, 0.04%)</title><rect x="24.5072%" y="325" width="0.0429%" height="15" fill="rgb(212,200,36)" fg:x="39967" fg:w="70"/><text x="24.7572%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (24 samples, 0.01%)</title><rect x="24.6488%" y="309" width="0.0147%" height="15" fill="rgb(225,90,30)" fg:x="40198" fg:w="24"/><text x="24.8988%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (373 samples, 0.23%)</title><rect x="24.6635%" y="309" width="0.2287%" height="15" fill="rgb(236,182,39)" fg:x="40222" fg:w="373"/><text x="24.9135%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (21 samples, 0.01%)</title><rect x="24.8941%" y="309" width="0.0129%" height="15" fill="rgb(212,144,35)" fg:x="40598" fg:w="21"/><text x="25.1441%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (20 samples, 0.01%)</title><rect x="24.8947%" y="293" width="0.0123%" height="15" fill="rgb(228,63,44)" fg:x="40599" fg:w="20"/><text x="25.1447%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (20 samples, 0.01%)</title><rect x="24.8947%" y="277" width="0.0123%" height="15" fill="rgb(228,109,6)" fg:x="40599" fg:w="20"/><text x="25.1447%" y="287.50"></text></g><g><title>libsystem_platform.dylib`__bzero (54 samples, 0.03%)</title><rect x="24.9069%" y="309" width="0.0331%" height="15" fill="rgb(238,117,24)" fg:x="40619" fg:w="54"/><text x="25.1569%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (319 samples, 0.20%)</title><rect x="24.9401%" y="309" width="0.1956%" height="15" fill="rgb(242,26,26)" fg:x="40673" fg:w="319"/><text x="25.1901%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (21 samples, 0.01%)</title><rect x="25.1768%" y="277" width="0.0129%" height="15" fill="rgb(221,92,48)" fg:x="41059" fg:w="21"/><text x="25.4268%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (1,554 samples, 0.95%)</title><rect x="24.2453%" y="341" width="0.9529%" height="15" fill="rgb(209,209,32)" fg:x="39540" fg:w="1554"/><text x="24.4953%" y="351.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (1,042 samples, 0.64%)</title><rect x="24.5593%" y="325" width="0.6389%" height="15" fill="rgb(221,70,22)" fg:x="40052" fg:w="1042"/><text x="24.8093%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (59 samples, 0.04%)</title><rect x="25.1620%" y="309" width="0.0362%" height="15" fill="rgb(248,145,5)" fg:x="41035" fg:w="59"/><text x="25.4120%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (44 samples, 0.03%)</title><rect x="25.1712%" y="293" width="0.0270%" height="15" fill="rgb(226,116,26)" fg:x="41050" fg:w="44"/><text x="25.4212%" y="303.50"></text></g><g><title>powergraph`hashbrown::set::HashSet&lt;T,S,A&gt;::get (88 samples, 0.05%)</title><rect x="25.1982%" y="341" width="0.0540%" height="15" fill="rgb(244,5,17)" fg:x="41094" fg:w="88"/><text x="25.4482%" y="351.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (25 samples, 0.02%)</title><rect x="25.3006%" y="309" width="0.0153%" height="15" fill="rgb(252,159,33)" fg:x="41261" fg:w="25"/><text x="25.5506%" y="319.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (17 samples, 0.01%)</title><rect x="25.3055%" y="293" width="0.0104%" height="15" fill="rgb(206,71,0)" fg:x="41269" fg:w="17"/><text x="25.5555%" y="303.50"></text></g><g><title>powergraph`&lt;colored::ColoredString as core::fmt::Display&gt;::fmt (48 samples, 0.03%)</title><rect x="25.3196%" y="309" width="0.0294%" height="15" fill="rgb(233,118,54)" fg:x="41292" fg:w="48"/><text x="25.5696%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (40 samples, 0.02%)</title><rect x="25.3828%" y="277" width="0.0245%" height="15" fill="rgb(234,83,48)" fg:x="41395" fg:w="40"/><text x="25.6328%" y="287.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (31 samples, 0.02%)</title><rect x="25.3883%" y="261" width="0.0190%" height="15" fill="rgb(228,3,54)" fg:x="41404" fg:w="31"/><text x="25.6383%" y="271.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (22 samples, 0.01%)</title><rect x="25.3938%" y="245" width="0.0135%" height="15" fill="rgb(226,155,13)" fg:x="41413" fg:w="22"/><text x="25.6438%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.01%)</title><rect x="25.4294%" y="165" width="0.0117%" height="15" fill="rgb(241,28,37)" fg:x="41471" fg:w="19"/><text x="25.6794%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (22 samples, 0.01%)</title><rect x="25.4288%" y="181" width="0.0135%" height="15" fill="rgb(233,93,10)" fg:x="41470" fg:w="22"/><text x="25.6788%" y="191.50"></text></g><g><title>powergraph`alloc::fmt::format::format_inner (127 samples, 0.08%)</title><rect x="25.3656%" y="309" width="0.0779%" height="15" fill="rgb(225,113,19)" fg:x="41367" fg:w="127"/><text x="25.6156%" y="319.50"></text></g><g><title>powergraph`core::fmt::write (117 samples, 0.07%)</title><rect x="25.3717%" y="293" width="0.0717%" height="15" fill="rgb(241,2,18)" fg:x="41377" fg:w="117"/><text x="25.6217%" y="303.50"></text></g><g><title>powergraph`core::fmt::write (40 samples, 0.02%)</title><rect x="25.4190%" y="277" width="0.0245%" height="15" fill="rgb(228,207,21)" fg:x="41454" fg:w="40"/><text x="25.6690%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (28 samples, 0.02%)</title><rect x="25.4263%" y="261" width="0.0172%" height="15" fill="rgb(213,211,35)" fg:x="41466" fg:w="28"/><text x="25.6763%" y="271.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (27 samples, 0.02%)</title><rect x="25.4269%" y="245" width="0.0166%" height="15" fill="rgb(209,83,10)" fg:x="41467" fg:w="27"/><text x="25.6769%" y="255.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (26 samples, 0.02%)</title><rect x="25.4275%" y="229" width="0.0159%" height="15" fill="rgb(209,164,1)" fg:x="41468" fg:w="26"/><text x="25.6775%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (26 samples, 0.02%)</title><rect x="25.4275%" y="213" width="0.0159%" height="15" fill="rgb(213,184,43)" fg:x="41468" fg:w="26"/><text x="25.6775%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (25 samples, 0.02%)</title><rect x="25.4282%" y="197" width="0.0153%" height="15" fill="rgb(231,61,34)" fg:x="41469" fg:w="25"/><text x="25.6782%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`write (625 samples, 0.38%)</title><rect x="25.4699%" y="229" width="0.3832%" height="15" fill="rgb(235,75,3)" fg:x="41537" fg:w="625"/><text x="25.7199%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`write (508 samples, 0.31%)</title><rect x="25.8641%" y="213" width="0.3115%" height="15" fill="rgb(220,106,47)" fg:x="42180" fg:w="508"/><text x="26.1141%" y="223.50"></text></g><g><title>powergraph`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1,158 samples, 0.71%)</title><rect x="25.4662%" y="245" width="0.7101%" height="15" fill="rgb(210,196,33)" fg:x="41531" fg:w="1158"/><text x="25.7162%" y="255.50"></text></g><g><title>powergraph`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (510 samples, 0.31%)</title><rect x="25.8635%" y="229" width="0.3127%" height="15" fill="rgb(229,154,42)" fg:x="42179" fg:w="510"/><text x="26.1135%" y="239.50"></text></g><g><title>powergraph`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1,168 samples, 0.72%)</title><rect x="25.4643%" y="261" width="0.7162%" height="15" fill="rgb(228,114,26)" fg:x="41528" fg:w="1168"/><text x="25.7143%" y="271.50"></text></g><g><title>powergraph`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1,188 samples, 0.73%)</title><rect x="25.4545%" y="293" width="0.7285%" height="15" fill="rgb(208,144,1)" fg:x="41512" fg:w="1188"/><text x="25.7045%" y="303.50"></text></g><g><title>powergraph`core::fmt::write (1,174 samples, 0.72%)</title><rect x="25.4631%" y="277" width="0.7199%" height="15" fill="rgb(239,112,37)" fg:x="41526" fg:w="1174"/><text x="25.7131%" y="287.50"></text></g><g><title>powergraph`std::io::stdio::_print (1,197 samples, 0.73%)</title><rect x="25.4496%" y="309" width="0.7340%" height="15" fill="rgb(210,96,50)" fg:x="41504" fg:w="1197"/><text x="25.6996%" y="319.50"></text></g><g><title>powergraph`time::formatting::format_component (59 samples, 0.04%)</title><rect x="26.2222%" y="261" width="0.0362%" height="15" fill="rgb(222,178,2)" fg:x="42764" fg:w="59"/><text x="26.4722%" y="271.50"></text></g><g><title>powergraph`time::formatting::formattable::_&lt;impl time::formatting::formattable::sealed::Sealed for [time::format_description::borrowed_format_item::BorrowedFormatItem]&gt;::format_into (91 samples, 0.06%)</title><rect x="26.2038%" y="293" width="0.0558%" height="15" fill="rgb(226,74,18)" fg:x="42734" fg:w="91"/><text x="26.4538%" y="303.50"></text></g><g><title>powergraph`time::formatting::formattable::_&lt;impl time::formatting::formattable::sealed::Sealed for time::format_description::borrowed_format_item::BorrowedFormatItem&gt;::format_into (85 samples, 0.05%)</title><rect x="26.2075%" y="277" width="0.0521%" height="15" fill="rgb(225,67,54)" fg:x="42740" fg:w="85"/><text x="26.4575%" y="287.50"></text></g><g><title>powergraph`time::formatting::formattable::sealed::Sealed::format (117 samples, 0.07%)</title><rect x="26.1903%" y="309" width="0.0717%" height="15" fill="rgb(251,92,32)" fg:x="42712" fg:w="117"/><text x="26.4403%" y="319.50"></text></g><g><title>powergraph`&lt;simple_logger::SimpleLogger as log::Log&gt;::log (1,629 samples, 1.00%)</title><rect x="25.2742%" y="325" width="0.9989%" height="15" fill="rgb(228,149,22)" fg:x="41218" fg:w="1629"/><text x="25.5242%" y="335.50"></text></g><g><title>powergraph`log::__private_api::log_impl (1,684 samples, 1.03%)</title><rect x="25.2522%" y="341" width="1.0326%" height="15" fill="rgb(243,54,13)" fg:x="41182" fg:w="1684"/><text x="25.5022%" y="351.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (31 samples, 0.02%)</title><rect x="26.3191%" y="309" width="0.0190%" height="15" fill="rgb(243,180,28)" fg:x="42922" fg:w="31"/><text x="26.5691%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (28 samples, 0.02%)</title><rect x="26.3387%" y="293" width="0.0172%" height="15" fill="rgb(208,167,24)" fg:x="42954" fg:w="28"/><text x="26.5887%" y="303.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (35 samples, 0.02%)</title><rect x="26.3559%" y="293" width="0.0215%" height="15" fill="rgb(245,73,45)" fg:x="42982" fg:w="35"/><text x="26.6059%" y="303.50"></text></g><g><title>powergraph`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (69 samples, 0.04%)</title><rect x="26.3381%" y="309" width="0.0423%" height="15" fill="rgb(237,203,48)" fg:x="42953" fg:w="69"/><text x="26.5881%" y="319.50"></text></g><g><title>powergraph`alloc::vec::in_place_collect::from_iter_in_place (18 samples, 0.01%)</title><rect x="26.3964%" y="293" width="0.0110%" height="15" fill="rgb(211,197,16)" fg:x="43048" fg:w="18"/><text x="26.6464%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (18 samples, 0.01%)</title><rect x="26.4264%" y="261" width="0.0110%" height="15" fill="rgb(243,99,51)" fg:x="43097" fg:w="18"/><text x="26.6764%" y="271.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (33 samples, 0.02%)</title><rect x="26.4209%" y="277" width="0.0202%" height="15" fill="rgb(215,123,29)" fg:x="43088" fg:w="33"/><text x="26.6709%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (242 samples, 0.15%)</title><rect x="26.2989%" y="325" width="0.1484%" height="15" fill="rgb(239,186,37)" fg:x="42889" fg:w="242"/><text x="26.5489%" y="335.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::get_id (109 samples, 0.07%)</title><rect x="26.3804%" y="309" width="0.0668%" height="15" fill="rgb(252,136,39)" fg:x="43022" fg:w="109"/><text x="26.6304%" y="319.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::to_vec (53 samples, 0.03%)</title><rect x="26.4148%" y="293" width="0.0325%" height="15" fill="rgb(223,213,32)" fg:x="43078" fg:w="53"/><text x="26.6648%" y="303.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (48 samples, 0.03%)</title><rect x="26.4509%" y="309" width="0.0294%" height="15" fill="rgb(233,115,5)" fg:x="43137" fg:w="48"/><text x="26.7009%" y="319.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (63 samples, 0.04%)</title><rect x="26.4479%" y="325" width="0.0386%" height="15" fill="rgb(207,226,44)" fg:x="43132" fg:w="63"/><text x="26.6979%" y="335.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.01%)</title><rect x="26.4871%" y="325" width="0.0117%" height="15" fill="rgb(208,126,0)" fg:x="43196" fg:w="19"/><text x="26.7371%" y="335.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (154 samples, 0.09%)</title><rect x="26.4994%" y="309" width="0.0944%" height="15" fill="rgb(244,66,21)" fg:x="43216" fg:w="154"/><text x="26.7494%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_free (407 samples, 0.25%)</title><rect x="26.9470%" y="293" width="0.2496%" height="15" fill="rgb(222,97,12)" fg:x="43946" fg:w="407"/><text x="27.1970%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (71 samples, 0.04%)</title><rect x="27.1972%" y="293" width="0.0435%" height="15" fill="rgb(219,213,19)" fg:x="44354" fg:w="71"/><text x="27.4472%" y="303.50"></text></g><g><title>powergraph`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (81 samples, 0.05%)</title><rect x="27.2548%" y="293" width="0.0497%" height="15" fill="rgb(252,169,30)" fg:x="44448" fg:w="81"/><text x="27.5048%" y="303.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (650 samples, 0.40%)</title><rect x="27.9201%" y="277" width="0.3986%" height="15" fill="rgb(206,32,51)" fg:x="45533" fg:w="650"/><text x="28.1701%" y="287.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (388 samples, 0.24%)</title><rect x="28.3193%" y="277" width="0.2379%" height="15" fill="rgb(250,172,42)" fg:x="46184" fg:w="388"/><text x="28.5693%" y="287.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (2,083 samples, 1.28%)</title><rect x="27.3045%" y="293" width="1.2773%" height="15" fill="rgb(209,34,43)" fg:x="44529" fg:w="2083"/><text x="27.5545%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (40 samples, 0.02%)</title><rect x="28.5572%" y="277" width="0.0245%" height="15" fill="rgb(223,11,35)" fg:x="46572" fg:w="40"/><text x="28.8072%" y="287.50"></text></g><g><title>powergraph`DYLD-STUB$$free (99 samples, 0.06%)</title><rect x="28.5818%" y="293" width="0.0607%" height="15" fill="rgb(251,219,26)" fg:x="46612" fg:w="99"/><text x="28.8318%" y="303.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22 samples, 0.01%)</title><rect x="28.6504%" y="277" width="0.0135%" height="15" fill="rgb(231,119,3)" fg:x="46724" fg:w="22"/><text x="28.9004%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17 samples, 0.01%)</title><rect x="28.6652%" y="261" width="0.0104%" height="15" fill="rgb(216,97,11)" fg:x="46748" fg:w="17"/><text x="28.9152%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (48 samples, 0.03%)</title><rect x="28.6474%" y="293" width="0.0294%" height="15" fill="rgb(223,59,9)" fg:x="46719" fg:w="48"/><text x="28.8974%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (21 samples, 0.01%)</title><rect x="28.6639%" y="277" width="0.0129%" height="15" fill="rgb(233,93,31)" fg:x="46746" fg:w="21"/><text x="28.9139%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (251 samples, 0.15%)</title><rect x="28.6768%" y="293" width="0.1539%" height="15" fill="rgb(239,81,33)" fg:x="46767" fg:w="251"/><text x="28.9268%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (201 samples, 0.12%)</title><rect x="28.9325%" y="277" width="0.1233%" height="15" fill="rgb(213,120,34)" fg:x="47184" fg:w="201"/><text x="29.1825%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (86 samples, 0.05%)</title><rect x="29.0558%" y="277" width="0.0527%" height="15" fill="rgb(243,49,53)" fg:x="47385" fg:w="86"/><text x="29.3058%" y="287.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (18 samples, 0.01%)</title><rect x="29.1085%" y="277" width="0.0110%" height="15" fill="rgb(247,216,33)" fg:x="47471" fg:w="18"/><text x="29.3585%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (18 samples, 0.01%)</title><rect x="29.1085%" y="261" width="0.0110%" height="15" fill="rgb(226,26,14)" fg:x="47471" fg:w="18"/><text x="29.3585%" y="271.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (55 samples, 0.03%)</title><rect x="29.2845%" y="261" width="0.0337%" height="15" fill="rgb(215,49,53)" fg:x="47758" fg:w="55"/><text x="29.5345%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,651 samples, 2.85%)</title><rect x="29.9479%" y="245" width="2.8519%" height="15" fill="rgb(245,162,40)" fg:x="48840" fg:w="4651"/><text x="30.1979%" y="255.50">po..</text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (996 samples, 0.61%)</title><rect x="32.7999%" y="245" width="0.6107%" height="15" fill="rgb(229,68,17)" fg:x="53491" fg:w="996"/><text x="33.0499%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (6,681 samples, 4.10%)</title><rect x="29.3213%" y="261" width="4.0967%" height="15" fill="rgb(213,182,10)" fg:x="47818" fg:w="6681"/><text x="29.5713%" y="271.50">powe..</text></g><g><title>libdyld.dylib`tlv_get_addr (385 samples, 0.24%)</title><rect x="33.4725%" y="245" width="0.2361%" height="15" fill="rgb(245,125,30)" fg:x="54588" fg:w="385"/><text x="33.7225%" y="255.50"></text></g><g><title>powergraph`powergraph::cluster_repository::is_partial_subset (8,018 samples, 4.92%)</title><rect x="28.8307%" y="293" width="4.9165%" height="15" fill="rgb(232,202,2)" fg:x="47018" fg:w="8018"/><text x="29.0807%" y="303.50">powerg..</text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (7,547 samples, 4.63%)</title><rect x="29.1195%" y="277" width="4.6277%" height="15" fill="rgb(237,140,51)" fg:x="47489" fg:w="7547"/><text x="29.3695%" y="287.50">power..</text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (537 samples, 0.33%)</title><rect x="33.4180%" y="261" width="0.3293%" height="15" fill="rgb(236,157,25)" fg:x="54499" fg:w="537"/><text x="33.6680%" y="271.50"></text></g><g><title>powergraph`core::ops::function::FnOnce::call_once (63 samples, 0.04%)</title><rect x="33.7086%" y="245" width="0.0386%" height="15" fill="rgb(219,209,0)" fg:x="54973" fg:w="63"/><text x="33.9586%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (50 samples, 0.03%)</title><rect x="33.7895%" y="277" width="0.0307%" height="15" fill="rgb(240,116,54)" fg:x="55105" fg:w="50"/><text x="34.0395%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (928 samples, 0.57%)</title><rect x="33.8202%" y="277" width="0.5690%" height="15" fill="rgb(216,10,36)" fg:x="55155" fg:w="928"/><text x="34.0702%" y="287.50"></text></g><g><title>libsystem_platform.dylib`__bzero (44 samples, 0.03%)</title><rect x="34.3960%" y="277" width="0.0270%" height="15" fill="rgb(222,72,44)" fg:x="56094" fg:w="44"/><text x="34.6460%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (161 samples, 0.10%)</title><rect x="34.4230%" y="277" width="0.0987%" height="15" fill="rgb(232,159,9)" fg:x="56138" fg:w="161"/><text x="34.6730%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (251 samples, 0.15%)</title><rect x="34.5223%" y="277" width="0.1539%" height="15" fill="rgb(210,39,32)" fg:x="56300" fg:w="251"/><text x="34.7723%" y="287.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (51 samples, 0.03%)</title><rect x="35.1809%" y="261" width="0.0313%" height="15" fill="rgb(216,194,45)" fg:x="57374" fg:w="51"/><text x="35.4309%" y="271.50"></text></g><g><title>powergraph`core::ops::function::FnOnce::call_once (285 samples, 0.17%)</title><rect x="35.2121%" y="261" width="0.1748%" height="15" fill="rgb(218,18,35)" fg:x="57425" fg:w="285"/><text x="35.4621%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (369 samples, 0.23%)</title><rect x="35.3869%" y="261" width="0.2263%" height="15" fill="rgb(207,83,51)" fg:x="57710" fg:w="369"/><text x="35.6369%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,302 samples, 2.02%)</title><rect x="36.1147%" y="245" width="2.0247%" height="15" fill="rgb(225,63,43)" fg:x="58897" fg:w="3302"/><text x="36.3647%" y="255.50">p..</text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (1,445 samples, 0.89%)</title><rect x="38.1395%" y="245" width="0.8861%" height="15" fill="rgb(207,57,36)" fg:x="62199" fg:w="1445"/><text x="38.3895%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (27 samples, 0.02%)</title><rect x="39.4590%" y="229" width="0.0166%" height="15" fill="rgb(216,99,33)" fg:x="64351" fg:w="27"/><text x="39.7090%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (297 samples, 0.18%)</title><rect x="39.4817%" y="229" width="0.1821%" height="15" fill="rgb(225,42,16)" fg:x="64388" fg:w="297"/><text x="39.7317%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,758 samples, 2.30%)</title><rect x="39.6639%" y="229" width="2.3043%" height="15" fill="rgb(220,201,45)" fg:x="64685" fg:w="3758"/><text x="39.9139%" y="239.50">p..</text></g><g><title>powergraph`DYLD-STUB$$memset (58 samples, 0.04%)</title><rect x="41.9731%" y="229" width="0.0356%" height="15" fill="rgb(225,33,4)" fg:x="68451" fg:w="58"/><text x="42.2231%" y="239.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (1,783 samples, 1.09%)</title><rect x="42.0093%" y="229" width="1.0933%" height="15" fill="rgb(224,33,50)" fg:x="68510" fg:w="1783"/><text x="42.2593%" y="239.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (131 samples, 0.08%)</title><rect x="43.1026%" y="229" width="0.0803%" height="15" fill="rgb(246,198,51)" fg:x="70293" fg:w="131"/><text x="43.3526%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (448 samples, 0.27%)</title><rect x="43.6226%" y="213" width="0.2747%" height="15" fill="rgb(205,22,4)" fg:x="71141" fg:w="448"/><text x="43.8726%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (47 samples, 0.03%)</title><rect x="43.8973%" y="213" width="0.0288%" height="15" fill="rgb(206,3,8)" fg:x="71589" fg:w="47"/><text x="44.1473%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (545 samples, 0.33%)</title><rect x="43.9286%" y="213" width="0.3342%" height="15" fill="rgb(251,23,15)" fg:x="71640" fg:w="545"/><text x="44.1786%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (24 samples, 0.01%)</title><rect x="44.2664%" y="213" width="0.0147%" height="15" fill="rgb(252,88,28)" fg:x="72191" fg:w="24"/><text x="44.5164%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (855 samples, 0.52%)</title><rect x="44.2811%" y="213" width="0.5243%" height="15" fill="rgb(212,127,14)" fg:x="72215" fg:w="855"/><text x="44.5311%" y="223.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (67 samples, 0.04%)</title><rect x="44.8054%" y="213" width="0.0411%" height="15" fill="rgb(247,145,37)" fg:x="73070" fg:w="67"/><text x="45.0554%" y="223.50"></text></g><g><title>powergraph`__rdl_alloc (62 samples, 0.04%)</title><rect x="44.8465%" y="213" width="0.0380%" height="15" fill="rgb(209,117,53)" fg:x="73137" fg:w="62"/><text x="45.0965%" y="223.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (227 samples, 0.14%)</title><rect x="44.8876%" y="213" width="0.1392%" height="15" fill="rgb(212,90,42)" fg:x="73204" fg:w="227"/><text x="45.1376%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3,291 samples, 2.02%)</title><rect x="43.1829%" y="229" width="2.0180%" height="15" fill="rgb(218,164,37)" fg:x="70424" fg:w="3291"/><text x="43.4329%" y="239.50">p..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (284 samples, 0.17%)</title><rect x="45.0268%" y="213" width="0.1741%" height="15" fill="rgb(246,65,34)" fg:x="73431" fg:w="284"/><text x="45.2768%" y="223.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10,117 samples, 6.20%)</title><rect x="39.0255%" y="245" width="6.2036%" height="15" fill="rgb(231,100,33)" fg:x="63644" fg:w="10117"/><text x="39.2755%" y="255.50">powergra..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (46 samples, 0.03%)</title><rect x="45.2009%" y="229" width="0.0282%" height="15" fill="rgb(228,126,14)" fg:x="73715" fg:w="46"/><text x="45.4509%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (15,808 samples, 9.69%)</title><rect x="35.6132%" y="261" width="9.6932%" height="15" fill="rgb(215,173,21)" fg:x="58079" fg:w="15808"/><text x="35.8632%" y="271.50">powergraph`has..</text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (126 samples, 0.08%)</title><rect x="45.2291%" y="245" width="0.0773%" height="15" fill="rgb(210,6,40)" fg:x="73761" fg:w="126"/><text x="45.4791%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1,514 samples, 0.93%)</title><rect x="45.5829%" y="245" width="0.9284%" height="15" fill="rgb(212,48,18)" fg:x="74338" fg:w="1514"/><text x="45.8329%" y="255.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (19,818 samples, 12.15%)</title><rect x="34.6762%" y="277" width="12.1521%" height="15" fill="rgb(230,214,11)" fg:x="56551" fg:w="19818"/><text x="34.9262%" y="287.50">powergraph`powergr..</text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (2,482 samples, 1.52%)</title><rect x="45.3064%" y="261" width="1.5219%" height="15" fill="rgb(254,105,39)" fg:x="73887" fg:w="2482"/><text x="45.5564%" y="271.50"></text></g><g><title>powergraph`core::ops::function::FnOnce::call_once (517 samples, 0.32%)</title><rect x="46.5113%" y="245" width="0.3170%" height="15" fill="rgb(245,158,5)" fg:x="75852" fg:w="517"/><text x="46.7613%" y="255.50"></text></g><g><title>powergraph`powergraph::cluster_repository::is_subset (21,868 samples, 13.41%)</title><rect x="33.7472%" y="293" width="13.4091%" height="15" fill="rgb(249,208,11)" fg:x="55036" fg:w="21868"/><text x="33.9972%" y="303.50">powergraph`powergrap..</text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (535 samples, 0.33%)</title><rect x="46.8283%" y="277" width="0.3281%" height="15" fill="rgb(210,39,28)" fg:x="76369" fg:w="535"/><text x="47.0783%" y="287.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::get_id (80 samples, 0.05%)</title><rect x="47.1564%" y="293" width="0.0491%" height="15" fill="rgb(211,56,53)" fg:x="76904" fg:w="80"/><text x="47.4064%" y="303.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::to_vec (24 samples, 0.01%)</title><rect x="47.1907%" y="277" width="0.0147%" height="15" fill="rgb(226,201,30)" fg:x="76960" fg:w="24"/><text x="47.4407%" y="287.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (280 samples, 0.17%)</title><rect x="47.2054%" y="293" width="0.1717%" height="15" fill="rgb(239,101,34)" fg:x="76984" fg:w="280"/><text x="47.4554%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (34,117 samples, 20.92%)</title><rect x="26.5944%" y="309" width="20.9200%" height="15" fill="rgb(226,209,5)" fg:x="43371" fg:w="34117"/><text x="26.8444%" y="319.50">powergraph`hashbrown::raw::RawIte..</text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (224 samples, 0.14%)</title><rect x="47.3771%" y="293" width="0.1374%" height="15" fill="rgb(250,105,47)" fg:x="77264" fg:w="224"/><text x="47.6271%" y="303.50"></text></g><g><title>powergraph`powergraph::cluster_repository::is_partial_subset (229 samples, 0.14%)</title><rect x="47.5145%" y="309" width="0.1404%" height="15" fill="rgb(230,72,3)" fg:x="77488" fg:w="229"/><text x="47.7645%" y="319.50"></text></g><g><title>powergraph`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (34,725 samples, 21.29%)</title><rect x="26.4988%" y="325" width="21.2928%" height="15" fill="rgb(232,218,39)" fg:x="43215" fg:w="34725"/><text x="26.7488%" y="335.50">powergraph`&lt;std::collections::hash..</text></g><g><title>powergraph`powergraph::cluster_repository::is_subset (223 samples, 0.14%)</title><rect x="47.6549%" y="309" width="0.1367%" height="15" fill="rgb(248,166,6)" fg:x="77717" fg:w="223"/><text x="47.9049%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (24 samples, 0.01%)</title><rect x="47.8014%" y="325" width="0.0147%" height="15" fill="rgb(247,89,20)" fg:x="77956" fg:w="24"/><text x="48.0514%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (19 samples, 0.01%)</title><rect x="47.8045%" y="309" width="0.0117%" height="15" fill="rgb(248,130,54)" fg:x="77961" fg:w="19"/><text x="48.0545%" y="319.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::get_id (19 samples, 0.01%)</title><rect x="47.8174%" y="325" width="0.0117%" height="15" fill="rgb(234,196,4)" fg:x="77982" fg:w="19"/><text x="48.0674%" y="335.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (26 samples, 0.02%)</title><rect x="47.8352%" y="309" width="0.0159%" height="15" fill="rgb(250,143,31)" fg:x="78011" fg:w="26"/><text x="48.0852%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (22 samples, 0.01%)</title><rect x="47.8376%" y="293" width="0.0135%" height="15" fill="rgb(211,110,34)" fg:x="78015" fg:w="22"/><text x="48.0876%" y="303.50"></text></g><g><title>powergraph`powergraph::cluster_repository::ClusterRepository::add_cluster (35,164 samples, 21.56%)</title><rect x="26.2897%" y="341" width="21.5620%" height="15" fill="rgb(215,124,48)" fg:x="42874" fg:w="35164"/><text x="26.5397%" y="351.50">powergraph`powergraph::cluster_rep..</text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::to_vec (37 samples, 0.02%)</title><rect x="47.8290%" y="325" width="0.0227%" height="15" fill="rgb(216,46,13)" fg:x="78001" fg:w="37"/><text x="48.0790%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.02%)</title><rect x="47.8897%" y="245" width="0.0166%" height="15" fill="rgb(205,184,25)" fg:x="78100" fg:w="27"/><text x="48.1397%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (78 samples, 0.05%)</title><rect x="47.8677%" y="261" width="0.0478%" height="15" fill="rgb(228,1,10)" fg:x="78064" fg:w="78"/><text x="48.1177%" y="271.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (104 samples, 0.06%)</title><rect x="47.8640%" y="277" width="0.0638%" height="15" fill="rgb(213,116,27)" fg:x="78058" fg:w="104"/><text x="48.1140%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (20 samples, 0.01%)</title><rect x="47.9155%" y="261" width="0.0123%" height="15" fill="rgb(241,95,50)" fg:x="78142" fg:w="20"/><text x="48.1655%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (17 samples, 0.01%)</title><rect x="47.9173%" y="245" width="0.0104%" height="15" fill="rgb(238,48,32)" fg:x="78145" fg:w="17"/><text x="48.1673%" y="255.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (18 samples, 0.01%)</title><rect x="47.9369%" y="245" width="0.0110%" height="15" fill="rgb(235,113,49)" fg:x="78177" fg:w="18"/><text x="48.1869%" y="255.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (30 samples, 0.02%)</title><rect x="47.9314%" y="261" width="0.0184%" height="15" fill="rgb(205,127,43)" fg:x="78168" fg:w="30"/><text x="48.1814%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (46 samples, 0.03%)</title><rect x="47.9541%" y="229" width="0.0282%" height="15" fill="rgb(250,162,2)" fg:x="78205" fg:w="46"/><text x="48.2041%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (18 samples, 0.01%)</title><rect x="47.9878%" y="213" width="0.0110%" height="15" fill="rgb(220,13,41)" fg:x="78260" fg:w="18"/><text x="48.2378%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (18 samples, 0.01%)</title><rect x="47.9989%" y="213" width="0.0110%" height="15" fill="rgb(249,221,25)" fg:x="78278" fg:w="18"/><text x="48.2489%" y="223.50"></text></g><g><title>powergraph`core::slice::sort::stable::drift::create_run (23 samples, 0.01%)</title><rect x="48.0167%" y="181" width="0.0141%" height="15" fill="rgb(215,208,19)" fg:x="78307" fg:w="23"/><text x="48.2667%" y="191.50"></text></g><g><title>powergraph`core::slice::sort::stable::quicksort::quicksort (23 samples, 0.01%)</title><rect x="48.0167%" y="165" width="0.0141%" height="15" fill="rgb(236,175,2)" fg:x="78307" fg:w="23"/><text x="48.2667%" y="175.50"></text></g><g><title>powergraph`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (23 samples, 0.01%)</title><rect x="48.0167%" y="149" width="0.0141%" height="15" fill="rgb(241,52,2)" fg:x="78307" fg:w="23"/><text x="48.2667%" y="159.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::hash::Hash&gt;::hash (148 samples, 0.09%)</title><rect x="47.9498%" y="245" width="0.0908%" height="15" fill="rgb(248,140,14)" fg:x="78198" fg:w="148"/><text x="48.1998%" y="255.50"></text></g><g><title>powergraph`itertools::Itertools::sorted (94 samples, 0.06%)</title><rect x="47.9829%" y="229" width="0.0576%" height="15" fill="rgb(253,22,42)" fg:x="78252" fg:w="94"/><text x="48.2329%" y="239.50"></text></g><g><title>powergraph`core::slice::sort::stable::driftsort_main (40 samples, 0.02%)</title><rect x="48.0160%" y="213" width="0.0245%" height="15" fill="rgb(234,61,47)" fg:x="78306" fg:w="40"/><text x="48.2660%" y="223.50"></text></g><g><title>powergraph`core::slice::sort::stable::drift::sort (40 samples, 0.02%)</title><rect x="48.0160%" y="197" width="0.0245%" height="15" fill="rgb(208,226,15)" fg:x="78306" fg:w="40"/><text x="48.2660%" y="207.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (149 samples, 0.09%)</title><rect x="47.9498%" y="261" width="0.0914%" height="15" fill="rgb(217,221,4)" fg:x="78198" fg:w="149"/><text x="48.1998%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (41 samples, 0.03%)</title><rect x="48.0498%" y="213" width="0.0251%" height="15" fill="rgb(212,174,34)" fg:x="78361" fg:w="41"/><text x="48.2998%" y="223.50"></text></g><g><title>powergraph`core::slice::sort::stable::drift::create_run (24 samples, 0.01%)</title><rect x="48.1037%" y="165" width="0.0147%" height="15" fill="rgb(253,83,4)" fg:x="78449" fg:w="24"/><text x="48.3537%" y="175.50"></text></g><g><title>powergraph`core::slice::sort::stable::quicksort::quicksort (24 samples, 0.01%)</title><rect x="48.1037%" y="149" width="0.0147%" height="15" fill="rgb(250,195,49)" fg:x="78449" fg:w="24"/><text x="48.3537%" y="159.50"></text></g><g><title>powergraph`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (22 samples, 0.01%)</title><rect x="48.1050%" y="133" width="0.0135%" height="15" fill="rgb(241,192,25)" fg:x="78451" fg:w="22"/><text x="48.3550%" y="143.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (131 samples, 0.08%)</title><rect x="48.0449%" y="245" width="0.0803%" height="15" fill="rgb(208,124,10)" fg:x="78353" fg:w="131"/><text x="48.2949%" y="255.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::hash::Hash&gt;::hash (131 samples, 0.08%)</title><rect x="48.0449%" y="229" width="0.0803%" height="15" fill="rgb(222,33,0)" fg:x="78353" fg:w="131"/><text x="48.2949%" y="239.50"></text></g><g><title>powergraph`itertools::Itertools::sorted (82 samples, 0.05%)</title><rect x="48.0749%" y="213" width="0.0503%" height="15" fill="rgb(234,209,28)" fg:x="78402" fg:w="82"/><text x="48.3249%" y="223.50"></text></g><g><title>powergraph`core::slice::sort::stable::driftsort_main (37 samples, 0.02%)</title><rect x="48.1025%" y="197" width="0.0227%" height="15" fill="rgb(224,11,23)" fg:x="78447" fg:w="37"/><text x="48.3525%" y="207.50"></text></g><g><title>powergraph`core::slice::sort::stable::drift::sort (37 samples, 0.02%)</title><rect x="48.1025%" y="181" width="0.0227%" height="15" fill="rgb(232,99,1)" fg:x="78447" fg:w="37"/><text x="48.3525%" y="191.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (136 samples, 0.08%)</title><rect x="48.0430%" y="261" width="0.0834%" height="15" fill="rgb(237,95,45)" fg:x="78350" fg:w="136"/><text x="48.2930%" y="271.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (462 samples, 0.28%)</title><rect x="47.8517%" y="325" width="0.2833%" height="15" fill="rgb(208,109,11)" fg:x="78038" fg:w="462"/><text x="48.1017%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (461 samples, 0.28%)</title><rect x="47.8523%" y="309" width="0.2827%" height="15" fill="rgb(216,190,48)" fg:x="78039" fg:w="461"/><text x="48.1023%" y="319.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (461 samples, 0.28%)</title><rect x="47.8523%" y="293" width="0.2827%" height="15" fill="rgb(251,171,36)" fg:x="78039" fg:w="461"/><text x="48.1023%" y="303.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (338 samples, 0.21%)</title><rect x="47.9277%" y="277" width="0.2073%" height="15" fill="rgb(230,62,22)" fg:x="78162" fg:w="338"/><text x="48.1777%" y="287.50"></text></g><g><title>powergraph`powergraph::cluster_repository::ClusterRepository::get_sibling_clusters (463 samples, 0.28%)</title><rect x="47.8517%" y="341" width="0.2839%" height="15" fill="rgb(225,114,35)" fg:x="78038" fg:w="463"/><text x="48.1017%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_free (85 samples, 0.05%)</title><rect x="48.1693%" y="325" width="0.0521%" height="15" fill="rgb(215,118,42)" fg:x="78556" fg:w="85"/><text x="48.4193%" y="335.50"></text></g><g><title>powergraph`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (21 samples, 0.01%)</title><rect x="48.2288%" y="325" width="0.0129%" height="15" fill="rgb(243,119,21)" fg:x="78653" fg:w="21"/><text x="48.4788%" y="335.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (50 samples, 0.03%)</title><rect x="48.2540%" y="309" width="0.0307%" height="15" fill="rgb(252,177,53)" fg:x="78694" fg:w="50"/><text x="48.5040%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (159 samples, 0.10%)</title><rect x="48.3331%" y="293" width="0.0975%" height="15" fill="rgb(237,209,29)" fg:x="78823" fg:w="159"/><text x="48.5831%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`malloc (20 samples, 0.01%)</title><rect x="48.4306%" y="293" width="0.0123%" height="15" fill="rgb(212,65,23)" fg:x="78982" fg:w="20"/><text x="48.6806%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (262 samples, 0.16%)</title><rect x="48.4440%" y="293" width="0.1607%" height="15" fill="rgb(230,222,46)" fg:x="79004" fg:w="262"/><text x="48.6940%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (356 samples, 0.22%)</title><rect x="48.6053%" y="293" width="0.2183%" height="15" fill="rgb(215,135,32)" fg:x="79267" fg:w="356"/><text x="48.8553%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (171 samples, 0.10%)</title><rect x="48.8733%" y="277" width="0.1049%" height="15" fill="rgb(246,101,22)" fg:x="79704" fg:w="171"/><text x="49.1233%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (166 samples, 0.10%)</title><rect x="48.8763%" y="261" width="0.1018%" height="15" fill="rgb(206,107,13)" fg:x="79709" fg:w="166"/><text x="49.1263%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (40 samples, 0.02%)</title><rect x="48.9781%" y="277" width="0.0245%" height="15" fill="rgb(250,100,44)" fg:x="79875" fg:w="40"/><text x="49.2281%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (32 samples, 0.02%)</title><rect x="48.9830%" y="261" width="0.0196%" height="15" fill="rgb(231,147,38)" fg:x="79883" fg:w="32"/><text x="49.2330%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (26 samples, 0.02%)</title><rect x="48.9867%" y="245" width="0.0159%" height="15" fill="rgb(229,8,40)" fg:x="79889" fg:w="26"/><text x="49.2367%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (293 samples, 0.18%)</title><rect x="48.8236%" y="293" width="0.1797%" height="15" fill="rgb(221,135,30)" fg:x="79623" fg:w="293"/><text x="49.0736%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (1,205 samples, 0.74%)</title><rect x="48.2846%" y="309" width="0.7389%" height="15" fill="rgb(249,193,18)" fg:x="78744" fg:w="1205"/><text x="48.5346%" y="319.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,261 samples, 0.77%)</title><rect x="48.2509%" y="325" width="0.7732%" height="15" fill="rgb(209,133,39)" fg:x="78689" fg:w="1261"/><text x="48.5009%" y="335.50"></text></g><g><title>powergraph`DYLD-STUB$$free (30 samples, 0.02%)</title><rect x="49.0241%" y="325" width="0.0184%" height="15" fill="rgb(232,100,14)" fg:x="79950" fg:w="30"/><text x="49.2741%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (117 samples, 0.07%)</title><rect x="49.0572%" y="309" width="0.0717%" height="15" fill="rgb(224,185,1)" fg:x="80004" fg:w="117"/><text x="49.3072%" y="319.50"></text></g><g><title>libsystem_platform.dylib`__bzero (25 samples, 0.02%)</title><rect x="49.1376%" y="309" width="0.0153%" height="15" fill="rgb(223,139,8)" fg:x="80135" fg:w="25"/><text x="49.3876%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (85 samples, 0.05%)</title><rect x="49.1529%" y="309" width="0.0521%" height="15" fill="rgb(232,213,38)" fg:x="80160" fg:w="85"/><text x="49.4029%" y="319.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (269 samples, 0.16%)</title><rect x="49.0437%" y="325" width="0.1649%" height="15" fill="rgb(207,94,22)" fg:x="79982" fg:w="269"/><text x="49.2937%" y="335.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (520 samples, 0.32%)</title><rect x="49.2222%" y="309" width="0.3189%" height="15" fill="rgb(219,183,54)" fg:x="80273" fg:w="520"/><text x="49.4722%" y="319.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (110 samples, 0.07%)</title><rect x="49.5410%" y="309" width="0.0675%" height="15" fill="rgb(216,185,54)" fg:x="80793" fg:w="110"/><text x="49.7910%" y="319.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (699 samples, 0.43%)</title><rect x="49.2130%" y="325" width="0.4286%" height="15" fill="rgb(254,217,39)" fg:x="80258" fg:w="699"/><text x="49.4630%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (53 samples, 0.03%)</title><rect x="49.6091%" y="309" width="0.0325%" height="15" fill="rgb(240,178,23)" fg:x="80904" fg:w="53"/><text x="49.8591%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (46 samples, 0.03%)</title><rect x="49.6416%" y="325" width="0.0282%" height="15" fill="rgb(218,11,47)" fg:x="80957" fg:w="46"/><text x="49.8916%" y="335.50"></text></g><g><title>powergraph`powergraph::cluster_repository::ClusterRepository::remove (2,519 samples, 1.54%)</title><rect x="48.1356%" y="341" width="1.5446%" height="15" fill="rgb(218,51,51)" fg:x="78501" fg:w="2519"/><text x="48.3856%" y="351.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (19 samples, 0.01%)</title><rect x="49.6956%" y="325" width="0.0117%" height="15" fill="rgb(238,126,27)" fg:x="81045" fg:w="19"/><text x="49.9456%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (17 samples, 0.01%)</title><rect x="49.6968%" y="309" width="0.0104%" height="15" fill="rgb(249,202,22)" fg:x="81047" fg:w="17"/><text x="49.9468%" y="319.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::difference (46 samples, 0.03%)</title><rect x="49.6802%" y="341" width="0.0282%" height="15" fill="rgb(254,195,49)" fg:x="81020" fg:w="46"/><text x="49.9302%" y="351.50"></text></g><g><title>powergraph`alloc::str::join_generic_copy (18 samples, 0.01%)</title><rect x="49.7434%" y="325" width="0.0110%" height="15" fill="rgb(208,123,14)" fg:x="81123" fg:w="18"/><text x="49.9934%" y="335.50"></text></g><g><title>powergraph`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (49 samples, 0.03%)</title><rect x="49.7642%" y="309" width="0.0300%" height="15" fill="rgb(224,200,8)" fg:x="81157" fg:w="49"/><text x="50.0142%" y="319.50"></text></g><g><title>powergraph`alloc::vec::in_place_collect::from_iter_in_place (72 samples, 0.04%)</title><rect x="49.7544%" y="325" width="0.0441%" height="15" fill="rgb(217,61,36)" fg:x="81141" fg:w="72"/><text x="50.0044%" y="335.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (21 samples, 0.01%)</title><rect x="49.7998%" y="325" width="0.0129%" height="15" fill="rgb(206,35,45)" fg:x="81215" fg:w="21"/><text x="50.0498%" y="335.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (20 samples, 0.01%)</title><rect x="49.8200%" y="309" width="0.0123%" height="15" fill="rgb(217,65,33)" fg:x="81248" fg:w="20"/><text x="50.0700%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (19 samples, 0.01%)</title><rect x="49.8390%" y="293" width="0.0117%" height="15" fill="rgb(222,158,48)" fg:x="81279" fg:w="19"/><text x="50.0890%" y="303.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (49 samples, 0.03%)</title><rect x="49.8323%" y="309" width="0.0300%" height="15" fill="rgb(254,2,54)" fg:x="81268" fg:w="49"/><text x="50.0823%" y="319.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::get_id (254 samples, 0.16%)</title><rect x="49.7084%" y="341" width="0.1557%" height="15" fill="rgb(250,143,38)" fg:x="81066" fg:w="254"/><text x="49.9584%" y="351.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::to_vec (75 samples, 0.05%)</title><rect x="49.8182%" y="325" width="0.0460%" height="15" fill="rgb(248,25,0)" fg:x="81245" fg:w="75"/><text x="50.0682%" y="335.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (32 samples, 0.02%)</title><rect x="49.8832%" y="293" width="0.0196%" height="15" fill="rgb(206,152,27)" fg:x="81351" fg:w="32"/><text x="50.1332%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (31 samples, 0.02%)</title><rect x="49.8838%" y="277" width="0.0190%" height="15" fill="rgb(240,77,30)" fg:x="81352" fg:w="31"/><text x="50.1338%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (30 samples, 0.02%)</title><rect x="49.8844%" y="261" width="0.0184%" height="15" fill="rgb(231,5,3)" fg:x="81353" fg:w="30"/><text x="50.1344%" y="271.50"></text></g><g><title>powergraph`&lt;hashbrown::set::IntoIter&lt;K,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (59 samples, 0.04%)</title><rect x="49.8728%" y="309" width="0.0362%" height="15" fill="rgb(207,226,32)" fg:x="81334" fg:w="59"/><text x="50.1228%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (50 samples, 0.03%)</title><rect x="49.9163%" y="293" width="0.0307%" height="15" fill="rgb(222,207,47)" fg:x="81405" fg:w="50"/><text x="50.1663%" y="303.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (38 samples, 0.02%)</title><rect x="49.9237%" y="277" width="0.0233%" height="15" fill="rgb(229,115,45)" fg:x="81417" fg:w="38"/><text x="50.1737%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (27 samples, 0.02%)</title><rect x="49.9304%" y="261" width="0.0166%" height="15" fill="rgb(224,191,6)" fg:x="81428" fg:w="27"/><text x="50.1804%" y="271.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::new (135 samples, 0.08%)</title><rect x="49.8648%" y="325" width="0.0828%" height="15" fill="rgb(230,227,24)" fg:x="81321" fg:w="135"/><text x="50.1148%" y="335.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (52 samples, 0.03%)</title><rect x="49.9157%" y="309" width="0.0319%" height="15" fill="rgb(228,80,19)" fg:x="81404" fg:w="52"/><text x="50.1657%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (23 samples, 0.01%)</title><rect x="49.9562%" y="293" width="0.0141%" height="15" fill="rgb(247,229,0)" fg:x="81470" fg:w="23"/><text x="50.2062%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (22 samples, 0.01%)</title><rect x="49.9568%" y="277" width="0.0135%" height="15" fill="rgb(237,194,15)" fg:x="81471" fg:w="22"/><text x="50.2068%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (22 samples, 0.01%)</title><rect x="49.9568%" y="261" width="0.0135%" height="15" fill="rgb(219,203,20)" fg:x="81471" fg:w="22"/><text x="50.2068%" y="271.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::intersection (242 samples, 0.15%)</title><rect x="49.8642%" y="341" width="0.1484%" height="15" fill="rgb(234,128,8)" fg:x="81320" fg:w="242"/><text x="50.1142%" y="351.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (106 samples, 0.06%)</title><rect x="49.9476%" y="325" width="0.0650%" height="15" fill="rgb(248,202,8)" fg:x="81456" fg:w="106"/><text x="50.1976%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (105 samples, 0.06%)</title><rect x="49.9482%" y="309" width="0.0644%" height="15" fill="rgb(206,104,37)" fg:x="81457" fg:w="105"/><text x="50.1982%" y="319.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (51 samples, 0.03%)</title><rect x="49.9813%" y="293" width="0.0313%" height="15" fill="rgb(223,8,27)" fg:x="81511" fg:w="51"/><text x="50.2313%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (31 samples, 0.02%)</title><rect x="49.9936%" y="277" width="0.0190%" height="15" fill="rgb(216,217,28)" fg:x="81531" fg:w="31"/><text x="50.2436%" y="287.50"></text></g><g><title>powergraph`&lt;hashbrown::set::IntoIter&lt;K,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (52 samples, 0.03%)</title><rect x="50.0169%" y="325" width="0.0319%" height="15" fill="rgb(249,199,1)" fg:x="81569" fg:w="52"/><text x="50.2669%" y="335.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17 samples, 0.01%)</title><rect x="50.0383%" y="309" width="0.0104%" height="15" fill="rgb(240,85,17)" fg:x="81604" fg:w="17"/><text x="50.2883%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (21 samples, 0.01%)</title><rect x="50.0500%" y="325" width="0.0129%" height="15" fill="rgb(206,108,45)" fg:x="81623" fg:w="21"/><text x="50.3000%" y="335.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17 samples, 0.01%)</title><rect x="50.0665%" y="293" width="0.0104%" height="15" fill="rgb(245,210,41)" fg:x="81650" fg:w="17"/><text x="50.3165%" y="303.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::new (155 samples, 0.10%)</title><rect x="50.0126%" y="341" width="0.0950%" height="15" fill="rgb(206,13,37)" fg:x="81562" fg:w="155"/><text x="50.2626%" y="351.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (73 samples, 0.04%)</title><rect x="50.0629%" y="325" width="0.0448%" height="15" fill="rgb(250,61,18)" fg:x="81644" fg:w="73"/><text x="50.3129%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (71 samples, 0.04%)</title><rect x="50.0641%" y="309" width="0.0435%" height="15" fill="rgb(235,172,48)" fg:x="81646" fg:w="71"/><text x="50.3141%" y="319.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (48 samples, 0.03%)</title><rect x="50.0782%" y="293" width="0.0294%" height="15" fill="rgb(249,201,17)" fg:x="81669" fg:w="48"/><text x="50.3282%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (22 samples, 0.01%)</title><rect x="50.0941%" y="277" width="0.0135%" height="15" fill="rgb(219,208,6)" fg:x="81695" fg:w="22"/><text x="50.3441%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (55 samples, 0.03%)</title><rect x="50.1708%" y="277" width="0.0337%" height="15" fill="rgb(248,31,23)" fg:x="81820" fg:w="55"/><text x="50.4208%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (148 samples, 0.09%)</title><rect x="50.2333%" y="261" width="0.0908%" height="15" fill="rgb(245,15,42)" fg:x="81922" fg:w="148"/><text x="50.4833%" y="271.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (39 samples, 0.02%)</title><rect x="50.3241%" y="261" width="0.0239%" height="15" fill="rgb(222,217,39)" fg:x="82070" fg:w="39"/><text x="50.5741%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (48 samples, 0.03%)</title><rect x="50.3566%" y="245" width="0.0294%" height="15" fill="rgb(210,219,27)" fg:x="82123" fg:w="48"/><text x="50.6066%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (78 samples, 0.05%)</title><rect x="50.3480%" y="261" width="0.0478%" height="15" fill="rgb(252,166,36)" fg:x="82109" fg:w="78"/><text x="50.5980%" y="271.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (414 samples, 0.25%)</title><rect x="50.1426%" y="309" width="0.2539%" height="15" fill="rgb(245,132,34)" fg:x="81774" fg:w="414"/><text x="50.3926%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (396 samples, 0.24%)</title><rect x="50.1536%" y="293" width="0.2428%" height="15" fill="rgb(236,54,3)" fg:x="81792" fg:w="396"/><text x="50.4036%" y="303.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (303 samples, 0.19%)</title><rect x="50.2106%" y="277" width="0.1858%" height="15" fill="rgb(241,173,43)" fg:x="81885" fg:w="303"/><text x="50.4606%" y="287.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (442 samples, 0.27%)</title><rect x="50.1364%" y="325" width="0.2710%" height="15" fill="rgb(215,190,9)" fg:x="81764" fg:w="442"/><text x="50.3864%" y="335.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (167 samples, 0.10%)</title><rect x="50.4651%" y="309" width="0.1024%" height="15" fill="rgb(242,101,16)" fg:x="82300" fg:w="167"/><text x="50.7151%" y="319.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (39 samples, 0.02%)</title><rect x="50.5681%" y="309" width="0.0239%" height="15" fill="rgb(223,190,21)" fg:x="82468" fg:w="39"/><text x="50.8181%" y="319.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (85 samples, 0.05%)</title><rect x="50.6202%" y="293" width="0.0521%" height="15" fill="rgb(215,228,25)" fg:x="82553" fg:w="85"/><text x="50.8702%" y="303.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (32 samples, 0.02%)</title><rect x="50.6724%" y="293" width="0.0196%" height="15" fill="rgb(225,36,22)" fg:x="82638" fg:w="32"/><text x="50.9224%" y="303.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (163 samples, 0.10%)</title><rect x="50.7275%" y="277" width="0.0999%" height="15" fill="rgb(251,106,46)" fg:x="82728" fg:w="163"/><text x="50.9775%" y="287.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (32 samples, 0.02%)</title><rect x="50.8287%" y="277" width="0.0196%" height="15" fill="rgb(208,90,1)" fg:x="82893" fg:w="32"/><text x="51.0787%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (266 samples, 0.16%)</title><rect x="50.6920%" y="293" width="0.1631%" height="15" fill="rgb(243,10,4)" fg:x="82670" fg:w="266"/><text x="50.9420%" y="303.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (430 samples, 0.26%)</title><rect x="50.5920%" y="309" width="0.2637%" height="15" fill="rgb(212,137,27)" fg:x="82507" fg:w="430"/><text x="50.8420%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (720 samples, 0.44%)</title><rect x="50.4154%" y="325" width="0.4415%" height="15" fill="rgb(231,220,49)" fg:x="82219" fg:w="720"/><text x="50.6654%" y="335.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::similarity (1,230 samples, 0.75%)</title><rect x="50.1076%" y="341" width="0.7542%" height="15" fill="rgb(237,96,20)" fg:x="81717" fg:w="1230"/><text x="50.3576%" y="351.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::union (26 samples, 0.02%)</title><rect x="50.8618%" y="341" width="0.0159%" height="15" fill="rgb(239,229,30)" fg:x="82947" fg:w="26"/><text x="51.1118%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (74 samples, 0.05%)</title><rect x="51.1053%" y="325" width="0.0454%" height="15" fill="rgb(219,65,33)" fg:x="83344" fg:w="74"/><text x="51.3553%" y="335.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (453 samples, 0.28%)</title><rect x="51.1574%" y="325" width="0.2778%" height="15" fill="rgb(243,134,7)" fg:x="83429" fg:w="453"/><text x="51.4074%" y="335.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (220 samples, 0.13%)</title><rect x="51.4388%" y="325" width="0.1349%" height="15" fill="rgb(216,177,54)" fg:x="83888" fg:w="220"/><text x="51.6888%" y="335.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (364 samples, 0.22%)</title><rect x="51.6596%" y="309" width="0.2232%" height="15" fill="rgb(211,160,20)" fg:x="84248" fg:w="364"/><text x="51.9096%" y="319.50"></text></g><g><title>powergraph`powergraph::edge_repository::EdgeRepository::get_edge (2,064 samples, 1.27%)</title><rect x="50.8778%" y="341" width="1.2656%" height="15" fill="rgb(239,85,39)" fg:x="82973" fg:w="2064"/><text x="51.1278%" y="351.50"></text></g><g><title>powergraph`hashbrown::set::HashSet&lt;T,S,A&gt;::get (929 samples, 0.57%)</title><rect x="51.5737%" y="325" width="0.5696%" height="15" fill="rgb(232,125,22)" fg:x="84108" fg:w="929"/><text x="51.8237%" y="335.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (425 samples, 0.26%)</title><rect x="51.8828%" y="309" width="0.2606%" height="15" fill="rgb(244,57,34)" fg:x="84612" fg:w="425"/><text x="52.1328%" y="319.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (35 samples, 0.02%)</title><rect x="52.3979%" y="325" width="0.0215%" height="15" fill="rgb(214,203,32)" fg:x="85452" fg:w="35"/><text x="52.6479%" y="335.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (383 samples, 0.23%)</title><rect x="52.4224%" y="325" width="0.2348%" height="15" fill="rgb(207,58,43)" fg:x="85492" fg:w="383"/><text x="52.6724%" y="335.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,260 samples, 3.23%)</title><rect x="53.2845%" y="309" width="3.2254%" height="15" fill="rgb(215,193,15)" fg:x="86898" fg:w="5260"/><text x="53.5345%" y="319.50">pow..</text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (1,698 samples, 1.04%)</title><rect x="56.5099%" y="309" width="1.0412%" height="15" fill="rgb(232,15,44)" fg:x="92158" fg:w="1698"/><text x="56.7599%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_free (19 samples, 0.01%)</title><rect x="58.0465%" y="293" width="0.0117%" height="15" fill="rgb(212,3,48)" fg:x="94664" fg:w="19"/><text x="58.2965%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (387 samples, 0.24%)</title><rect x="58.0606%" y="293" width="0.2373%" height="15" fill="rgb(218,128,7)" fg:x="94687" fg:w="387"/><text x="58.3106%" y="303.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6,041 samples, 3.70%)</title><rect x="58.2979%" y="293" width="3.7042%" height="15" fill="rgb(226,216,39)" fg:x="95074" fg:w="6041"/><text x="58.5479%" y="303.50">powe..</text></g><g><title>powergraph`DYLD-STUB$$memset (75 samples, 0.05%)</title><rect x="62.0052%" y="293" width="0.0460%" height="15" fill="rgb(243,47,51)" fg:x="101120" fg:w="75"/><text x="62.2552%" y="303.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (1,567 samples, 0.96%)</title><rect x="62.0525%" y="293" width="0.9609%" height="15" fill="rgb(241,183,40)" fg:x="101197" fg:w="1567"/><text x="62.3025%" y="303.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (134 samples, 0.08%)</title><rect x="63.0133%" y="293" width="0.0822%" height="15" fill="rgb(231,217,32)" fg:x="102764" fg:w="134"/><text x="63.2633%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (581 samples, 0.36%)</title><rect x="63.6173%" y="277" width="0.3563%" height="15" fill="rgb(229,61,38)" fg:x="103749" fg:w="581"/><text x="63.8673%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (43 samples, 0.03%)</title><rect x="63.9736%" y="277" width="0.0264%" height="15" fill="rgb(225,210,5)" fg:x="104330" fg:w="43"/><text x="64.2236%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (701 samples, 0.43%)</title><rect x="64.0054%" y="277" width="0.4298%" height="15" fill="rgb(231,79,45)" fg:x="104382" fg:w="701"/><text x="64.2554%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (566 samples, 0.35%)</title><rect x="64.4451%" y="277" width="0.3471%" height="15" fill="rgb(224,100,7)" fg:x="105099" fg:w="566"/><text x="64.6951%" y="287.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (86 samples, 0.05%)</title><rect x="64.7922%" y="277" width="0.0527%" height="15" fill="rgb(241,198,18)" fg:x="105665" fg:w="86"/><text x="65.0422%" y="287.50"></text></g><g><title>powergraph`__rdl_alloc (79 samples, 0.05%)</title><rect x="64.8449%" y="277" width="0.0484%" height="15" fill="rgb(252,97,53)" fg:x="105751" fg:w="79"/><text x="65.0949%" y="287.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (144 samples, 0.09%)</title><rect x="64.8933%" y="277" width="0.0883%" height="15" fill="rgb(220,88,7)" fg:x="105830" fg:w="144"/><text x="65.1433%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.02%)</title><rect x="65.1852%" y="261" width="0.0159%" height="15" fill="rgb(213,176,14)" fg:x="106306" fg:w="26"/><text x="65.4352%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (22 samples, 0.01%)</title><rect x="65.1877%" y="245" width="0.0135%" height="15" fill="rgb(246,73,7)" fg:x="106310" fg:w="22"/><text x="65.4377%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (17 samples, 0.01%)</title><rect x="65.1907%" y="229" width="0.0104%" height="15" fill="rgb(245,64,36)" fg:x="106315" fg:w="17"/><text x="65.4407%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3,436 samples, 2.11%)</title><rect x="63.0955%" y="293" width="2.1069%" height="15" fill="rgb(245,80,10)" fg:x="102898" fg:w="3436"/><text x="63.3455%" y="303.50">p..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (360 samples, 0.22%)</title><rect x="64.9816%" y="277" width="0.2207%" height="15" fill="rgb(232,107,50)" fg:x="105974" fg:w="360"/><text x="65.2316%" y="287.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (12,518 samples, 7.68%)</title><rect x="57.5511%" y="309" width="7.6758%" height="15" fill="rgb(253,3,0)" fg:x="93856" fg:w="12518"/><text x="57.8011%" y="319.50">powergraph`..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (40 samples, 0.02%)</title><rect x="65.2024%" y="293" width="0.0245%" height="15" fill="rgb(212,99,53)" fg:x="106334" fg:w="40"/><text x="65.4524%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (20,684 samples, 12.68%)</title><rect x="52.6572%" y="325" width="12.6831%" height="15" fill="rgb(249,111,54)" fg:x="85875" fg:w="20684"/><text x="52.9072%" y="335.50">powergraph`hashbrow..</text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (185 samples, 0.11%)</title><rect x="65.2269%" y="309" width="0.1134%" height="15" fill="rgb(249,55,30)" fg:x="106374" fg:w="185"/><text x="65.4769%" y="319.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (548 samples, 0.34%)</title><rect x="65.4170%" y="309" width="0.3360%" height="15" fill="rgb(237,47,42)" fg:x="106684" fg:w="548"/><text x="65.6670%" y="319.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (22,291 samples, 13.67%)</title><rect x="52.1434%" y="341" width="13.6685%" height="15" fill="rgb(211,20,18)" fg:x="85037" fg:w="22291"/><text x="52.3934%" y="351.50">powergraph`powergraph..</text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (769 samples, 0.47%)</title><rect x="65.3403%" y="325" width="0.4715%" height="15" fill="rgb(231,203,46)" fg:x="106559" fg:w="769"/><text x="65.5903%" y="335.50"></text></g><g><title>powergraph`core::ops::function::FnOnce::call_once (96 samples, 0.06%)</title><rect x="65.7530%" y="309" width="0.0589%" height="15" fill="rgb(237,142,3)" fg:x="107232" fg:w="96"/><text x="66.0030%" y="319.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (17 samples, 0.01%)</title><rect x="65.9799%" y="325" width="0.0104%" height="15" fill="rgb(241,107,1)" fg:x="107602" fg:w="17"/><text x="66.2299%" y="335.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,041 samples, 1.86%)</title><rect x="66.5882%" y="309" width="1.8647%" height="15" fill="rgb(229,83,13)" fg:x="108594" fg:w="3041"/><text x="66.8382%" y="319.50">p..</text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (1,005 samples, 0.62%)</title><rect x="68.4535%" y="309" width="0.6163%" height="15" fill="rgb(241,91,40)" fg:x="111636" fg:w="1005"/><text x="68.7035%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (5,020 samples, 3.08%)</title><rect x="66.0026%" y="325" width="3.0782%" height="15" fill="rgb(225,3,45)" fg:x="107639" fg:w="5020"/><text x="66.2526%" y="335.50">pow..</text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (18 samples, 0.01%)</title><rect x="69.0697%" y="309" width="0.0110%" height="15" fill="rgb(244,223,14)" fg:x="112641" fg:w="18"/><text x="69.3197%" y="319.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (488 samples, 0.30%)</title><rect x="69.1396%" y="309" width="0.2992%" height="15" fill="rgb(224,124,37)" fg:x="112755" fg:w="488"/><text x="69.3896%" y="319.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (6,010 samples, 3.69%)</title><rect x="65.8180%" y="341" width="3.6852%" height="15" fill="rgb(251,171,30)" fg:x="107338" fg:w="6010"/><text x="66.0680%" y="351.50">powe..</text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (689 samples, 0.42%)</title><rect x="69.0808%" y="325" width="0.4225%" height="15" fill="rgb(236,46,54)" fg:x="112659" fg:w="689"/><text x="69.3308%" y="335.50"></text></g><g><title>powergraph`core::ops::function::FnOnce::call_once (105 samples, 0.06%)</title><rect x="69.4389%" y="309" width="0.0644%" height="15" fill="rgb(245,213,5)" fg:x="113243" fg:w="105"/><text x="69.6889%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (40 samples, 0.02%)</title><rect x="69.5229%" y="325" width="0.0245%" height="15" fill="rgb(230,144,27)" fg:x="113380" fg:w="40"/><text x="69.7729%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (685 samples, 0.42%)</title><rect x="69.5474%" y="325" width="0.4200%" height="15" fill="rgb(220,86,6)" fg:x="113420" fg:w="685"/><text x="69.7974%" y="335.50"></text></g><g><title>libsystem_platform.dylib`__bzero (36 samples, 0.02%)</title><rect x="69.9723%" y="325" width="0.0221%" height="15" fill="rgb(240,20,13)" fg:x="114113" fg:w="36"/><text x="70.2223%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (126 samples, 0.08%)</title><rect x="69.9944%" y="325" width="0.0773%" height="15" fill="rgb(217,89,34)" fg:x="114149" fg:w="126"/><text x="70.2444%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (146 samples, 0.09%)</title><rect x="70.0723%" y="325" width="0.0895%" height="15" fill="rgb(229,13,5)" fg:x="114276" fg:w="146"/><text x="70.3223%" y="335.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (29 samples, 0.02%)</title><rect x="70.2409%" y="309" width="0.0178%" height="15" fill="rgb(244,67,35)" fg:x="114551" fg:w="29"/><text x="70.4909%" y="319.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (215 samples, 0.13%)</title><rect x="70.2599%" y="309" width="0.1318%" height="15" fill="rgb(221,40,2)" fg:x="114582" fg:w="215"/><text x="70.5099%" y="319.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,566 samples, 1.57%)</title><rect x="70.6861%" y="293" width="1.5734%" height="15" fill="rgb(237,157,21)" fg:x="115277" fg:w="2566"/><text x="70.9361%" y="303.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (760 samples, 0.47%)</title><rect x="72.2595%" y="293" width="0.4660%" height="15" fill="rgb(222,94,11)" fg:x="117843" fg:w="760"/><text x="72.5095%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (198 samples, 0.12%)</title><rect x="73.0027%" y="277" width="0.1214%" height="15" fill="rgb(249,113,6)" fg:x="119055" fg:w="198"/><text x="73.2527%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,235 samples, 1.37%)</title><rect x="73.1241%" y="277" width="1.3705%" height="15" fill="rgb(238,137,36)" fg:x="119253" fg:w="2235"/><text x="73.3741%" y="287.50"></text></g><g><title>powergraph`DYLD-STUB$$memset (33 samples, 0.02%)</title><rect x="74.4964%" y="277" width="0.0202%" height="15" fill="rgb(210,102,26)" fg:x="121491" fg:w="33"/><text x="74.7464%" y="287.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (832 samples, 0.51%)</title><rect x="74.5167%" y="277" width="0.5102%" height="15" fill="rgb(218,30,30)" fg:x="121524" fg:w="832"/><text x="74.7667%" y="287.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (70 samples, 0.04%)</title><rect x="75.0268%" y="277" width="0.0429%" height="15" fill="rgb(214,67,26)" fg:x="122356" fg:w="70"/><text x="75.2768%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (355 samples, 0.22%)</title><rect x="75.3500%" y="261" width="0.2177%" height="15" fill="rgb(251,9,53)" fg:x="122883" fg:w="355"/><text x="75.6000%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (20 samples, 0.01%)</title><rect x="75.5677%" y="261" width="0.0123%" height="15" fill="rgb(228,204,25)" fg:x="123238" fg:w="20"/><text x="75.8177%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (401 samples, 0.25%)</title><rect x="75.5811%" y="261" width="0.2459%" height="15" fill="rgb(207,153,8)" fg:x="123260" fg:w="401"/><text x="75.8311%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (290 samples, 0.18%)</title><rect x="75.8295%" y="261" width="0.1778%" height="15" fill="rgb(242,9,16)" fg:x="123665" fg:w="290"/><text x="76.0795%" y="271.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (40 samples, 0.02%)</title><rect x="76.0073%" y="261" width="0.0245%" height="15" fill="rgb(217,211,10)" fg:x="123955" fg:w="40"/><text x="76.2573%" y="271.50"></text></g><g><title>powergraph`__rdl_alloc (58 samples, 0.04%)</title><rect x="76.0318%" y="261" width="0.0356%" height="15" fill="rgb(219,228,52)" fg:x="123995" fg:w="58"/><text x="76.2818%" y="271.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (69 samples, 0.04%)</title><rect x="76.0680%" y="261" width="0.0423%" height="15" fill="rgb(231,92,29)" fg:x="124054" fg:w="69"/><text x="76.3180%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,882 samples, 1.15%)</title><rect x="75.0697%" y="277" width="1.1540%" height="15" fill="rgb(232,8,23)" fg:x="122426" fg:w="1882"/><text x="75.3197%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (185 samples, 0.11%)</title><rect x="76.1103%" y="261" width="0.1134%" height="15" fill="rgb(216,211,34)" fg:x="124123" fg:w="185"/><text x="76.3603%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5,731 samples, 3.51%)</title><rect x="72.7255%" y="293" width="3.5142%" height="15" fill="rgb(236,151,0)" fg:x="118603" fg:w="5731"/><text x="72.9755%" y="303.50">pow..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (26 samples, 0.02%)</title><rect x="76.2238%" y="277" width="0.0159%" height="15" fill="rgb(209,168,3)" fg:x="124308" fg:w="26"/><text x="76.4738%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (9,625 samples, 5.90%)</title><rect x="70.3918%" y="309" width="5.9019%" height="15" fill="rgb(208,129,28)" fg:x="114797" fg:w="9625"/><text x="70.6418%" y="319.50">powergra..</text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (88 samples, 0.05%)</title><rect x="76.2397%" y="293" width="0.0540%" height="15" fill="rgb(229,78,22)" fg:x="124334" fg:w="88"/><text x="76.4897%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (317 samples, 0.19%)</title><rect x="76.3384%" y="293" width="0.1944%" height="15" fill="rgb(228,187,13)" fg:x="124495" fg:w="317"/><text x="76.5884%" y="303.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (10,445 samples, 6.40%)</title><rect x="70.1618%" y="325" width="6.4047%" height="15" fill="rgb(240,119,24)" fg:x="114422" fg:w="10445"/><text x="70.4118%" y="335.50">powergra..</text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (445 samples, 0.27%)</title><rect x="76.2937%" y="309" width="0.2729%" height="15" fill="rgb(209,194,42)" fg:x="124422" fg:w="445"/><text x="76.5437%" y="319.50"></text></g><g><title>powergraph`core::ops::function::FnOnce::call_once (55 samples, 0.03%)</title><rect x="76.5328%" y="293" width="0.0337%" height="15" fill="rgb(247,200,46)" fg:x="124812" fg:w="55"/><text x="76.7828%" y="303.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::is_proper_subset_of (11,521 samples, 7.06%)</title><rect x="69.5033%" y="341" width="7.0645%" height="15" fill="rgb(218,76,16)" fg:x="113348" fg:w="11521"/><text x="69.7533%" y="351.50">powergrap..</text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (21 samples, 0.01%)</title><rect x="76.6340%" y="325" width="0.0129%" height="15" fill="rgb(225,21,48)" fg:x="124977" fg:w="21"/><text x="76.8840%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_free (107 samples, 0.07%)</title><rect x="76.6469%" y="325" width="0.0656%" height="15" fill="rgb(239,223,50)" fg:x="124998" fg:w="107"/><text x="76.8969%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (173 samples, 0.11%)</title><rect x="76.7125%" y="325" width="0.1061%" height="15" fill="rgb(244,45,21)" fg:x="125105" fg:w="173"/><text x="76.9625%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (30 samples, 0.02%)</title><rect x="76.8357%" y="325" width="0.0184%" height="15" fill="rgb(232,33,43)" fg:x="125306" fg:w="30"/><text x="77.0857%" y="335.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (71 samples, 0.04%)</title><rect x="76.8541%" y="325" width="0.0435%" height="15" fill="rgb(209,8,3)" fg:x="125336" fg:w="71"/><text x="77.1041%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (278 samples, 0.17%)</title><rect x="76.9669%" y="309" width="0.1705%" height="15" fill="rgb(214,25,53)" fg:x="125520" fg:w="278"/><text x="77.2169%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (422 samples, 0.26%)</title><rect x="77.1399%" y="309" width="0.2588%" height="15" fill="rgb(254,186,54)" fg:x="125802" fg:w="422"/><text x="77.3899%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (451 samples, 0.28%)</title><rect x="77.3986%" y="309" width="0.2765%" height="15" fill="rgb(208,174,49)" fg:x="126224" fg:w="451"/><text x="77.6486%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (175 samples, 0.11%)</title><rect x="77.6752%" y="309" width="0.1073%" height="15" fill="rgb(233,191,51)" fg:x="126675" fg:w="175"/><text x="77.9252%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (129 samples, 0.08%)</title><rect x="77.7034%" y="293" width="0.0791%" height="15" fill="rgb(222,134,10)" fg:x="126721" fg:w="129"/><text x="77.9534%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (123 samples, 0.08%)</title><rect x="77.7071%" y="277" width="0.0754%" height="15" fill="rgb(230,226,20)" fg:x="126727" fg:w="123"/><text x="77.9571%" y="287.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (35 samples, 0.02%)</title><rect x="77.7825%" y="309" width="0.0215%" height="15" fill="rgb(251,111,25)" fg:x="126850" fg:w="35"/><text x="78.0325%" y="319.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (20 samples, 0.01%)</title><rect x="77.8039%" y="309" width="0.0123%" height="15" fill="rgb(224,40,46)" fg:x="126885" fg:w="20"/><text x="78.0539%" y="319.50"></text></g><g><title>powergraph`__rdl_alloc (36 samples, 0.02%)</title><rect x="77.8162%" y="309" width="0.0221%" height="15" fill="rgb(236,108,47)" fg:x="126905" fg:w="36"/><text x="78.0662%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.02%)</title><rect x="77.8732%" y="293" width="0.0159%" height="15" fill="rgb(234,93,0)" fg:x="126998" fg:w="26"/><text x="78.1232%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (24 samples, 0.01%)</title><rect x="77.8745%" y="277" width="0.0147%" height="15" fill="rgb(224,213,32)" fg:x="127000" fg:w="24"/><text x="78.1245%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (19 samples, 0.01%)</title><rect x="77.8775%" y="261" width="0.0117%" height="15" fill="rgb(251,11,48)" fg:x="127005" fg:w="19"/><text x="78.1275%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,618 samples, 0.99%)</title><rect x="76.8977%" y="325" width="0.9921%" height="15" fill="rgb(236,173,5)" fg:x="125407" fg:w="1618"/><text x="77.1477%" y="335.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (83 samples, 0.05%)</title><rect x="77.8389%" y="309" width="0.0509%" height="15" fill="rgb(230,95,12)" fg:x="126942" fg:w="83"/><text x="78.0889%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (82 samples, 0.05%)</title><rect x="77.9407%" y="309" width="0.0503%" height="15" fill="rgb(232,209,1)" fg:x="127108" fg:w="82"/><text x="78.1907%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (144 samples, 0.09%)</title><rect x="77.9910%" y="309" width="0.0883%" height="15" fill="rgb(232,6,1)" fg:x="127190" fg:w="144"/><text x="78.2410%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.01%)</title><rect x="78.0836%" y="309" width="0.0104%" height="15" fill="rgb(210,224,50)" fg:x="127341" fg:w="17"/><text x="78.3336%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (125 samples, 0.08%)</title><rect x="78.0940%" y="309" width="0.0766%" height="15" fill="rgb(228,127,35)" fg:x="127358" fg:w="125"/><text x="78.3440%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (37 samples, 0.02%)</title><rect x="78.1804%" y="309" width="0.0227%" height="15" fill="rgb(245,102,45)" fg:x="127499" fg:w="37"/><text x="78.4304%" y="319.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.01%)</title><rect x="78.2031%" y="309" width="0.0129%" height="15" fill="rgb(214,1,49)" fg:x="127536" fg:w="21"/><text x="78.4531%" y="319.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (72 samples, 0.04%)</title><rect x="78.2301%" y="309" width="0.0441%" height="15" fill="rgb(226,163,40)" fg:x="127580" fg:w="72"/><text x="78.4801%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 0.02%)</title><rect x="78.2577%" y="293" width="0.0166%" height="15" fill="rgb(239,212,28)" fg:x="127625" fg:w="27"/><text x="78.5077%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (26 samples, 0.02%)</title><rect x="78.2583%" y="277" width="0.0159%" height="15" fill="rgb(220,20,13)" fg:x="127626" fg:w="26"/><text x="78.5083%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (19 samples, 0.01%)</title><rect x="78.2626%" y="261" width="0.0117%" height="15" fill="rgb(210,164,35)" fg:x="127633" fg:w="19"/><text x="78.5126%" y="271.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (121 samples, 0.07%)</title><rect x="78.2743%" y="309" width="0.0742%" height="15" fill="rgb(248,109,41)" fg:x="127652" fg:w="121"/><text x="78.5243%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (814 samples, 0.50%)</title><rect x="77.8904%" y="325" width="0.4991%" height="15" fill="rgb(238,23,50)" fg:x="127026" fg:w="814"/><text x="78.1404%" y="335.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (52 samples, 0.03%)</title><rect x="78.3576%" y="309" width="0.0319%" height="15" fill="rgb(211,48,49)" fg:x="127788" fg:w="52"/><text x="78.6076%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (73 samples, 0.04%)</title><rect x="78.4079%" y="309" width="0.0448%" height="15" fill="rgb(223,36,21)" fg:x="127870" fg:w="73"/><text x="78.6579%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (58 samples, 0.04%)</title><rect x="78.4527%" y="309" width="0.0356%" height="15" fill="rgb(207,123,46)" fg:x="127943" fg:w="58"/><text x="78.7027%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (185 samples, 0.11%)</title><rect x="78.6133%" y="293" width="0.1134%" height="15" fill="rgb(240,218,32)" fg:x="128205" fg:w="185"/><text x="78.8633%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (241 samples, 0.15%)</title><rect x="78.7274%" y="293" width="0.1478%" height="15" fill="rgb(252,5,43)" fg:x="128391" fg:w="241"/><text x="78.9774%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (528 samples, 0.32%)</title><rect x="78.8752%" y="293" width="0.3238%" height="15" fill="rgb(252,84,19)" fg:x="128632" fg:w="528"/><text x="79.1252%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (198 samples, 0.12%)</title><rect x="79.1989%" y="293" width="0.1214%" height="15" fill="rgb(243,152,39)" fg:x="129160" fg:w="198"/><text x="79.4489%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (117 samples, 0.07%)</title><rect x="79.2486%" y="277" width="0.0717%" height="15" fill="rgb(234,160,15)" fg:x="129241" fg:w="117"/><text x="79.4986%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (115 samples, 0.07%)</title><rect x="79.2498%" y="261" width="0.0705%" height="15" fill="rgb(237,34,20)" fg:x="129243" fg:w="115"/><text x="79.4998%" y="271.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (32 samples, 0.02%)</title><rect x="79.3203%" y="293" width="0.0196%" height="15" fill="rgb(229,97,13)" fg:x="129358" fg:w="32"/><text x="79.5703%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (1,409 samples, 0.86%)</title><rect x="78.4932%" y="309" width="0.8640%" height="15" fill="rgb(234,71,50)" fg:x="128009" fg:w="1409"/><text x="78.7432%" y="319.50"></text></g><g><title>powergraph`__rdl_alloc (18 samples, 0.01%)</title><rect x="79.3461%" y="293" width="0.0110%" height="15" fill="rgb(253,155,4)" fg:x="129400" fg:w="18"/><text x="79.5961%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (80 samples, 0.05%)</title><rect x="79.3774%" y="293" width="0.0491%" height="15" fill="rgb(222,185,37)" fg:x="129451" fg:w="80"/><text x="79.6274%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (118 samples, 0.07%)</title><rect x="79.4283%" y="293" width="0.0724%" height="15" fill="rgb(251,177,13)" fg:x="129534" fg:w="118"/><text x="79.6783%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (29 samples, 0.02%)</title><rect x="79.5478%" y="277" width="0.0178%" height="15" fill="rgb(250,179,40)" fg:x="129729" fg:w="29"/><text x="79.7978%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (29 samples, 0.02%)</title><rect x="79.5478%" y="261" width="0.0178%" height="15" fill="rgb(242,44,2)" fg:x="129729" fg:w="29"/><text x="79.7978%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (371 samples, 0.23%)</title><rect x="79.3571%" y="309" width="0.2275%" height="15" fill="rgb(216,177,13)" fg:x="129418" fg:w="371"/><text x="79.6071%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (118 samples, 0.07%)</title><rect x="79.5123%" y="293" width="0.0724%" height="15" fill="rgb(216,106,43)" fg:x="129671" fg:w="118"/><text x="79.7623%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (30 samples, 0.02%)</title><rect x="79.5662%" y="277" width="0.0184%" height="15" fill="rgb(216,183,2)" fg:x="129759" fg:w="30"/><text x="79.8162%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (22 samples, 0.01%)</title><rect x="79.5711%" y="261" width="0.0135%" height="15" fill="rgb(249,75,3)" fg:x="129767" fg:w="22"/><text x="79.8211%" y="271.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,950 samples, 1.20%)</title><rect x="78.3969%" y="325" width="1.1957%" height="15" fill="rgb(219,67,39)" fg:x="127852" fg:w="1950"/><text x="78.6469%" y="335.50"></text></g><g><title>powergraph`DYLD-STUB$$free (25 samples, 0.02%)</title><rect x="79.5926%" y="325" width="0.0153%" height="15" fill="rgb(253,228,2)" fg:x="129802" fg:w="25"/><text x="79.8426%" y="335.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (19 samples, 0.01%)</title><rect x="79.6098%" y="325" width="0.0117%" height="15" fill="rgb(235,138,27)" fg:x="129830" fg:w="19"/><text x="79.8598%" y="335.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (32 samples, 0.02%)</title><rect x="79.6269%" y="325" width="0.0196%" height="15" fill="rgb(236,97,51)" fg:x="129858" fg:w="32"/><text x="79.8769%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_free (214 samples, 0.13%)</title><rect x="79.6466%" y="309" width="0.1312%" height="15" fill="rgb(240,80,30)" fg:x="129890" fg:w="214"/><text x="79.8966%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (52 samples, 0.03%)</title><rect x="79.7778%" y="309" width="0.0319%" height="15" fill="rgb(230,178,19)" fg:x="130104" fg:w="52"/><text x="80.0278%" y="319.50"></text></g><g><title>powergraph`DYLD-STUB$$free (44 samples, 0.03%)</title><rect x="79.8115%" y="309" width="0.0270%" height="15" fill="rgb(210,190,27)" fg:x="130159" fg:w="44"/><text x="80.0615%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (21 samples, 0.01%)</title><rect x="79.8894%" y="293" width="0.0129%" height="15" fill="rgb(222,107,31)" fg:x="130286" fg:w="21"/><text x="80.1394%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (329 samples, 0.20%)</title><rect x="79.9023%" y="293" width="0.2017%" height="15" fill="rgb(216,127,34)" fg:x="130307" fg:w="329"/><text x="80.1523%" y="303.50"></text></g><g><title>libsystem_platform.dylib`__bzero (38 samples, 0.02%)</title><rect x="80.1040%" y="293" width="0.0233%" height="15" fill="rgb(234,116,52)" fg:x="130636" fg:w="38"/><text x="80.3540%" y="303.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (973 samples, 0.60%)</title><rect x="79.6466%" y="325" width="0.5966%" height="15" fill="rgb(222,124,15)" fg:x="129890" fg:w="973"/><text x="79.8966%" y="335.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (659 samples, 0.40%)</title><rect x="79.8391%" y="309" width="0.4041%" height="15" fill="rgb(231,179,28)" fg:x="130204" fg:w="659"/><text x="80.0891%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (189 samples, 0.12%)</title><rect x="80.1273%" y="293" width="0.1159%" height="15" fill="rgb(226,93,45)" fg:x="130674" fg:w="189"/><text x="80.3773%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (18 samples, 0.01%)</title><rect x="80.2432%" y="325" width="0.0110%" height="15" fill="rgb(215,8,51)" fg:x="130863" fg:w="18"/><text x="80.4932%" y="335.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::iter (6,046 samples, 3.71%)</title><rect x="76.5678%" y="341" width="3.7073%" height="15" fill="rgb(223,106,5)" fg:x="124869" fg:w="6046"/><text x="76.8178%" y="351.50">powe..</text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (34 samples, 0.02%)</title><rect x="80.2542%" y="325" width="0.0208%" height="15" fill="rgb(250,191,5)" fg:x="130881" fg:w="34"/><text x="80.5042%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (70 samples, 0.04%)</title><rect x="80.3358%" y="309" width="0.0429%" height="15" fill="rgb(242,132,44)" fg:x="131014" fg:w="70"/><text x="80.5858%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (58 samples, 0.04%)</title><rect x="80.5817%" y="293" width="0.0356%" height="15" fill="rgb(251,152,29)" fg:x="131415" fg:w="58"/><text x="80.8317%" y="303.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (252 samples, 0.15%)</title><rect x="80.6172%" y="293" width="0.1545%" height="15" fill="rgb(218,179,5)" fg:x="131473" fg:w="252"/><text x="80.8672%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (302 samples, 0.19%)</title><rect x="81.0526%" y="277" width="0.1852%" height="15" fill="rgb(227,67,19)" fg:x="132183" fg:w="302"/><text x="81.3026%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (702 samples, 0.43%)</title><rect x="81.2384%" y="277" width="0.4305%" height="15" fill="rgb(233,119,31)" fg:x="132486" fg:w="702"/><text x="81.4884%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (649 samples, 0.40%)</title><rect x="81.6688%" y="277" width="0.3980%" height="15" fill="rgb(241,120,22)" fg:x="133188" fg:w="649"/><text x="81.9188%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (173 samples, 0.11%)</title><rect x="82.0668%" y="277" width="0.1061%" height="15" fill="rgb(224,102,30)" fg:x="133837" fg:w="173"/><text x="82.3168%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (33 samples, 0.02%)</title><rect x="82.1526%" y="261" width="0.0202%" height="15" fill="rgb(210,164,37)" fg:x="133977" fg:w="33"/><text x="82.4026%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (33 samples, 0.02%)</title><rect x="82.1526%" y="245" width="0.0202%" height="15" fill="rgb(226,191,16)" fg:x="133977" fg:w="33"/><text x="82.4026%" y="255.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (652 samples, 0.40%)</title><rect x="82.1729%" y="277" width="0.3998%" height="15" fill="rgb(214,40,45)" fg:x="134010" fg:w="652"/><text x="82.4229%" y="287.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (50 samples, 0.03%)</title><rect x="82.5727%" y="277" width="0.0307%" height="15" fill="rgb(244,29,26)" fg:x="134662" fg:w="50"/><text x="82.8227%" y="287.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (30 samples, 0.02%)</title><rect x="82.6033%" y="277" width="0.0184%" height="15" fill="rgb(216,16,5)" fg:x="134712" fg:w="30"/><text x="82.8533%" y="287.50"></text></g><g><title>powergraph`__rdl_alloc (48 samples, 0.03%)</title><rect x="82.6217%" y="277" width="0.0294%" height="15" fill="rgb(249,76,35)" fg:x="134742" fg:w="48"/><text x="82.8717%" y="287.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (178 samples, 0.11%)</title><rect x="82.6512%" y="277" width="0.1091%" height="15" fill="rgb(207,11,44)" fg:x="134790" fg:w="178"/><text x="82.9012%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (983 samples, 0.60%)</title><rect x="83.0976%" y="261" width="0.6028%" height="15" fill="rgb(228,190,49)" fg:x="135518" fg:w="983"/><text x="83.3476%" y="271.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (572 samples, 0.35%)</title><rect x="83.7016%" y="261" width="0.3507%" height="15" fill="rgb(214,173,12)" fg:x="136503" fg:w="572"/><text x="83.9516%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (257 samples, 0.16%)</title><rect x="84.1271%" y="245" width="0.1576%" height="15" fill="rgb(218,26,35)" fg:x="137197" fg:w="257"/><text x="84.3771%" y="255.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (72 samples, 0.04%)</title><rect x="84.2871%" y="245" width="0.0441%" height="15" fill="rgb(220,200,19)" fg:x="137458" fg:w="72"/><text x="84.5371%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.01%)</title><rect x="84.3356%" y="229" width="0.0104%" height="15" fill="rgb(239,95,49)" fg:x="137537" fg:w="17"/><text x="84.5856%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (472 samples, 0.29%)</title><rect x="84.0572%" y="261" width="0.2894%" height="15" fill="rgb(235,85,53)" fg:x="137083" fg:w="472"/><text x="84.3072%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (25 samples, 0.02%)</title><rect x="84.3313%" y="245" width="0.0153%" height="15" fill="rgb(233,133,31)" fg:x="137530" fg:w="25"/><text x="84.5813%" y="255.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,589 samples, 1.59%)</title><rect x="82.7603%" y="277" width="1.5875%" height="15" fill="rgb(218,25,20)" fg:x="134968" fg:w="2589"/><text x="83.0103%" y="287.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,474 samples, 3.97%)</title><rect x="80.3787%" y="309" width="3.9698%" height="15" fill="rgb(252,210,38)" fg:x="131084" fg:w="6474"/><text x="80.6287%" y="319.50">powe..</text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (5,833 samples, 3.58%)</title><rect x="80.7718%" y="293" width="3.5767%" height="15" fill="rgb(242,134,21)" fg:x="131725" fg:w="5833"/><text x="81.0218%" y="303.50">powe..</text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (34 samples, 0.02%)</title><rect x="84.3662%" y="309" width="0.0208%" height="15" fill="rgb(213,28,48)" fg:x="137587" fg:w="34"/><text x="84.6162%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (84 samples, 0.05%)</title><rect x="84.4650%" y="293" width="0.0515%" height="15" fill="rgb(250,196,2)" fg:x="137748" fg:w="84"/><text x="84.7150%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (125 samples, 0.08%)</title><rect x="84.5195%" y="293" width="0.0766%" height="15" fill="rgb(227,5,17)" fg:x="137837" fg:w="125"/><text x="84.7695%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (20 samples, 0.01%)</title><rect x="84.6624%" y="245" width="0.0123%" height="15" fill="rgb(221,226,24)" fg:x="138070" fg:w="20"/><text x="84.9124%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (59 samples, 0.04%)</title><rect x="84.6483%" y="277" width="0.0362%" height="15" fill="rgb(211,5,48)" fg:x="138047" fg:w="59"/><text x="84.8983%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (43 samples, 0.03%)</title><rect x="84.6581%" y="261" width="0.0264%" height="15" fill="rgb(219,150,6)" fg:x="138063" fg:w="43"/><text x="84.9081%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (488 samples, 0.30%)</title><rect x="84.3871%" y="309" width="0.2992%" height="15" fill="rgb(251,46,16)" fg:x="137621" fg:w="488"/><text x="84.6371%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (130 samples, 0.08%)</title><rect x="84.6066%" y="293" width="0.0797%" height="15" fill="rgb(220,204,40)" fg:x="137979" fg:w="130"/><text x="84.8566%" y="303.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7,148 samples, 4.38%)</title><rect x="80.3168%" y="325" width="4.3830%" height="15" fill="rgb(211,85,2)" fg:x="130983" fg:w="7148"/><text x="80.5668%" y="335.50">power..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (22 samples, 0.01%)</title><rect x="84.6863%" y="309" width="0.0135%" height="15" fill="rgb(229,17,7)" fg:x="138109" fg:w="22"/><text x="84.9363%" y="319.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 0.01%)</title><rect x="84.7010%" y="325" width="0.0110%" height="15" fill="rgb(239,72,28)" fg:x="138133" fg:w="18"/><text x="84.9510%" y="335.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (60 samples, 0.04%)</title><rect x="84.7268%" y="309" width="0.0368%" height="15" fill="rgb(230,47,54)" fg:x="138175" fg:w="60"/><text x="84.9768%" y="319.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::union (7,327 samples, 4.49%)</title><rect x="80.2788%" y="341" width="4.4928%" height="15" fill="rgb(214,50,8)" fg:x="130921" fg:w="7327"/><text x="80.5288%" y="351.50">power..</text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (97 samples, 0.06%)</title><rect x="84.7121%" y="325" width="0.0595%" height="15" fill="rgb(216,198,43)" fg:x="138151" fg:w="97"/><text x="84.9621%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11,105 samples, 6.81%)</title><rect x="84.7795%" y="325" width="6.8094%" height="15" fill="rgb(234,20,35)" fg:x="138261" fg:w="11105"/><text x="85.0295%" y="335.50">libsystem..</text></g><g><title>powergraph`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (372 samples, 0.23%)</title><rect x="91.7570%" y="277" width="0.2281%" height="15" fill="rgb(254,45,19)" fg:x="149640" fg:w="372"/><text x="92.0070%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (55 samples, 0.03%)</title><rect x="92.2432%" y="261" width="0.0337%" height="15" fill="rgb(219,14,44)" fg:x="150433" fg:w="55"/><text x="92.4932%" y="271.50"></text></g><g><title>powergraph`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (23 samples, 0.01%)</title><rect x="92.2769%" y="261" width="0.0141%" height="15" fill="rgb(217,220,26)" fg:x="150488" fg:w="23"/><text x="92.5269%" y="271.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1,104 samples, 0.68%)</title><rect x="91.6184%" y="293" width="0.6770%" height="15" fill="rgb(213,158,28)" fg:x="149414" fg:w="1104"/><text x="91.8684%" y="303.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (501 samples, 0.31%)</title><rect x="91.9881%" y="277" width="0.3072%" height="15" fill="rgb(252,51,52)" fg:x="150017" fg:w="501"/><text x="92.2381%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,351 samples, 0.83%)</title><rect x="91.6012%" y="309" width="0.8284%" height="15" fill="rgb(246,89,16)" fg:x="149386" fg:w="1351"/><text x="91.8512%" y="319.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (219 samples, 0.13%)</title><rect x="92.2953%" y="293" width="0.1343%" height="15" fill="rgb(216,158,49)" fg:x="150518" fg:w="219"/><text x="92.5453%" y="303.50"></text></g><g><title>powergraph`powergraph::similarity_matrix::SimilarityMatrix::remove_element (12,500 samples, 7.66%)</title><rect x="84.7716%" y="341" width="7.6648%" height="15" fill="rgb(236,107,19)" fg:x="138248" fg:w="12500"/><text x="85.0216%" y="351.50">powergraph..</text></g><g><title>powergraph`itertools::Itertools::sorted (1,363 samples, 0.84%)</title><rect x="91.6006%" y="325" width="0.8358%" height="15" fill="rgb(228,185,30)" fg:x="149385" fg:w="1363"/><text x="91.8506%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_free (39 samples, 0.02%)</title><rect x="92.4535%" y="325" width="0.0239%" height="15" fill="rgb(246,134,8)" fg:x="150776" fg:w="39"/><text x="92.7035%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.02%)</title><rect x="92.4775%" y="325" width="0.0172%" height="15" fill="rgb(214,143,50)" fg:x="150815" fg:w="28"/><text x="92.7275%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (29 samples, 0.02%)</title><rect x="92.5020%" y="325" width="0.0178%" height="15" fill="rgb(228,75,8)" fg:x="150855" fg:w="29"/><text x="92.7520%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9,946 samples, 6.10%)</title><rect x="92.5265%" y="325" width="6.0987%" height="15" fill="rgb(207,175,4)" fg:x="150895" fg:w="9946"/><text x="92.7765%" y="335.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (62 samples, 0.04%)</title><rect x="98.6295%" y="309" width="0.0380%" height="15" fill="rgb(205,108,24)" fg:x="160848" fg:w="62"/><text x="98.8795%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (22 samples, 0.01%)</title><rect x="98.6700%" y="309" width="0.0135%" height="15" fill="rgb(244,120,49)" fg:x="160914" fg:w="22"/><text x="98.9200%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (28 samples, 0.02%)</title><rect x="98.6878%" y="309" width="0.0172%" height="15" fill="rgb(223,47,38)" fg:x="160943" fg:w="28"/><text x="98.9378%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (26 samples, 0.02%)</title><rect x="98.7325%" y="293" width="0.0159%" height="15" fill="rgb(229,179,11)" fg:x="161016" fg:w="26"/><text x="98.9825%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (20 samples, 0.01%)</title><rect x="98.8043%" y="181" width="0.0123%" height="15" fill="rgb(231,122,1)" fg:x="161133" fg:w="20"/><text x="99.0543%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (41 samples, 0.03%)</title><rect x="98.8031%" y="197" width="0.0251%" height="15" fill="rgb(245,119,9)" fg:x="161131" fg:w="41"/><text x="99.0531%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (17 samples, 0.01%)</title><rect x="98.8282%" y="197" width="0.0104%" height="15" fill="rgb(241,163,25)" fg:x="161172" fg:w="17"/><text x="99.0782%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (102 samples, 0.06%)</title><rect x="98.7816%" y="213" width="0.0625%" height="15" fill="rgb(217,214,3)" fg:x="161096" fg:w="102"/><text x="99.0316%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (120 samples, 0.07%)</title><rect x="98.7749%" y="229" width="0.0736%" height="15" fill="rgb(240,86,28)" fg:x="161085" fg:w="120"/><text x="99.0249%" y="239.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (150 samples, 0.09%)</title><rect x="98.7620%" y="261" width="0.0920%" height="15" fill="rgb(215,47,9)" fg:x="161064" fg:w="150"/><text x="99.0120%" y="271.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (134 samples, 0.08%)</title><rect x="98.7718%" y="245" width="0.0822%" height="15" fill="rgb(252,25,45)" fg:x="161080" fg:w="134"/><text x="99.0218%" y="255.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (152 samples, 0.09%)</title><rect x="98.7614%" y="277" width="0.0932%" height="15" fill="rgb(251,164,9)" fg:x="161063" fg:w="152"/><text x="99.0114%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.02%)</title><rect x="98.8576%" y="261" width="0.0159%" height="15" fill="rgb(233,194,0)" fg:x="161220" fg:w="26"/><text x="99.1076%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (25 samples, 0.02%)</title><rect x="98.8834%" y="197" width="0.0153%" height="15" fill="rgb(249,111,24)" fg:x="161262" fg:w="25"/><text x="99.1334%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (22 samples, 0.01%)</title><rect x="98.8852%" y="181" width="0.0135%" height="15" fill="rgb(250,223,3)" fg:x="161265" fg:w="22"/><text x="99.1352%" y="191.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (45 samples, 0.03%)</title><rect x="98.8736%" y="261" width="0.0276%" height="15" fill="rgb(236,178,37)" fg:x="161246" fg:w="45"/><text x="99.1236%" y="271.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (36 samples, 0.02%)</title><rect x="98.8791%" y="245" width="0.0221%" height="15" fill="rgb(241,158,50)" fg:x="161255" fg:w="36"/><text x="99.1291%" y="255.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (35 samples, 0.02%)</title><rect x="98.8797%" y="229" width="0.0215%" height="15" fill="rgb(213,121,41)" fg:x="161256" fg:w="35"/><text x="99.1297%" y="239.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (29 samples, 0.02%)</title><rect x="98.8834%" y="213" width="0.0178%" height="15" fill="rgb(240,92,3)" fg:x="161262" fg:w="29"/><text x="99.1334%" y="223.50"></text></g><g><title>powergraph`&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::fold (242 samples, 0.15%)</title><rect x="98.7534%" y="293" width="0.1484%" height="15" fill="rgb(205,123,3)" fg:x="161050" fg:w="242"/><text x="99.0034%" y="303.50"></text></g><g><title>powergraph`core::fmt::write (75 samples, 0.05%)</title><rect x="98.8558%" y="277" width="0.0460%" height="15" fill="rgb(205,97,47)" fg:x="161217" fg:w="75"/><text x="99.1058%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (40 samples, 0.02%)</title><rect x="98.9723%" y="181" width="0.0245%" height="15" fill="rgb(247,152,14)" fg:x="161407" fg:w="40"/><text x="99.2223%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (80 samples, 0.05%)</title><rect x="98.9674%" y="197" width="0.0491%" height="15" fill="rgb(248,195,53)" fg:x="161399" fg:w="80"/><text x="99.2174%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (163 samples, 0.10%)</title><rect x="98.9404%" y="213" width="0.0999%" height="15" fill="rgb(226,201,16)" fg:x="161355" fg:w="163"/><text x="99.1904%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 0.02%)</title><rect x="99.0250%" y="197" width="0.0153%" height="15" fill="rgb(205,98,0)" fg:x="161493" fg:w="25"/><text x="99.2750%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (178 samples, 0.11%)</title><rect x="98.9331%" y="229" width="0.1091%" height="15" fill="rgb(214,191,48)" fg:x="161343" fg:w="178"/><text x="99.1831%" y="239.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (222 samples, 0.14%)</title><rect x="98.9153%" y="277" width="0.1361%" height="15" fill="rgb(237,112,39)" fg:x="161314" fg:w="222"/><text x="99.1653%" y="287.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (216 samples, 0.13%)</title><rect x="98.9190%" y="261" width="0.1324%" height="15" fill="rgb(247,203,27)" fg:x="161320" fg:w="216"/><text x="99.1690%" y="271.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (201 samples, 0.12%)</title><rect x="98.9282%" y="245" width="0.1233%" height="15" fill="rgb(235,124,28)" fg:x="161335" fg:w="201"/><text x="99.1782%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (56 samples, 0.03%)</title><rect x="99.0606%" y="261" width="0.0343%" height="15" fill="rgb(208,207,46)" fg:x="161551" fg:w="56"/><text x="99.3106%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (18 samples, 0.01%)</title><rect x="99.1225%" y="165" width="0.0110%" height="15" fill="rgb(234,176,4)" fg:x="161652" fg:w="18"/><text x="99.3725%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (43 samples, 0.03%)</title><rect x="99.1115%" y="181" width="0.0264%" height="15" fill="rgb(230,133,28)" fg:x="161634" fg:w="43"/><text x="99.3615%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (52 samples, 0.03%)</title><rect x="99.1066%" y="197" width="0.0319%" height="15" fill="rgb(211,137,40)" fg:x="161626" fg:w="52"/><text x="99.3566%" y="207.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (77 samples, 0.05%)</title><rect x="99.0949%" y="261" width="0.0472%" height="15" fill="rgb(254,35,13)" fg:x="161607" fg:w="77"/><text x="99.3449%" y="271.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (66 samples, 0.04%)</title><rect x="99.1017%" y="245" width="0.0405%" height="15" fill="rgb(225,49,51)" fg:x="161618" fg:w="66"/><text x="99.3517%" y="255.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (64 samples, 0.04%)</title><rect x="99.1029%" y="229" width="0.0392%" height="15" fill="rgb(251,10,15)" fg:x="161620" fg:w="64"/><text x="99.3529%" y="239.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (60 samples, 0.04%)</title><rect x="99.1054%" y="213" width="0.0368%" height="15" fill="rgb(228,207,15)" fg:x="161624" fg:w="60"/><text x="99.3554%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (392 samples, 0.24%)</title><rect x="98.9073%" y="293" width="0.2404%" height="15" fill="rgb(241,99,19)" fg:x="161301" fg:w="392"/><text x="99.1573%" y="303.50"></text></g><g><title>powergraph`core::fmt::write (150 samples, 0.09%)</title><rect x="99.0557%" y="277" width="0.0920%" height="15" fill="rgb(207,104,49)" fg:x="161543" fg:w="150"/><text x="99.3057%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (70 samples, 0.04%)</title><rect x="99.1845%" y="277" width="0.0429%" height="15" fill="rgb(234,99,18)" fg:x="161753" fg:w="70"/><text x="99.4345%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (32 samples, 0.02%)</title><rect x="99.2905%" y="181" width="0.0196%" height="15" fill="rgb(213,191,49)" fg:x="161926" fg:w="32"/><text x="99.5405%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (33 samples, 0.02%)</title><rect x="99.3102%" y="181" width="0.0202%" height="15" fill="rgb(210,226,19)" fg:x="161958" fg:w="33"/><text x="99.5602%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (40 samples, 0.02%)</title><rect x="99.3427%" y="165" width="0.0245%" height="15" fill="rgb(229,97,18)" fg:x="162011" fg:w="40"/><text x="99.5927%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (77 samples, 0.05%)</title><rect x="99.3304%" y="181" width="0.0472%" height="15" fill="rgb(211,167,15)" fg:x="161991" fg:w="77"/><text x="99.5804%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (191 samples, 0.12%)</title><rect x="99.2672%" y="197" width="0.1171%" height="15" fill="rgb(210,169,34)" fg:x="161888" fg:w="191"/><text x="99.5172%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (217 samples, 0.13%)</title><rect x="99.2544%" y="213" width="0.1331%" height="15" fill="rgb(241,121,31)" fg:x="161867" fg:w="217"/><text x="99.5044%" y="223.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (274 samples, 0.17%)</title><rect x="99.2378%" y="245" width="0.1680%" height="15" fill="rgb(232,40,11)" fg:x="161840" fg:w="274"/><text x="99.4878%" y="255.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (253 samples, 0.16%)</title><rect x="99.2507%" y="229" width="0.1551%" height="15" fill="rgb(205,86,26)" fg:x="161861" fg:w="253"/><text x="99.5007%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (30 samples, 0.02%)</title><rect x="99.3874%" y="213" width="0.0184%" height="15" fill="rgb(231,126,28)" fg:x="162084" fg:w="30"/><text x="99.6374%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (295 samples, 0.18%)</title><rect x="99.2274%" y="277" width="0.1809%" height="15" fill="rgb(219,221,18)" fg:x="161823" fg:w="295"/><text x="99.4774%" y="287.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (283 samples, 0.17%)</title><rect x="99.2347%" y="261" width="0.1735%" height="15" fill="rgb(211,40,0)" fg:x="161835" fg:w="283"/><text x="99.4847%" y="271.50"></text></g><g><title>powergraph`&lt;powergraph::unordered_tuple::UnorderedTuple&lt;T&gt; as core::cmp::Ord&gt;::cmp (1,288 samples, 0.79%)</title><rect x="98.6259%" y="325" width="0.7898%" height="15" fill="rgb(239,85,43)" fg:x="160842" fg:w="1288"/><text x="98.8759%" y="335.50"></text></g><g><title>powergraph`itertools::Itertools::join (1,144 samples, 0.70%)</title><rect x="98.7142%" y="309" width="0.7015%" height="15" fill="rgb(231,55,21)" fg:x="160986" fg:w="1144"/><text x="98.9642%" y="319.50"></text></g><g><title>powergraph`core::fmt::write (402 samples, 0.25%)</title><rect x="99.1691%" y="293" width="0.2465%" height="15" fill="rgb(225,184,43)" fg:x="161728" fg:w="402"/><text x="99.4191%" y="303.50"></text></g><g><title>powergraph`DYLD-STUB$$free (17 samples, 0.01%)</title><rect x="99.4156%" y="325" width="0.0104%" height="15" fill="rgb(251,158,41)" fg:x="162130" fg:w="17"/><text x="99.6656%" y="335.50"></text></g><g><title>powergraph`powergraph::similarity_matrix::SimilarityMatrix::set_similarity (11,411 samples, 7.00%)</title><rect x="92.4364%" y="341" width="6.9971%" height="15" fill="rgb(234,159,37)" fg:x="150748" fg:w="11411"/><text x="92.6864%" y="351.50">powergrap..</text></g><g><title>powergraph`powergraph::PowerGraph::decompose (160,452 samples, 98.39%)</title><rect x="1.0492%" y="357" width="98.3867%" height="15" fill="rgb(216,204,22)" fg:x="1711" fg:w="160452"/><text x="1.2992%" y="367.50">powergraph`powergraph::PowerGraph::decompose</text></g><g><title>powergraph`powergraph::edge_repository::EdgeRepository::get_edge (38 samples, 0.02%)</title><rect x="99.4438%" y="357" width="0.0233%" height="15" fill="rgb(214,17,3)" fg:x="162176" fg:w="38"/><text x="99.6938%" y="367.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (238 samples, 0.15%)</title><rect x="99.4671%" y="357" width="0.1459%" height="15" fill="rgb(212,111,17)" fg:x="162214" fg:w="238"/><text x="99.7171%" y="367.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (100 samples, 0.06%)</title><rect x="99.6131%" y="357" width="0.0613%" height="15" fill="rgb(221,157,24)" fg:x="162452" fg:w="100"/><text x="99.8631%" y="367.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::is_proper_subset_of (66 samples, 0.04%)</title><rect x="99.6744%" y="357" width="0.0405%" height="15" fill="rgb(252,16,13)" fg:x="162552" fg:w="66"/><text x="99.9244%" y="367.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::iter (30 samples, 0.02%)</title><rect x="99.7149%" y="357" width="0.0184%" height="15" fill="rgb(221,62,2)" fg:x="162618" fg:w="30"/><text x="99.9649%" y="367.50"></text></g><g><title>powergraph`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (20 samples, 0.01%)</title><rect x="99.7504%" y="293" width="0.0123%" height="15" fill="rgb(247,87,22)" fg:x="162676" fg:w="20"/><text x="100.0004%" y="303.50"></text></g><g><title>powergraph`&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 0.04%)</title><rect x="99.8136%" y="261" width="0.0368%" height="15" fill="rgb(215,73,9)" fg:x="162779" fg:w="60"/><text x="100.0636%" y="271.50"></text></g><g><title>powergraph`&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 0.04%)</title><rect x="99.8743%" y="245" width="0.0380%" height="15" fill="rgb(207,175,33)" fg:x="162878" fg:w="62"/><text x="100.1243%" y="255.50"></text></g><g><title>powergraph`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::ignore_str (241 samples, 0.15%)</title><rect x="99.7750%" y="277" width="0.1478%" height="15" fill="rgb(243,129,54)" fg:x="162716" fg:w="241"/><text x="100.0250%" y="287.50"></text></g><g><title>powergraph`serde_json::read::next_or_eof (118 samples, 0.07%)</title><rect x="99.8504%" y="261" width="0.0724%" height="15" fill="rgb(227,119,45)" fg:x="162839" fg:w="118"/><text x="100.1004%" y="271.50"></text></g><g><title>powergraph`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="99.9123%" y="245" width="0.0104%" height="15" fill="rgb(205,109,36)" fg:x="162940" fg:w="17"/><text x="100.1623%" y="255.50"></text></g><g><title>powergraph`serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (25 samples, 0.02%)</title><rect x="99.9283%" y="277" width="0.0153%" height="15" fill="rgb(205,6,39)" fg:x="162966" fg:w="25"/><text x="100.1783%" y="287.50"></text></g><g><title>powergraph`serde::de::MapAccess::next_value (331 samples, 0.20%)</title><rect x="99.7627%" y="293" width="0.2030%" height="15" fill="rgb(221,32,16)" fg:x="162696" fg:w="331"/><text x="100.0127%" y="303.50"></text></g><g><title>powergraph`serde_json::read::next_or_eof (26 samples, 0.02%)</title><rect x="99.9497%" y="277" width="0.0159%" height="15" fill="rgb(228,144,50)" fg:x="163001" fg:w="26"/><text x="100.1997%" y="287.50"></text></g><g><title>powergraph`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (373 samples, 0.23%)</title><rect x="99.7455%" y="309" width="0.2287%" height="15" fill="rgb(229,201,53)" fg:x="162668" fg:w="373"/><text x="99.9955%" y="319.50"></text></g><g><title>powergraph`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (404 samples, 0.25%)</title><rect x="99.7382%" y="325" width="0.2477%" height="15" fill="rgb(249,153,27)" fg:x="162656" fg:w="404"/><text x="99.9882%" y="335.50"></text></g><g><title>powergraph`serde::de::MapAccess::next_value (17 samples, 0.01%)</title><rect x="99.9859%" y="325" width="0.0104%" height="15" fill="rgb(227,106,25)" fg:x="163060" fg:w="17"/><text x="100.2359%" y="335.50"></text></g><g><title>powergraph`std::rt::lang_start_internal (163,077 samples, 100.00%)</title><rect x="0.0006%" y="421" width="99.9963%" height="15" fill="rgb(230,65,29)" fg:x="1" fg:w="163077"/><text x="0.2506%" y="431.50">powergraph`std::rt::lang_start_internal</text></g><g><title>powergraph`std::rt::lang_start::_{{closure}} (163,077 samples, 100.00%)</title><rect x="0.0006%" y="405" width="99.9963%" height="15" fill="rgb(221,57,46)" fg:x="1" fg:w="163077"/><text x="0.2506%" y="415.50">powergraph`std::rt::lang_start::_{{closure}}</text></g><g><title>powergraph`std::sys::backtrace::__rust_begin_short_backtrace (163,077 samples, 100.00%)</title><rect x="0.0006%" y="389" width="99.9963%" height="15" fill="rgb(229,161,17)" fg:x="1" fg:w="163077"/><text x="0.2506%" y="399.50">powergraph`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>powergraph`powergraph::main (163,077 samples, 100.00%)</title><rect x="0.0006%" y="373" width="99.9963%" height="15" fill="rgb(222,213,11)" fg:x="1" fg:w="163077"/><text x="0.2506%" y="383.50">powergraph`powergraph::main</text></g><g><title>powergraph`serde_json::de::from_reader (422 samples, 0.26%)</title><rect x="99.7382%" y="357" width="0.2588%" height="15" fill="rgb(235,35,13)" fg:x="162656" fg:w="422"/><text x="99.9882%" y="367.50"></text></g><g><title>powergraph`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (422 samples, 0.26%)</title><rect x="99.7382%" y="341" width="0.2588%" height="15" fill="rgb(233,158,34)" fg:x="162656" fg:w="422"/><text x="99.9882%" y="351.50"></text></g><g><title>dyld`start (163,079 samples, 100.00%)</title><rect x="0.0000%" y="453" width="99.9975%" height="15" fill="rgb(215,151,48)" fg:x="0" fg:w="163079"/><text x="0.2500%" y="463.50">dyld`start</text></g><g><title>powergraph`main (163,078 samples, 100.00%)</title><rect x="0.0006%" y="437" width="99.9969%" height="15" fill="rgb(229,84,14)" fg:x="1" fg:w="163078"/><text x="0.2506%" y="447.50">powergraph`main</text></g><g><title>all (163,083 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(229,68,14)" fg:x="0" fg:w="163083"/><text x="0.2500%" y="479.50"></text></g></svg></svg>