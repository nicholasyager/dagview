<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="248861"><g><title>libsystem_malloc.dylib`_free (332 samples, 0.13%)</title><rect x="0.0000%" y="309" width="0.1334%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="332"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (138 samples, 0.06%)</title><rect x="0.1334%" y="309" width="0.0555%" height="15" fill="rgb(217,0,24)" fg:x="332" fg:w="138"/><text x="0.3834%" y="319.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.01%)</title><rect x="0.1925%" y="309" width="0.0149%" height="15" fill="rgb(221,193,54)" fg:x="479" fg:w="37"/><text x="0.4425%" y="319.50"></text></g><g><title>powergraph`DYLD-STUB$$free (114 samples, 0.05%)</title><rect x="0.2230%" y="309" width="0.0458%" height="15" fill="rgb(248,212,6)" fg:x="555" fg:w="114"/><text x="0.4730%" y="319.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (67 samples, 0.03%)</title><rect x="0.2732%" y="309" width="0.0269%" height="15" fill="rgb(208,68,35)" fg:x="680" fg:w="67"/><text x="0.5232%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (151 samples, 0.06%)</title><rect x="0.4271%" y="293" width="0.0607%" height="15" fill="rgb(232,128,0)" fg:x="1063" fg:w="151"/><text x="0.6771%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_free (256 samples, 0.10%)</title><rect x="0.4882%" y="293" width="0.1029%" height="15" fill="rgb(207,160,47)" fg:x="1215" fg:w="256"/><text x="0.7382%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (965 samples, 0.39%)</title><rect x="0.5911%" y="293" width="0.3878%" height="15" fill="rgb(228,23,34)" fg:x="1471" fg:w="965"/><text x="0.8411%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (88 samples, 0.04%)</title><rect x="0.9845%" y="293" width="0.0354%" height="15" fill="rgb(218,30,26)" fg:x="2450" fg:w="88"/><text x="1.2345%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (58 samples, 0.02%)</title><rect x="0.9965%" y="277" width="0.0233%" height="15" fill="rgb(220,122,19)" fg:x="2480" fg:w="58"/><text x="1.2465%" y="287.50"></text></g><g><title>libsystem_platform.dylib`__bzero (61 samples, 0.02%)</title><rect x="1.0223%" y="293" width="0.0245%" height="15" fill="rgb(250,228,42)" fg:x="2544" fg:w="61"/><text x="1.2723%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (345 samples, 0.14%)</title><rect x="1.0488%" y="293" width="0.1386%" height="15" fill="rgb(240,193,28)" fg:x="2610" fg:w="345"/><text x="1.2988%" y="303.50"></text></g><g><title>powergraph`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (42 samples, 0.02%)</title><rect x="1.1874%" y="293" width="0.0169%" height="15" fill="rgb(216,20,37)" fg:x="2955" fg:w="42"/><text x="1.4374%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.02%)</title><rect x="1.2043%" y="293" width="0.0165%" height="15" fill="rgb(206,188,39)" fg:x="2997" fg:w="41"/><text x="1.4543%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (49 samples, 0.02%)</title><rect x="1.2208%" y="293" width="0.0197%" height="15" fill="rgb(217,207,13)" fg:x="3038" fg:w="49"/><text x="1.4708%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.02%)</title><rect x="1.2477%" y="293" width="0.0181%" height="15" fill="rgb(231,73,38)" fg:x="3105" fg:w="45"/><text x="1.4977%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_free (46 samples, 0.02%)</title><rect x="1.2907%" y="261" width="0.0185%" height="15" fill="rgb(225,20,46)" fg:x="3212" fg:w="46"/><text x="1.5407%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (41 samples, 0.02%)</title><rect x="1.3469%" y="149" width="0.0165%" height="15" fill="rgb(210,31,41)" fg:x="3352" fg:w="41"/><text x="1.5969%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (36 samples, 0.01%)</title><rect x="1.3489%" y="133" width="0.0145%" height="15" fill="rgb(221,200,47)" fg:x="3357" fg:w="36"/><text x="1.5989%" y="143.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (92 samples, 0.04%)</title><rect x="1.3293%" y="165" width="0.0370%" height="15" fill="rgb(226,26,5)" fg:x="3308" fg:w="92"/><text x="1.5793%" y="175.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (115 samples, 0.05%)</title><rect x="1.3256%" y="181" width="0.0462%" height="15" fill="rgb(249,33,26)" fg:x="3299" fg:w="115"/><text x="1.5756%" y="191.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (127 samples, 0.05%)</title><rect x="1.3216%" y="213" width="0.0510%" height="15" fill="rgb(235,183,28)" fg:x="3289" fg:w="127"/><text x="1.5716%" y="223.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (120 samples, 0.05%)</title><rect x="1.3244%" y="197" width="0.0482%" height="15" fill="rgb(221,5,38)" fg:x="3296" fg:w="120"/><text x="1.5744%" y="207.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (135 samples, 0.05%)</title><rect x="1.3200%" y="245" width="0.0542%" height="15" fill="rgb(247,18,42)" fg:x="3285" fg:w="135"/><text x="1.5700%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (135 samples, 0.05%)</title><rect x="1.3200%" y="229" width="0.0542%" height="15" fill="rgb(241,131,45)" fg:x="3285" fg:w="135"/><text x="1.5700%" y="239.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (144 samples, 0.06%)</title><rect x="1.3192%" y="261" width="0.0579%" height="15" fill="rgb(249,31,29)" fg:x="3283" fg:w="144"/><text x="1.5692%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (48 samples, 0.02%)</title><rect x="1.3779%" y="245" width="0.0193%" height="15" fill="rgb(225,111,53)" fg:x="3429" fg:w="48"/><text x="1.6279%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (61 samples, 0.02%)</title><rect x="1.3972%" y="245" width="0.0245%" height="15" fill="rgb(238,160,17)" fg:x="3477" fg:w="61"/><text x="1.6472%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (52 samples, 0.02%)</title><rect x="1.4217%" y="245" width="0.0209%" height="15" fill="rgb(214,148,48)" fg:x="3538" fg:w="52"/><text x="1.6717%" y="255.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_trusted (25 samples, 0.01%)</title><rect x="1.4325%" y="229" width="0.0100%" height="15" fill="rgb(232,36,49)" fg:x="3565" fg:w="25"/><text x="1.6825%" y="239.50"></text></g><g><title>powergraph`itertools::combinations_with_replacement::CombinationsWithReplacement&lt;I&gt;::increment_indices (39 samples, 0.02%)</title><rect x="1.4490%" y="245" width="0.0157%" height="15" fill="rgb(209,103,24)" fg:x="3606" fg:w="39"/><text x="1.6990%" y="255.50"></text></g><g><title>powergraph`&lt;itertools::combinations_with_replacement::CombinationsWithReplacement&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (224 samples, 0.09%)</title><rect x="1.3771%" y="261" width="0.0900%" height="15" fill="rgb(229,88,8)" fg:x="3427" fg:w="224"/><text x="1.6271%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (26 samples, 0.01%)</title><rect x="1.4787%" y="229" width="0.0104%" height="15" fill="rgb(213,181,19)" fg:x="3680" fg:w="26"/><text x="1.7287%" y="239.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (33 samples, 0.01%)</title><rect x="1.4767%" y="245" width="0.0133%" height="15" fill="rgb(254,191,54)" fg:x="3675" fg:w="33"/><text x="1.7267%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (42 samples, 0.02%)</title><rect x="1.4928%" y="245" width="0.0169%" height="15" fill="rgb(241,83,37)" fg:x="3715" fg:w="42"/><text x="1.7428%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (32 samples, 0.01%)</title><rect x="1.4968%" y="229" width="0.0129%" height="15" fill="rgb(233,36,39)" fg:x="3725" fg:w="32"/><text x="1.7468%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (27 samples, 0.01%)</title><rect x="1.5503%" y="149" width="0.0108%" height="15" fill="rgb(226,3,54)" fg:x="3858" fg:w="27"/><text x="1.8003%" y="159.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::new (123 samples, 0.05%)</title><rect x="1.5145%" y="229" width="0.0494%" height="15" fill="rgb(245,192,40)" fg:x="3769" fg:w="123"/><text x="1.7645%" y="239.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (105 samples, 0.04%)</title><rect x="1.5217%" y="213" width="0.0422%" height="15" fill="rgb(238,167,29)" fg:x="3787" fg:w="105"/><text x="1.7717%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (103 samples, 0.04%)</title><rect x="1.5225%" y="197" width="0.0414%" height="15" fill="rgb(232,182,51)" fg:x="3789" fg:w="103"/><text x="1.7725%" y="207.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (59 samples, 0.02%)</title><rect x="1.5402%" y="181" width="0.0237%" height="15" fill="rgb(231,60,39)" fg:x="3833" fg:w="59"/><text x="1.7902%" y="191.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (39 samples, 0.02%)</title><rect x="1.5483%" y="165" width="0.0157%" height="15" fill="rgb(208,69,12)" fg:x="3853" fg:w="39"/><text x="1.7983%" y="175.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (77 samples, 0.03%)</title><rect x="1.5643%" y="197" width="0.0309%" height="15" fill="rgb(235,93,37)" fg:x="3893" fg:w="77"/><text x="1.8143%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (77 samples, 0.03%)</title><rect x="1.5643%" y="181" width="0.0309%" height="15" fill="rgb(213,116,39)" fg:x="3893" fg:w="77"/><text x="1.8143%" y="191.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (32 samples, 0.01%)</title><rect x="1.5824%" y="165" width="0.0129%" height="15" fill="rgb(222,207,29)" fg:x="3938" fg:w="32"/><text x="1.8324%" y="175.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::union (211 samples, 0.08%)</title><rect x="1.5129%" y="245" width="0.0848%" height="15" fill="rgb(206,96,30)" fg:x="3765" fg:w="211"/><text x="1.7629%" y="255.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::union (84 samples, 0.03%)</title><rect x="1.5639%" y="229" width="0.0338%" height="15" fill="rgb(218,138,4)" fg:x="3892" fg:w="84"/><text x="1.8139%" y="239.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (83 samples, 0.03%)</title><rect x="1.5643%" y="213" width="0.0334%" height="15" fill="rgb(250,191,14)" fg:x="3893" fg:w="83"/><text x="1.8143%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (34 samples, 0.01%)</title><rect x="1.6017%" y="229" width="0.0137%" height="15" fill="rgb(239,60,40)" fg:x="3986" fg:w="34"/><text x="1.8517%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (34 samples, 0.01%)</title><rect x="1.6017%" y="213" width="0.0137%" height="15" fill="rgb(206,27,48)" fg:x="3986" fg:w="34"/><text x="1.8517%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (248 samples, 0.10%)</title><rect x="1.6190%" y="213" width="0.0997%" height="15" fill="rgb(225,35,8)" fg:x="4029" fg:w="248"/><text x="1.8690%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (67 samples, 0.03%)</title><rect x="1.7190%" y="213" width="0.0269%" height="15" fill="rgb(250,213,24)" fg:x="4278" fg:w="67"/><text x="1.9690%" y="223.50"></text></g><g><title>powergraph`DYLD-STUB$$free (75 samples, 0.03%)</title><rect x="1.7552%" y="213" width="0.0301%" height="15" fill="rgb(247,123,22)" fg:x="4368" fg:w="75"/><text x="2.0052%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (31 samples, 0.01%)</title><rect x="1.8557%" y="197" width="0.0125%" height="15" fill="rgb(231,138,38)" fg:x="4618" fg:w="31"/><text x="2.1057%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (600 samples, 0.24%)</title><rect x="1.8693%" y="197" width="0.2411%" height="15" fill="rgb(231,145,46)" fg:x="4652" fg:w="600"/><text x="2.1193%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (45 samples, 0.02%)</title><rect x="2.1193%" y="197" width="0.0181%" height="15" fill="rgb(251,118,11)" fg:x="5274" fg:w="45"/><text x="2.3693%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (33 samples, 0.01%)</title><rect x="2.1743%" y="165" width="0.0133%" height="15" fill="rgb(217,147,25)" fg:x="5411" fg:w="33"/><text x="2.4243%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (145 samples, 0.06%)</title><rect x="2.1373%" y="197" width="0.0583%" height="15" fill="rgb(247,81,37)" fg:x="5319" fg:w="145"/><text x="2.3873%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (102 samples, 0.04%)</title><rect x="2.1546%" y="181" width="0.0410%" height="15" fill="rgb(209,12,38)" fg:x="5362" fg:w="102"/><text x="2.4046%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (26 samples, 0.01%)</title><rect x="2.2016%" y="197" width="0.0104%" height="15" fill="rgb(227,1,9)" fg:x="5479" fg:w="26"/><text x="2.4516%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (310 samples, 0.12%)</title><rect x="2.2121%" y="197" width="0.1246%" height="15" fill="rgb(248,47,43)" fg:x="5505" fg:w="310"/><text x="2.4621%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (63 samples, 0.03%)</title><rect x="2.3379%" y="197" width="0.0253%" height="15" fill="rgb(221,10,30)" fg:x="5818" fg:w="63"/><text x="2.5879%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (828 samples, 0.33%)</title><rect x="2.4130%" y="181" width="0.3327%" height="15" fill="rgb(210,229,1)" fg:x="6005" fg:w="828"/><text x="2.6630%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (169 samples, 0.07%)</title><rect x="2.7457%" y="181" width="0.0679%" height="15" fill="rgb(222,148,37)" fg:x="6833" fg:w="169"/><text x="2.9957%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (25 samples, 0.01%)</title><rect x="2.8136%" y="181" width="0.0100%" height="15" fill="rgb(234,67,33)" fg:x="7002" fg:w="25"/><text x="3.0636%" y="191.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (124 samples, 0.05%)</title><rect x="2.8237%" y="181" width="0.0498%" height="15" fill="rgb(247,98,35)" fg:x="7027" fg:w="124"/><text x="3.0737%" y="191.50"></text></g><g><title>powergraph`DYLD-STUB$$free (313 samples, 0.13%)</title><rect x="2.8735%" y="181" width="0.1258%" height="15" fill="rgb(247,138,52)" fg:x="7151" fg:w="313"/><text x="3.1235%" y="191.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::string::String&gt; (62 samples, 0.02%)</title><rect x="3.0097%" y="181" width="0.0249%" height="15" fill="rgb(213,79,30)" fg:x="7490" fg:w="62"/><text x="3.2597%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (105 samples, 0.04%)</title><rect x="3.3585%" y="165" width="0.0422%" height="15" fill="rgb(246,177,23)" fg:x="8358" fg:w="105"/><text x="3.6085%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,866 samples, 0.75%)</title><rect x="3.4007%" y="165" width="0.7498%" height="15" fill="rgb(230,62,27)" fg:x="8463" fg:w="1866"/><text x="3.6507%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (311 samples, 0.12%)</title><rect x="4.1505%" y="165" width="0.1250%" height="15" fill="rgb(216,154,8)" fg:x="10329" fg:w="311"/><text x="4.4005%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2,258 samples, 0.91%)</title><rect x="4.2755%" y="165" width="0.9073%" height="15" fill="rgb(244,35,45)" fg:x="10640" fg:w="2258"/><text x="4.5255%" y="175.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.03%)</title><rect x="5.1828%" y="165" width="0.0269%" height="15" fill="rgb(251,115,12)" fg:x="12898" fg:w="67"/><text x="5.4328%" y="175.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (8,508 samples, 3.42%)</title><rect x="1.7970%" y="213" width="3.4188%" height="15" fill="rgb(240,54,50)" fg:x="4472" fg:w="8508"/><text x="2.0470%" y="223.50">pow..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (7,099 samples, 2.85%)</title><rect x="2.3632%" y="197" width="2.8526%" height="15" fill="rgb(233,84,52)" fg:x="5881" fg:w="7099"/><text x="2.6132%" y="207.50">po..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (5,428 samples, 2.18%)</title><rect x="3.0346%" y="181" width="2.1811%" height="15" fill="rgb(207,117,47)" fg:x="7552" fg:w="5428"/><text x="3.2846%" y="191.50">p..</text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (245 samples, 0.10%)</title><rect x="5.2158%" y="213" width="0.0984%" height="15" fill="rgb(249,43,39)" fg:x="12980" fg:w="245"/><text x="5.4658%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (9,218 samples, 3.70%)</title><rect x="1.6186%" y="229" width="3.7041%" height="15" fill="rgb(209,38,44)" fg:x="4028" fg:w="9218"/><text x="1.8686%" y="239.50">powe..</text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (104 samples, 0.04%)</title><rect x="5.3323%" y="213" width="0.0418%" height="15" fill="rgb(236,212,23)" fg:x="13270" fg:w="104"/><text x="5.5823%" y="223.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (42 samples, 0.02%)</title><rect x="5.3741%" y="213" width="0.0169%" height="15" fill="rgb(242,79,21)" fg:x="13374" fg:w="42"/><text x="5.6241%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (240 samples, 0.10%)</title><rect x="5.6839%" y="197" width="0.0964%" height="15" fill="rgb(211,96,35)" fg:x="14145" fg:w="240"/><text x="5.9339%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (493 samples, 0.20%)</title><rect x="5.7880%" y="197" width="0.1981%" height="15" fill="rgb(253,215,40)" fg:x="14404" fg:w="493"/><text x="6.0380%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,232 samples, 0.50%)</title><rect x="5.9861%" y="197" width="0.4951%" height="15" fill="rgb(211,81,21)" fg:x="14897" fg:w="1232"/><text x="6.2361%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1,401 samples, 0.56%)</title><rect x="6.5326%" y="181" width="0.5630%" height="15" fill="rgb(208,190,38)" fg:x="16257" fg:w="1401"/><text x="6.7826%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1,374 samples, 0.55%)</title><rect x="6.5434%" y="165" width="0.5521%" height="15" fill="rgb(235,213,38)" fg:x="16284" fg:w="1374"/><text x="6.7934%" y="175.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,534 samples, 0.62%)</title><rect x="6.4811%" y="197" width="0.6164%" height="15" fill="rgb(237,122,38)" fg:x="16129" fg:w="1534"/><text x="6.7311%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (547 samples, 0.22%)</title><rect x="7.1498%" y="181" width="0.2198%" height="15" fill="rgb(244,218,35)" fg:x="17793" fg:w="547"/><text x="7.3998%" y="191.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (361 samples, 0.15%)</title><rect x="7.3696%" y="181" width="0.1451%" height="15" fill="rgb(240,68,47)" fg:x="18340" fg:w="361"/><text x="7.6196%" y="191.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (34 samples, 0.01%)</title><rect x="7.5146%" y="181" width="0.0137%" height="15" fill="rgb(210,16,53)" fg:x="18701" fg:w="34"/><text x="7.7646%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (876 samples, 0.35%)</title><rect x="7.9615%" y="165" width="0.3520%" height="15" fill="rgb(235,124,12)" fg:x="19813" fg:w="876"/><text x="8.2115%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (46 samples, 0.02%)</title><rect x="8.3135%" y="165" width="0.0185%" height="15" fill="rgb(224,169,11)" fg:x="20689" fg:w="46"/><text x="8.5635%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,680 samples, 0.68%)</title><rect x="8.3392%" y="165" width="0.6751%" height="15" fill="rgb(250,166,2)" fg:x="20753" fg:w="1680"/><text x="8.5892%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6,525 samples, 2.62%)</title><rect x="9.0143%" y="165" width="2.6219%" height="15" fill="rgb(242,216,29)" fg:x="22433" fg:w="6525"/><text x="9.2643%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (4,174 samples, 1.68%)</title><rect x="11.8207%" y="149" width="1.6772%" height="15" fill="rgb(230,116,27)" fg:x="29417" fg:w="4174"/><text x="12.0707%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4,133 samples, 1.66%)</title><rect x="11.8371%" y="133" width="1.6608%" height="15" fill="rgb(228,99,48)" fg:x="29458" fg:w="4133"/><text x="12.0871%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (45 samples, 0.02%)</title><rect x="13.4798%" y="117" width="0.0181%" height="15" fill="rgb(253,11,6)" fg:x="33546" fg:w="45"/><text x="13.7298%" y="127.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (4,640 samples, 1.86%)</title><rect x="11.6362%" y="165" width="1.8645%" height="15" fill="rgb(247,143,39)" fg:x="28958" fg:w="4640"/><text x="11.8862%" y="175.50">p..</text></g><g><title>powergraph`DYLD-STUB$$malloc (173 samples, 0.07%)</title><rect x="13.5007%" y="165" width="0.0695%" height="15" fill="rgb(236,97,10)" fg:x="33598" fg:w="173"/><text x="13.7507%" y="175.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (47 samples, 0.02%)</title><rect x="13.5702%" y="165" width="0.0189%" height="15" fill="rgb(233,208,19)" fg:x="33771" fg:w="47"/><text x="13.8202%" y="175.50"></text></g><g><title>powergraph`__rdl_alloc (125 samples, 0.05%)</title><rect x="13.5891%" y="165" width="0.0502%" height="15" fill="rgb(216,164,2)" fg:x="33818" fg:w="125"/><text x="13.8391%" y="175.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (15,217 samples, 6.11%)</title><rect x="7.5283%" y="181" width="6.1147%" height="15" fill="rgb(220,129,5)" fg:x="18735" fg:w="15217"/><text x="7.7783%" y="191.50">powergra..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (270 samples, 0.11%)</title><rect x="13.6747%" y="165" width="0.1085%" height="15" fill="rgb(242,17,10)" fg:x="34031" fg:w="270"/><text x="13.9247%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (415 samples, 0.17%)</title><rect x="13.7908%" y="165" width="0.1668%" height="15" fill="rgb(242,107,0)" fg:x="34320" fg:w="415"/><text x="14.0408%" y="175.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (31 samples, 0.01%)</title><rect x="13.9592%" y="165" width="0.0125%" height="15" fill="rgb(251,28,31)" fg:x="34739" fg:w="31"/><text x="14.2092%" y="175.50"></text></g><g><title>powergraph`__rdl_alloc (25 samples, 0.01%)</title><rect x="13.9717%" y="165" width="0.0100%" height="15" fill="rgb(233,223,10)" fg:x="34770" fg:w="25"/><text x="14.2217%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (652 samples, 0.26%)</title><rect x="14.0613%" y="149" width="0.2620%" height="15" fill="rgb(215,21,27)" fg:x="34993" fg:w="652"/><text x="14.3113%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (635 samples, 0.26%)</title><rect x="14.0681%" y="133" width="0.2552%" height="15" fill="rgb(232,23,21)" fg:x="35010" fg:w="635"/><text x="14.3181%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (50 samples, 0.02%)</title><rect x="14.3462%" y="133" width="0.0201%" height="15" fill="rgb(244,5,23)" fg:x="35702" fg:w="50"/><text x="14.5962%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (46 samples, 0.02%)</title><rect x="14.3478%" y="117" width="0.0185%" height="15" fill="rgb(226,81,46)" fg:x="35706" fg:w="46"/><text x="14.5978%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (34 samples, 0.01%)</title><rect x="14.3771%" y="117" width="0.0137%" height="15" fill="rgb(247,70,30)" fg:x="35779" fg:w="34"/><text x="14.6271%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (254 samples, 0.10%)</title><rect x="14.3265%" y="149" width="0.1021%" height="15" fill="rgb(212,68,19)" fg:x="35653" fg:w="254"/><text x="14.5765%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (150 samples, 0.06%)</title><rect x="14.3683%" y="133" width="0.0603%" height="15" fill="rgb(240,187,13)" fg:x="35757" fg:w="150"/><text x="14.6183%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (94 samples, 0.04%)</title><rect x="14.3908%" y="117" width="0.0378%" height="15" fill="rgb(223,113,26)" fg:x="35813" fg:w="94"/><text x="14.6408%" y="127.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (1,960 samples, 0.79%)</title><rect x="13.6430%" y="181" width="0.7876%" height="15" fill="rgb(206,192,2)" fg:x="33952" fg:w="1960"/><text x="13.8930%" y="191.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (1,116 samples, 0.45%)</title><rect x="13.9821%" y="165" width="0.4484%" height="15" fill="rgb(241,108,4)" fg:x="34796" fg:w="1116"/><text x="14.2321%" y="175.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (18,342 samples, 7.37%)</title><rect x="7.0975%" y="197" width="7.3704%" height="15" fill="rgb(247,173,49)" fg:x="17663" fg:w="18342"/><text x="7.3475%" y="207.50">powergraph..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (93 samples, 0.04%)</title><rect x="14.4305%" y="181" width="0.0374%" height="15" fill="rgb(224,114,35)" fg:x="35912" fg:w="93"/><text x="14.6805%" y="191.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (39 samples, 0.02%)</title><rect x="14.4679%" y="197" width="0.0157%" height="15" fill="rgb(245,159,27)" fg:x="36005" fg:w="39"/><text x="14.7179%" y="207.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (34 samples, 0.01%)</title><rect x="14.4836%" y="197" width="0.0137%" height="15" fill="rgb(245,172,44)" fg:x="36044" fg:w="34"/><text x="14.7336%" y="207.50"></text></g><g><title>powergraph`__rdl_alloc (35 samples, 0.01%)</title><rect x="14.4972%" y="197" width="0.0141%" height="15" fill="rgb(236,23,11)" fg:x="36078" fg:w="35"/><text x="14.7472%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (191 samples, 0.08%)</title><rect x="14.5161%" y="197" width="0.0767%" height="15" fill="rgb(205,117,38)" fg:x="36125" fg:w="191"/><text x="14.7661%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (22,906 samples, 9.20%)</title><rect x="5.3910%" y="213" width="9.2043%" height="15" fill="rgb(237,72,25)" fg:x="13416" fg:w="22906"/><text x="5.6410%" y="223.50">powergraph`ha..</text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (23,080 samples, 9.27%)</title><rect x="5.3247%" y="229" width="9.2743%" height="15" fill="rgb(244,70,9)" fg:x="13251" fg:w="23080"/><text x="5.5747%" y="239.50">powergraph`&lt;h..</text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (229 samples, 0.09%)</title><rect x="14.6057%" y="229" width="0.0920%" height="15" fill="rgb(217,125,39)" fg:x="36348" fg:w="229"/><text x="14.8557%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (266 samples, 0.11%)</title><rect x="14.6978%" y="213" width="0.1069%" height="15" fill="rgb(235,36,10)" fg:x="36577" fg:w="266"/><text x="14.9478%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (60 samples, 0.02%)</title><rect x="14.8046%" y="213" width="0.0241%" height="15" fill="rgb(251,123,47)" fg:x="36843" fg:w="60"/><text x="15.0546%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.02%)</title><rect x="14.8304%" y="213" width="0.0169%" height="15" fill="rgb(221,13,13)" fg:x="36907" fg:w="42"/><text x="15.0804%" y="223.50"></text></g><g><title>powergraph`DYLD-STUB$$free (125 samples, 0.05%)</title><rect x="14.8472%" y="213" width="0.0502%" height="15" fill="rgb(238,131,9)" fg:x="36949" fg:w="125"/><text x="15.0972%" y="223.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::string::String&gt; (27 samples, 0.01%)</title><rect x="14.8979%" y="213" width="0.0108%" height="15" fill="rgb(211,50,8)" fg:x="37075" fg:w="27"/><text x="15.1479%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (25 samples, 0.01%)</title><rect x="14.9911%" y="197" width="0.0100%" height="15" fill="rgb(245,182,24)" fg:x="37307" fg:w="25"/><text x="15.2411%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (527 samples, 0.21%)</title><rect x="15.0011%" y="197" width="0.2118%" height="15" fill="rgb(242,14,37)" fg:x="37332" fg:w="527"/><text x="15.2511%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (133 samples, 0.05%)</title><rect x="15.2153%" y="197" width="0.0534%" height="15" fill="rgb(246,228,12)" fg:x="37865" fg:w="133"/><text x="15.4653%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (461 samples, 0.19%)</title><rect x="15.2688%" y="197" width="0.1852%" height="15" fill="rgb(213,55,15)" fg:x="37998" fg:w="461"/><text x="15.5188%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (1,900 samples, 0.76%)</title><rect x="14.6978%" y="229" width="0.7635%" height="15" fill="rgb(209,9,3)" fg:x="36577" fg:w="1900"/><text x="14.9478%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (1,375 samples, 0.55%)</title><rect x="14.9087%" y="213" width="0.5525%" height="15" fill="rgb(230,59,30)" fg:x="37102" fg:w="1375"/><text x="15.1587%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (74 samples, 0.03%)</title><rect x="15.4866%" y="213" width="0.0297%" height="15" fill="rgb(209,121,21)" fg:x="38540" fg:w="74"/><text x="15.7366%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (72 samples, 0.03%)</title><rect x="15.4874%" y="197" width="0.0289%" height="15" fill="rgb(220,109,13)" fg:x="38542" fg:w="72"/><text x="15.7374%" y="207.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,179 samples, 0.88%)</title><rect x="15.9901%" y="197" width="0.8756%" height="15" fill="rgb(232,18,1)" fg:x="39793" fg:w="2179"/><text x="16.2401%" y="207.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (588 samples, 0.24%)</title><rect x="16.8660%" y="197" width="0.2363%" height="15" fill="rgb(215,41,42)" fg:x="41973" fg:w="588"/><text x="17.1160%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (225 samples, 0.09%)</title><rect x="17.2852%" y="165" width="0.0904%" height="15" fill="rgb(224,123,36)" fg:x="43016" fg:w="225"/><text x="17.5352%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (232 samples, 0.09%)</title><rect x="17.2827%" y="181" width="0.0932%" height="15" fill="rgb(240,125,3)" fg:x="43010" fg:w="232"/><text x="17.5327%" y="191.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,021 samples, 1.62%)</title><rect x="17.3800%" y="181" width="1.6158%" height="15" fill="rgb(205,98,50)" fg:x="43252" fg:w="4021"/><text x="17.6300%" y="191.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (860 samples, 0.35%)</title><rect x="18.9970%" y="181" width="0.3456%" height="15" fill="rgb(205,185,37)" fg:x="47276" fg:w="860"/><text x="19.2470%" y="191.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9,541 samples, 3.83%)</title><rect x="15.5191%" y="213" width="3.8339%" height="15" fill="rgb(238,207,15)" fg:x="38621" fg:w="9541"/><text x="15.7691%" y="223.50">powe..</text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5,601 samples, 2.25%)</title><rect x="17.1023%" y="197" width="2.2507%" height="15" fill="rgb(213,199,42)" fg:x="42561" fg:w="5601"/><text x="17.3523%" y="207.50">p..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (26 samples, 0.01%)</title><rect x="19.3425%" y="181" width="0.0104%" height="15" fill="rgb(235,201,11)" fg:x="48136" fg:w="26"/><text x="19.5925%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (25 samples, 0.01%)</title><rect x="19.3429%" y="165" width="0.0100%" height="15" fill="rgb(207,46,11)" fg:x="48137" fg:w="25"/><text x="19.5929%" y="175.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::from_iter (9,691 samples, 3.89%)</title><rect x="15.4612%" y="229" width="3.8941%" height="15" fill="rgb(241,35,35)" fg:x="38477" fg:w="9691"/><text x="15.7112%" y="239.50">powe..</text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (48 samples, 0.02%)</title><rect x="19.3574%" y="213" width="0.0193%" height="15" fill="rgb(243,32,47)" fg:x="48173" fg:w="48"/><text x="19.6074%" y="223.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (56 samples, 0.02%)</title><rect x="19.3554%" y="229" width="0.0225%" height="15" fill="rgb(247,202,23)" fg:x="48168" fg:w="56"/><text x="19.6054%" y="239.50"></text></g><g><title>powergraph`powergraph::edge_repository::EdgeRepository::subgraph (44,271 samples, 17.79%)</title><rect x="1.5977%" y="245" width="17.7894%" height="15" fill="rgb(219,102,11)" fg:x="3976" fg:w="44271"/><text x="1.8477%" y="255.50">powergraph`powergraph::edge_..</text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (33 samples, 0.01%)</title><rect x="19.3887%" y="229" width="0.0133%" height="15" fill="rgb(243,110,44)" fg:x="48251" fg:w="33"/><text x="19.6387%" y="239.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::from_iter (38 samples, 0.02%)</title><rect x="19.3871%" y="245" width="0.0153%" height="15" fill="rgb(222,74,54)" fg:x="48247" fg:w="38"/><text x="19.6371%" y="255.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (44,633 samples, 17.93%)</title><rect x="1.4699%" y="261" width="17.9349%" height="15" fill="rgb(216,99,12)" fg:x="3658" fg:w="44633"/><text x="1.7199%" y="271.50">powergraph`core::ops::functi..</text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (65 samples, 0.03%)</title><rect x="19.4048%" y="261" width="0.0261%" height="15" fill="rgb(226,22,26)" fg:x="48291" fg:w="65"/><text x="19.6548%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (61 samples, 0.02%)</title><rect x="19.4064%" y="245" width="0.0245%" height="15" fill="rgb(217,163,10)" fg:x="48295" fg:w="61"/><text x="19.6564%" y="255.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (45,204 samples, 18.16%)</title><rect x="1.2714%" y="277" width="18.1644%" height="15" fill="rgb(213,25,53)" fg:x="3164" fg:w="45204"/><text x="1.5214%" y="287.50">powergraph`alloc::vec::Vec&lt;T..</text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (57 samples, 0.02%)</title><rect x="19.4546%" y="245" width="0.0229%" height="15" fill="rgb(252,105,26)" fg:x="48415" fg:w="57"/><text x="19.7046%" y="255.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (65 samples, 0.03%)</title><rect x="19.4522%" y="261" width="0.0261%" height="15" fill="rgb(220,39,43)" fg:x="48409" fg:w="65"/><text x="19.7022%" y="271.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;powergraph::clusters::Cluster&gt; (27 samples, 0.01%)</title><rect x="19.4816%" y="261" width="0.0108%" height="15" fill="rgb(229,68,48)" fg:x="48482" fg:w="27"/><text x="19.7316%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (86 samples, 0.03%)</title><rect x="19.4932%" y="261" width="0.0346%" height="15" fill="rgb(252,8,32)" fg:x="48511" fg:w="86"/><text x="19.7432%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (67 samples, 0.03%)</title><rect x="19.5008%" y="245" width="0.0269%" height="15" fill="rgb(223,20,43)" fg:x="48530" fg:w="67"/><text x="19.7508%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (30 samples, 0.01%)</title><rect x="19.5463%" y="229" width="0.0121%" height="15" fill="rgb(229,81,49)" fg:x="48643" fg:w="30"/><text x="19.7963%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (25 samples, 0.01%)</title><rect x="19.5483%" y="213" width="0.0100%" height="15" fill="rgb(236,28,36)" fg:x="48648" fg:w="25"/><text x="19.7983%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (33 samples, 0.01%)</title><rect x="19.5752%" y="197" width="0.0133%" height="15" fill="rgb(249,185,26)" fg:x="48715" fg:w="33"/><text x="19.8252%" y="207.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (31 samples, 0.01%)</title><rect x="19.6130%" y="165" width="0.0125%" height="15" fill="rgb(249,174,33)" fg:x="48809" fg:w="31"/><text x="19.8630%" y="175.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::new (231 samples, 0.09%)</title><rect x="19.5394%" y="245" width="0.0928%" height="15" fill="rgb(233,201,37)" fg:x="48626" fg:w="231"/><text x="19.7894%" y="255.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (184 samples, 0.07%)</title><rect x="19.5583%" y="229" width="0.0739%" height="15" fill="rgb(221,78,26)" fg:x="48673" fg:w="184"/><text x="19.8083%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (180 samples, 0.07%)</title><rect x="19.5599%" y="213" width="0.0723%" height="15" fill="rgb(250,127,30)" fg:x="48677" fg:w="180"/><text x="19.8099%" y="223.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (99 samples, 0.04%)</title><rect x="19.5925%" y="197" width="0.0398%" height="15" fill="rgb(230,49,44)" fg:x="48758" fg:w="99"/><text x="19.8425%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (58 samples, 0.02%)</title><rect x="19.6089%" y="181" width="0.0233%" height="15" fill="rgb(229,67,23)" fg:x="48799" fg:w="58"/><text x="19.8589%" y="191.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (27 samples, 0.01%)</title><rect x="19.6797%" y="165" width="0.0108%" height="15" fill="rgb(249,83,47)" fg:x="48975" fg:w="27"/><text x="19.9297%" y="175.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (25 samples, 0.01%)</title><rect x="19.6969%" y="149" width="0.0100%" height="15" fill="rgb(215,43,3)" fg:x="49018" fg:w="25"/><text x="19.9469%" y="159.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (182 samples, 0.07%)</title><rect x="19.6355%" y="213" width="0.0731%" height="15" fill="rgb(238,154,13)" fg:x="48865" fg:w="182"/><text x="19.8855%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (171 samples, 0.07%)</title><rect x="19.6399%" y="197" width="0.0687%" height="15" fill="rgb(219,56,2)" fg:x="48876" fg:w="171"/><text x="19.8899%" y="207.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (87 samples, 0.03%)</title><rect x="19.6736%" y="181" width="0.0350%" height="15" fill="rgb(233,0,4)" fg:x="48960" fg:w="87"/><text x="19.9236%" y="191.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (38 samples, 0.02%)</title><rect x="19.6933%" y="165" width="0.0153%" height="15" fill="rgb(235,30,7)" fg:x="49009" fg:w="38"/><text x="19.9433%" y="175.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::union (432 samples, 0.17%)</title><rect x="19.5370%" y="261" width="0.1736%" height="15" fill="rgb(250,79,13)" fg:x="48620" fg:w="432"/><text x="19.7870%" y="271.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::union (195 samples, 0.08%)</title><rect x="19.6322%" y="245" width="0.0784%" height="15" fill="rgb(211,146,34)" fg:x="48857" fg:w="195"/><text x="19.8822%" y="255.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (191 samples, 0.08%)</title><rect x="19.6339%" y="229" width="0.0767%" height="15" fill="rgb(228,22,38)" fg:x="48861" fg:w="191"/><text x="19.8839%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (77 samples, 0.03%)</title><rect x="19.7231%" y="229" width="0.0309%" height="15" fill="rgb(235,168,5)" fg:x="49083" fg:w="77"/><text x="19.9731%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (86 samples, 0.03%)</title><rect x="19.7215%" y="245" width="0.0346%" height="15" fill="rgb(221,155,16)" fg:x="49079" fg:w="86"/><text x="19.9715%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (520 samples, 0.21%)</title><rect x="19.7640%" y="229" width="0.2090%" height="15" fill="rgb(215,215,53)" fg:x="49185" fg:w="520"/><text x="20.0140%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (126 samples, 0.05%)</title><rect x="19.9730%" y="229" width="0.0506%" height="15" fill="rgb(223,4,10)" fg:x="49705" fg:w="126"/><text x="20.2230%" y="239.50"></text></g><g><title>powergraph`DYLD-STUB$$free (159 samples, 0.06%)</title><rect x="20.0481%" y="229" width="0.0639%" height="15" fill="rgb(234,103,6)" fg:x="49892" fg:w="159"/><text x="20.2981%" y="239.50"></text></g><g><title>powergraph`__rust_dealloc (35 samples, 0.01%)</title><rect x="20.1152%" y="229" width="0.0141%" height="15" fill="rgb(227,97,0)" fg:x="50059" fg:w="35"/><text x="20.3652%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (78 samples, 0.03%)</title><rect x="20.2495%" y="213" width="0.0313%" height="15" fill="rgb(234,150,53)" fg:x="50393" fg:w="78"/><text x="20.4995%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,257 samples, 0.51%)</title><rect x="20.2816%" y="213" width="0.5051%" height="15" fill="rgb(228,201,54)" fg:x="50473" fg:w="1257"/><text x="20.5316%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (73 samples, 0.03%)</title><rect x="20.7867%" y="213" width="0.0293%" height="15" fill="rgb(222,22,37)" fg:x="51730" fg:w="73"/><text x="21.0367%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (91 samples, 0.04%)</title><rect x="20.8160%" y="213" width="0.0366%" height="15" fill="rgb(237,53,32)" fg:x="51803" fg:w="91"/><text x="21.0660%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (80 samples, 0.03%)</title><rect x="20.9418%" y="181" width="0.0321%" height="15" fill="rgb(233,25,53)" fg:x="52116" fg:w="80"/><text x="21.1918%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (361 samples, 0.15%)</title><rect x="20.8526%" y="213" width="0.1451%" height="15" fill="rgb(210,40,34)" fg:x="51894" fg:w="361"/><text x="21.1026%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (264 samples, 0.11%)</title><rect x="20.8916%" y="197" width="0.1061%" height="15" fill="rgb(241,220,44)" fg:x="51991" fg:w="264"/><text x="21.1416%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (59 samples, 0.02%)</title><rect x="20.9740%" y="181" width="0.0237%" height="15" fill="rgb(235,28,35)" fg:x="52196" fg:w="59"/><text x="21.2240%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (66 samples, 0.03%)</title><rect x="21.0057%" y="213" width="0.0265%" height="15" fill="rgb(210,56,17)" fg:x="52275" fg:w="66"/><text x="21.2557%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (634 samples, 0.25%)</title><rect x="21.0322%" y="213" width="0.2548%" height="15" fill="rgb(224,130,29)" fg:x="52341" fg:w="634"/><text x="21.2822%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (155 samples, 0.06%)</title><rect x="21.2898%" y="213" width="0.0623%" height="15" fill="rgb(235,212,8)" fg:x="52982" fg:w="155"/><text x="21.5398%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (1,664 samples, 0.67%)</title><rect x="21.4614%" y="197" width="0.6686%" height="15" fill="rgb(223,33,50)" fg:x="53409" fg:w="1664"/><text x="21.7114%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (400 samples, 0.16%)</title><rect x="22.1300%" y="197" width="0.1607%" height="15" fill="rgb(219,149,13)" fg:x="55073" fg:w="400"/><text x="22.3800%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (51 samples, 0.02%)</title><rect x="22.2908%" y="197" width="0.0205%" height="15" fill="rgb(250,156,29)" fg:x="55473" fg:w="51"/><text x="22.5408%" y="207.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (304 samples, 0.12%)</title><rect x="22.3117%" y="197" width="0.1222%" height="15" fill="rgb(216,193,19)" fg:x="55525" fg:w="304"/><text x="22.5617%" y="207.50"></text></g><g><title>powergraph`DYLD-STUB$$free (628 samples, 0.25%)</title><rect x="22.4338%" y="197" width="0.2523%" height="15" fill="rgb(216,135,14)" fg:x="55829" fg:w="628"/><text x="22.6838%" y="207.50"></text></g><g><title>powergraph`__rdl_dealloc (53 samples, 0.02%)</title><rect x="22.6862%" y="197" width="0.0213%" height="15" fill="rgb(241,47,5)" fg:x="56457" fg:w="53"/><text x="22.9362%" y="207.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::string::String&gt; (143 samples, 0.06%)</title><rect x="22.7131%" y="197" width="0.0575%" height="15" fill="rgb(233,42,35)" fg:x="56524" fg:w="143"/><text x="22.9631%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (233 samples, 0.09%)</title><rect x="23.4721%" y="181" width="0.0936%" height="15" fill="rgb(231,13,6)" fg:x="58413" fg:w="233"/><text x="23.7221%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4,041 samples, 1.62%)</title><rect x="23.5658%" y="181" width="1.6238%" height="15" fill="rgb(207,181,40)" fg:x="58646" fg:w="4041"/><text x="23.8158%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (645 samples, 0.26%)</title><rect x="25.1896%" y="181" width="0.2592%" height="15" fill="rgb(254,173,49)" fg:x="62687" fg:w="645"/><text x="25.4396%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4,741 samples, 1.91%)</title><rect x="25.4487%" y="181" width="1.9051%" height="15" fill="rgb(221,1,38)" fg:x="63332" fg:w="4741"/><text x="25.6987%" y="191.50">l..</text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (152 samples, 0.06%)</title><rect x="27.3538%" y="181" width="0.0611%" height="15" fill="rgb(206,124,46)" fg:x="68073" fg:w="152"/><text x="27.6038%" y="191.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (18,167 samples, 7.30%)</title><rect x="20.1325%" y="229" width="7.3001%" height="15" fill="rgb(249,21,11)" fg:x="50102" fg:w="18167"/><text x="20.3825%" y="239.50">powergraph..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (15,132 samples, 6.08%)</title><rect x="21.3521%" y="213" width="6.0805%" height="15" fill="rgb(222,201,40)" fg:x="53137" fg:w="15132"/><text x="21.6021%" y="223.50">powergra..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (11,602 samples, 4.66%)</title><rect x="22.7705%" y="197" width="4.6620%" height="15" fill="rgb(235,61,29)" fg:x="56667" fg:w="11602"/><text x="23.0205%" y="207.50">power..</text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::string::String&gt; (33 samples, 0.01%)</title><rect x="27.4193%" y="181" width="0.0133%" height="15" fill="rgb(219,207,3)" fg:x="68236" fg:w="33"/><text x="27.6693%" y="191.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (545 samples, 0.22%)</title><rect x="27.4326%" y="229" width="0.2190%" height="15" fill="rgb(222,56,46)" fg:x="68269" fg:w="545"/><text x="27.6826%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (19,675 samples, 7.91%)</title><rect x="19.7628%" y="245" width="7.9060%" height="15" fill="rgb(239,76,54)" fg:x="49182" fg:w="19675"/><text x="20.0128%" y="255.50">powergraph`..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (39 samples, 0.02%)</title><rect x="27.6532%" y="229" width="0.0157%" height="15" fill="rgb(231,124,27)" fg:x="68818" fg:w="39"/><text x="27.9032%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (46 samples, 0.02%)</title><rect x="27.6709%" y="229" width="0.0185%" height="15" fill="rgb(249,195,6)" fg:x="68862" fg:w="46"/><text x="27.9209%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (188 samples, 0.08%)</title><rect x="27.6894%" y="229" width="0.0755%" height="15" fill="rgb(237,174,47)" fg:x="68908" fg:w="188"/><text x="27.9394%" y="239.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (124 samples, 0.05%)</title><rect x="27.7649%" y="229" width="0.0498%" height="15" fill="rgb(206,201,31)" fg:x="69096" fg:w="124"/><text x="28.0149%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (542 samples, 0.22%)</title><rect x="28.4078%" y="213" width="0.2178%" height="15" fill="rgb(231,57,52)" fg:x="70696" fg:w="542"/><text x="28.6578%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (32 samples, 0.01%)</title><rect x="28.6256%" y="213" width="0.0129%" height="15" fill="rgb(248,177,22)" fg:x="71238" fg:w="32"/><text x="28.8756%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,007 samples, 0.40%)</title><rect x="28.6433%" y="213" width="0.4046%" height="15" fill="rgb(215,211,37)" fg:x="71282" fg:w="1007"/><text x="28.8933%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2,544 samples, 1.02%)</title><rect x="29.0479%" y="213" width="1.0223%" height="15" fill="rgb(241,128,51)" fg:x="72289" fg:w="2544"/><text x="29.2979%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2,972 samples, 1.19%)</title><rect x="30.1763%" y="197" width="1.1942%" height="15" fill="rgb(227,165,31)" fg:x="75097" fg:w="2972"/><text x="30.4263%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2,934 samples, 1.18%)</title><rect x="30.1916%" y="181" width="1.1790%" height="15" fill="rgb(228,167,24)" fg:x="75135" fg:w="2934"/><text x="30.4416%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (36 samples, 0.01%)</title><rect x="31.3561%" y="165" width="0.0145%" height="15" fill="rgb(228,143,12)" fg:x="78033" fg:w="36"/><text x="31.6061%" y="175.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (3,245 samples, 1.30%)</title><rect x="30.0702%" y="213" width="1.3039%" height="15" fill="rgb(249,149,8)" fg:x="74833" fg:w="3245"/><text x="30.3202%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,252 samples, 0.50%)</title><rect x="31.5031%" y="197" width="0.5031%" height="15" fill="rgb(243,35,44)" fg:x="78399" fg:w="1252"/><text x="31.7531%" y="207.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (824 samples, 0.33%)</title><rect x="32.0062%" y="197" width="0.3311%" height="15" fill="rgb(246,89,9)" fg:x="79651" fg:w="824"/><text x="32.2562%" y="207.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (62 samples, 0.02%)</title><rect x="32.3373%" y="197" width="0.0249%" height="15" fill="rgb(233,213,13)" fg:x="80475" fg:w="62"/><text x="32.5873%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,866 samples, 0.75%)</title><rect x="33.3278%" y="181" width="0.7498%" height="15" fill="rgb(233,141,41)" fg:x="82940" fg:w="1866"/><text x="33.5778%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (127 samples, 0.05%)</title><rect x="34.0777%" y="181" width="0.0510%" height="15" fill="rgb(239,167,4)" fg:x="84806" fg:w="127"/><text x="34.3277%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (44 samples, 0.02%)</title><rect x="34.1287%" y="181" width="0.0177%" height="15" fill="rgb(209,217,16)" fg:x="84933" fg:w="44"/><text x="34.3787%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3,719 samples, 1.49%)</title><rect x="34.1464%" y="181" width="1.4944%" height="15" fill="rgb(219,88,35)" fg:x="84977" fg:w="3719"/><text x="34.3964%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14,252 samples, 5.73%)</title><rect x="35.6408%" y="181" width="5.7269%" height="15" fill="rgb(220,193,23)" fg:x="88696" fg:w="14252"/><text x="35.8908%" y="191.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (8,563 samples, 3.44%)</title><rect x="41.7506%" y="165" width="3.4409%" height="15" fill="rgb(230,90,52)" fg:x="103901" fg:w="8563"/><text x="42.0006%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (8,473 samples, 3.40%)</title><rect x="41.7868%" y="149" width="3.4047%" height="15" fill="rgb(252,106,19)" fg:x="103991" fg:w="8473"/><text x="42.0368%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (83 samples, 0.03%)</title><rect x="45.1581%" y="133" width="0.0334%" height="15" fill="rgb(206,74,20)" fg:x="112381" fg:w="83"/><text x="45.4081%" y="143.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (9,534 samples, 3.83%)</title><rect x="41.3677%" y="181" width="3.8311%" height="15" fill="rgb(230,138,44)" fg:x="102948" fg:w="9534"/><text x="41.6177%" y="191.50">powe..</text></g><g><title>powergraph`DYLD-STUB$$malloc (329 samples, 0.13%)</title><rect x="45.1987%" y="181" width="0.1322%" height="15" fill="rgb(235,182,43)" fg:x="112482" fg:w="329"/><text x="45.4487%" y="191.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (86 samples, 0.03%)</title><rect x="45.3309%" y="181" width="0.0346%" height="15" fill="rgb(242,16,51)" fg:x="112811" fg:w="86"/><text x="45.5809%" y="191.50"></text></g><g><title>powergraph`__rdl_alloc (275 samples, 0.11%)</title><rect x="45.3655%" y="181" width="0.1105%" height="15" fill="rgb(248,9,4)" fg:x="112897" fg:w="275"/><text x="45.6155%" y="191.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (32,659 samples, 13.12%)</title><rect x="32.3622%" y="197" width="13.1234%" height="15" fill="rgb(210,31,22)" fg:x="80537" fg:w="32659"/><text x="32.6122%" y="207.50">powergraph`hashbrown..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (503 samples, 0.20%)</title><rect x="45.5547%" y="181" width="0.2021%" height="15" fill="rgb(239,54,39)" fg:x="113368" fg:w="503"/><text x="45.8047%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (989 samples, 0.40%)</title><rect x="45.7657%" y="181" width="0.3974%" height="15" fill="rgb(230,99,41)" fg:x="113893" fg:w="989"/><text x="46.0157%" y="191.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (60 samples, 0.02%)</title><rect x="46.1691%" y="181" width="0.0241%" height="15" fill="rgb(253,106,12)" fg:x="114897" fg:w="60"/><text x="46.4191%" y="191.50"></text></g><g><title>powergraph`__rdl_alloc (66 samples, 0.03%)</title><rect x="46.1933%" y="181" width="0.0265%" height="15" fill="rgb(213,46,41)" fg:x="114957" fg:w="66"/><text x="46.4433%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1,416 samples, 0.57%)</title><rect x="46.3930%" y="165" width="0.5690%" height="15" fill="rgb(215,133,35)" fg:x="115454" fg:w="1416"/><text x="46.6430%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1,367 samples, 0.55%)</title><rect x="46.4127%" y="149" width="0.5493%" height="15" fill="rgb(213,28,5)" fg:x="115503" fg:w="1367"/><text x="46.6627%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (34 samples, 0.01%)</title><rect x="46.9483%" y="133" width="0.0137%" height="15" fill="rgb(215,77,49)" fg:x="116836" fg:w="34"/><text x="47.1983%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (38 samples, 0.02%)</title><rect x="46.9873%" y="149" width="0.0153%" height="15" fill="rgb(248,100,22)" fg:x="116933" fg:w="38"/><text x="47.2373%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (35 samples, 0.01%)</title><rect x="47.0267%" y="117" width="0.0141%" height="15" fill="rgb(208,67,9)" fg:x="117031" fg:w="35"/><text x="47.2767%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (136 samples, 0.05%)</title><rect x="47.0046%" y="149" width="0.0546%" height="15" fill="rgb(219,133,21)" fg:x="116976" fg:w="136"/><text x="47.2546%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (122 samples, 0.05%)</title><rect x="47.0102%" y="133" width="0.0490%" height="15" fill="rgb(246,46,29)" fg:x="116990" fg:w="122"/><text x="47.2602%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (41 samples, 0.02%)</title><rect x="47.0427%" y="117" width="0.0165%" height="15" fill="rgb(246,185,52)" fg:x="117071" fg:w="41"/><text x="47.2927%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (76 samples, 0.03%)</title><rect x="47.0713%" y="133" width="0.0305%" height="15" fill="rgb(252,136,11)" fg:x="117142" fg:w="76"/><text x="47.3213%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (29 samples, 0.01%)</title><rect x="47.1838%" y="117" width="0.0117%" height="15" fill="rgb(219,138,53)" fg:x="117422" fg:w="29"/><text x="47.4338%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (583 samples, 0.23%)</title><rect x="46.9688%" y="165" width="0.2343%" height="15" fill="rgb(211,51,23)" fg:x="116887" fg:w="583"/><text x="47.2188%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (349 samples, 0.14%)</title><rect x="47.0628%" y="149" width="0.1402%" height="15" fill="rgb(247,221,28)" fg:x="117121" fg:w="349"/><text x="47.3128%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (252 samples, 0.10%)</title><rect x="47.1018%" y="133" width="0.1013%" height="15" fill="rgb(251,222,45)" fg:x="117218" fg:w="252"/><text x="47.3518%" y="143.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (4,285 samples, 1.72%)</title><rect x="45.4856%" y="197" width="1.7218%" height="15" fill="rgb(217,162,53)" fg:x="113196" fg:w="4285"/><text x="45.7356%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (2,454 samples, 0.99%)</title><rect x="46.2214%" y="181" width="0.9861%" height="15" fill="rgb(229,93,14)" fg:x="115027" fg:w="2454"/><text x="46.4714%" y="191.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (39,601 samples, 15.91%)</title><rect x="31.3741%" y="213" width="15.9129%" height="15" fill="rgb(209,67,49)" fg:x="78078" fg:w="39601"/><text x="31.6241%" y="223.50">powergraph`&lt;hashbrown::r..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (198 samples, 0.08%)</title><rect x="47.2075%" y="197" width="0.0796%" height="15" fill="rgb(213,87,29)" fg:x="117481" fg:w="198"/><text x="47.4575%" y="207.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (84 samples, 0.03%)</title><rect x="47.2870%" y="213" width="0.0338%" height="15" fill="rgb(205,151,52)" fg:x="117679" fg:w="84"/><text x="47.5370%" y="223.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (55 samples, 0.02%)</title><rect x="47.3208%" y="213" width="0.0221%" height="15" fill="rgb(253,215,39)" fg:x="117763" fg:w="55"/><text x="47.5708%" y="223.50"></text></g><g><title>powergraph`__rdl_alloc (79 samples, 0.03%)</title><rect x="47.3429%" y="213" width="0.0317%" height="15" fill="rgb(221,220,41)" fg:x="117818" fg:w="79"/><text x="47.5929%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (411 samples, 0.17%)</title><rect x="47.3803%" y="213" width="0.1652%" height="15" fill="rgb(218,133,21)" fg:x="117911" fg:w="411"/><text x="47.6303%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (49,151 samples, 19.75%)</title><rect x="27.8147%" y="229" width="19.7504%" height="15" fill="rgb(221,193,43)" fg:x="69220" fg:w="49151"/><text x="28.0647%" y="239.50">powergraph`hashbrown::raw::RawT..</text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (49 samples, 0.02%)</title><rect x="47.5454%" y="213" width="0.0197%" height="15" fill="rgb(240,128,52)" fg:x="118322" fg:w="49"/><text x="47.7954%" y="223.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (49,530 samples, 19.90%)</title><rect x="27.6697%" y="245" width="19.9027%" height="15" fill="rgb(253,114,12)" fg:x="68859" fg:w="49530"/><text x="27.9197%" y="255.50">powergraph`&lt;hashbrown::raw::Raw..</text></g><g><title>powergraph`&lt;powergraph::sets::SetIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.01%)</title><rect x="47.5723%" y="245" width="0.0100%" height="15" fill="rgb(215,223,47)" fg:x="118389" fg:w="25"/><text x="47.8223%" y="255.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (29 samples, 0.01%)</title><rect x="47.5836%" y="245" width="0.0117%" height="15" fill="rgb(248,225,23)" fg:x="118417" fg:w="29"/><text x="47.8336%" y="255.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (29 samples, 0.01%)</title><rect x="47.5836%" y="229" width="0.0117%" height="15" fill="rgb(250,108,0)" fg:x="118417" fg:w="29"/><text x="47.8336%" y="239.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (25 samples, 0.01%)</title><rect x="47.5852%" y="213" width="0.0100%" height="15" fill="rgb(228,208,7)" fg:x="118421" fg:w="25"/><text x="47.8352%" y="223.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (463 samples, 0.19%)</title><rect x="47.5989%" y="245" width="0.1860%" height="15" fill="rgb(244,45,10)" fg:x="118455" fg:w="463"/><text x="47.8489%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (504 samples, 0.20%)</title><rect x="47.7881%" y="229" width="0.2025%" height="15" fill="rgb(207,125,25)" fg:x="118926" fg:w="504"/><text x="48.0381%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (129 samples, 0.05%)</title><rect x="47.9906%" y="229" width="0.0518%" height="15" fill="rgb(210,195,18)" fg:x="119430" fg:w="129"/><text x="48.2406%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 0.04%)</title><rect x="48.0437%" y="229" width="0.0418%" height="15" fill="rgb(249,80,12)" fg:x="119562" fg:w="104"/><text x="48.2937%" y="239.50"></text></g><g><title>powergraph`DYLD-STUB$$free (216 samples, 0.09%)</title><rect x="48.0855%" y="229" width="0.0868%" height="15" fill="rgb(221,65,9)" fg:x="119666" fg:w="216"/><text x="48.3355%" y="239.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::string::String&gt; (36 samples, 0.01%)</title><rect x="48.1743%" y="229" width="0.0145%" height="15" fill="rgb(235,49,36)" fg:x="119887" fg:w="36"/><text x="48.4243%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (66 samples, 0.03%)</title><rect x="48.3652%" y="213" width="0.0265%" height="15" fill="rgb(225,32,20)" fg:x="120362" fg:w="66"/><text x="48.6152%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,057 samples, 0.42%)</title><rect x="48.3917%" y="213" width="0.4247%" height="15" fill="rgb(215,141,46)" fg:x="120428" fg:w="1057"/><text x="48.6417%" y="223.50"></text></g><g><title>libsystem_platform.dylib`__bzero (248 samples, 0.10%)</title><rect x="48.8204%" y="213" width="0.0997%" height="15" fill="rgb(250,160,47)" fg:x="121495" fg:w="248"/><text x="49.0704%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (925 samples, 0.37%)</title><rect x="48.9201%" y="213" width="0.3717%" height="15" fill="rgb(216,222,40)" fg:x="121743" fg:w="925"/><text x="49.1701%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.01%)</title><rect x="49.2918%" y="213" width="0.0137%" height="15" fill="rgb(234,217,39)" fg:x="122668" fg:w="34"/><text x="49.5418%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (3,779 samples, 1.52%)</title><rect x="47.7877%" y="245" width="1.5185%" height="15" fill="rgb(207,178,40)" fg:x="118925" fg:w="3779"/><text x="48.0377%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (2,781 samples, 1.12%)</title><rect x="48.1887%" y="229" width="1.1175%" height="15" fill="rgb(221,136,13)" fg:x="119923" fg:w="2781"/><text x="48.4387%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (187 samples, 0.08%)</title><rect x="49.3717%" y="213" width="0.0751%" height="15" fill="rgb(249,199,10)" fg:x="122867" fg:w="187"/><text x="49.6217%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (192 samples, 0.08%)</title><rect x="49.3701%" y="229" width="0.0772%" height="15" fill="rgb(249,222,13)" fg:x="122863" fg:w="192"/><text x="49.6201%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (56 samples, 0.02%)</title><rect x="50.4358%" y="213" width="0.0225%" height="15" fill="rgb(244,185,38)" fg:x="125515" fg:w="56"/><text x="50.6858%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,658 samples, 1.87%)</title><rect x="50.4583%" y="213" width="1.8717%" height="15" fill="rgb(236,202,9)" fg:x="125571" fg:w="4658"/><text x="50.7083%" y="223.50">p..</text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (1,250 samples, 0.50%)</title><rect x="52.3308%" y="213" width="0.5023%" height="15" fill="rgb(250,229,37)" fg:x="130231" fg:w="1250"/><text x="52.5808%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (388 samples, 0.16%)</title><rect x="53.1791%" y="181" width="0.1559%" height="15" fill="rgb(206,174,23)" fg:x="132342" fg:w="388"/><text x="53.4291%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (403 samples, 0.16%)</title><rect x="53.1751%" y="197" width="0.1619%" height="15" fill="rgb(211,33,43)" fg:x="132332" fg:w="403"/><text x="53.4251%" y="207.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,476 samples, 3.41%)</title><rect x="53.3466%" y="197" width="3.4059%" height="15" fill="rgb(245,58,50)" fg:x="132759" fg:w="8476"/><text x="53.5966%" y="207.50">pow..</text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (1,655 samples, 0.67%)</title><rect x="56.7526%" y="197" width="0.6650%" height="15" fill="rgb(244,68,36)" fg:x="141235" fg:w="1655"/><text x="57.0026%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11,449 samples, 4.60%)</title><rect x="52.8343%" y="213" width="4.6006%" height="15" fill="rgb(232,229,15)" fg:x="131484" fg:w="11449"/><text x="53.0843%" y="223.50">power..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (43 samples, 0.02%)</title><rect x="57.4176%" y="197" width="0.0173%" height="15" fill="rgb(254,30,23)" fg:x="142890" fg:w="43"/><text x="57.6676%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (39 samples, 0.02%)</title><rect x="57.4192%" y="181" width="0.0157%" height="15" fill="rgb(235,160,14)" fg:x="142894" fg:w="39"/><text x="57.6692%" y="191.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (19,868 samples, 7.98%)</title><rect x="49.4537%" y="229" width="7.9836%" height="15" fill="rgb(212,155,44)" fg:x="123071" fg:w="19868"/><text x="49.7037%" y="239.50">powergraph`..</text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::from_iter (20,241 samples, 8.13%)</title><rect x="49.3062%" y="245" width="8.1335%" height="15" fill="rgb(226,2,50)" fg:x="122704" fg:w="20241"/><text x="49.5562%" y="255.50">powergraph`..</text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (102 samples, 0.04%)</title><rect x="57.4441%" y="229" width="0.0410%" height="15" fill="rgb(234,177,6)" fg:x="142956" fg:w="102"/><text x="57.6941%" y="239.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (37 samples, 0.01%)</title><rect x="57.4702%" y="213" width="0.0149%" height="15" fill="rgb(217,24,9)" fg:x="143021" fg:w="37"/><text x="57.7202%" y="223.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (119 samples, 0.05%)</title><rect x="57.4397%" y="245" width="0.0478%" height="15" fill="rgb(220,13,46)" fg:x="142945" fg:w="119"/><text x="57.6897%" y="255.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::iter (50 samples, 0.02%)</title><rect x="57.4875%" y="245" width="0.0201%" height="15" fill="rgb(239,221,27)" fg:x="143064" fg:w="50"/><text x="57.7375%" y="255.50"></text></g><g><title>powergraph`powergraph::edge_repository::EdgeRepository::subgraph (94,064 samples, 37.80%)</title><rect x="19.7106%" y="261" width="37.7978%" height="15" fill="rgb(222,198,25)" fg:x="49052" fg:w="94064"/><text x="19.9606%" y="271.50">powergraph`powergraph::edge_repository::EdgeRepository::subgra..</text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (25 samples, 0.01%)</title><rect x="57.5164%" y="229" width="0.0100%" height="15" fill="rgb(211,99,13)" fg:x="143136" fg:w="25"/><text x="57.7664%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (41 samples, 0.02%)</title><rect x="57.5265%" y="229" width="0.0165%" height="15" fill="rgb(232,111,31)" fg:x="143161" fg:w="41"/><text x="57.7765%" y="239.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (75 samples, 0.03%)</title><rect x="57.5132%" y="245" width="0.0301%" height="15" fill="rgb(245,82,37)" fg:x="143128" fg:w="75"/><text x="57.7632%" y="255.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::from_iter (91 samples, 0.04%)</title><rect x="57.5084%" y="261" width="0.0366%" height="15" fill="rgb(227,149,46)" fg:x="143116" fg:w="91"/><text x="57.7584%" y="271.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (94,847 samples, 38.11%)</title><rect x="19.4357%" y="277" width="38.1124%" height="15" fill="rgb(218,36,50)" fg:x="48368" fg:w="94847"/><text x="19.6857%" y="287.50">powergraph`core::ops::function::impls::_&lt;impl core::ops::funct..</text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (140,075 samples, 56.29%)</title><rect x="1.2658%" y="293" width="56.2864%" height="15" fill="rgb(226,80,48)" fg:x="3150" fg:w="140075"/><text x="1.5158%" y="303.50">powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (32 samples, 0.01%)</title><rect x="57.5699%" y="245" width="0.0129%" height="15" fill="rgb(238,224,15)" fg:x="143269" fg:w="32"/><text x="57.8199%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (97 samples, 0.04%)</title><rect x="57.5538%" y="277" width="0.0390%" height="15" fill="rgb(241,136,10)" fg:x="143229" fg:w="97"/><text x="57.8038%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (68 samples, 0.03%)</title><rect x="57.5655%" y="261" width="0.0273%" height="15" fill="rgb(208,32,45)" fg:x="143258" fg:w="68"/><text x="57.8155%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (32 samples, 0.01%)</title><rect x="57.6048%" y="229" width="0.0129%" height="15" fill="rgb(207,135,9)" fg:x="143356" fg:w="32"/><text x="57.8548%" y="239.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (34 samples, 0.01%)</title><rect x="57.6044%" y="245" width="0.0137%" height="15" fill="rgb(206,86,44)" fg:x="143355" fg:w="34"/><text x="57.8544%" y="255.50"></text></g><g><title>powergraph`powergraph::edge_repository::EdgeRepository::children (40 samples, 0.02%)</title><rect x="57.6028%" y="261" width="0.0161%" height="15" fill="rgb(245,177,15)" fg:x="143351" fg:w="40"/><text x="57.8528%" y="271.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (64 samples, 0.03%)</title><rect x="57.6274%" y="229" width="0.0257%" height="15" fill="rgb(206,64,50)" fg:x="143412" fg:w="64"/><text x="57.8774%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (61 samples, 0.02%)</title><rect x="57.6286%" y="213" width="0.0245%" height="15" fill="rgb(234,36,40)" fg:x="143415" fg:w="61"/><text x="57.8786%" y="223.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (68 samples, 0.03%)</title><rect x="57.6269%" y="245" width="0.0273%" height="15" fill="rgb(213,64,8)" fg:x="143411" fg:w="68"/><text x="57.8769%" y="255.50"></text></g><g><title>powergraph`powergraph::PowerGraph::neighbors (154 samples, 0.06%)</title><rect x="57.5928%" y="277" width="0.0619%" height="15" fill="rgb(210,75,36)" fg:x="143326" fg:w="154"/><text x="57.8428%" y="287.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::union (69 samples, 0.03%)</title><rect x="57.6269%" y="261" width="0.0277%" height="15" fill="rgb(229,88,21)" fg:x="143411" fg:w="69"/><text x="57.8769%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (31 samples, 0.01%)</title><rect x="57.6760%" y="213" width="0.0125%" height="15" fill="rgb(252,204,47)" fg:x="143533" fg:w="31"/><text x="57.9260%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (57 samples, 0.02%)</title><rect x="57.6888%" y="213" width="0.0229%" height="15" fill="rgb(208,77,27)" fg:x="143565" fg:w="57"/><text x="57.9388%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (67 samples, 0.03%)</title><rect x="57.7137%" y="197" width="0.0269%" height="15" fill="rgb(221,76,26)" fg:x="143627" fg:w="67"/><text x="57.9637%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (67 samples, 0.03%)</title><rect x="57.7137%" y="181" width="0.0269%" height="15" fill="rgb(225,139,18)" fg:x="143627" fg:w="67"/><text x="57.9637%" y="191.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (73 samples, 0.03%)</title><rect x="57.7121%" y="213" width="0.0293%" height="15" fill="rgb(230,137,11)" fg:x="143623" fg:w="73"/><text x="57.9621%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (37 samples, 0.01%)</title><rect x="57.7559%" y="197" width="0.0149%" height="15" fill="rgb(212,28,1)" fg:x="143732" fg:w="37"/><text x="58.0059%" y="207.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (320 samples, 0.13%)</title><rect x="57.6551%" y="245" width="0.1286%" height="15" fill="rgb(248,164,17)" fg:x="143481" fg:w="320"/><text x="57.9051%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (309 samples, 0.12%)</title><rect x="57.6595%" y="229" width="0.1242%" height="15" fill="rgb(222,171,42)" fg:x="143492" fg:w="309"/><text x="57.9095%" y="239.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (80 samples, 0.03%)</title><rect x="57.7515%" y="213" width="0.0321%" height="15" fill="rgb(243,84,45)" fg:x="143721" fg:w="80"/><text x="58.0015%" y="223.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (576 samples, 0.23%)</title><rect x="57.5530%" y="293" width="0.2315%" height="15" fill="rgb(252,49,23)" fg:x="143227" fg:w="576"/><text x="57.8030%" y="303.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::union (323 samples, 0.13%)</title><rect x="57.6547%" y="277" width="0.1298%" height="15" fill="rgb(215,19,7)" fg:x="143480" fg:w="323"/><text x="57.9047%" y="287.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (323 samples, 0.13%)</title><rect x="57.6547%" y="261" width="0.1298%" height="15" fill="rgb(238,81,41)" fg:x="143480" fg:w="323"/><text x="57.9047%" y="271.50"></text></g><g><title>powergraph`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.02%)</title><rect x="57.7901%" y="293" width="0.0181%" height="15" fill="rgb(210,199,37)" fg:x="143817" fg:w="45"/><text x="58.0401%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (65 samples, 0.03%)</title><rect x="57.8403%" y="261" width="0.0261%" height="15" fill="rgb(244,192,49)" fg:x="143942" fg:w="65"/><text x="58.0903%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (38 samples, 0.02%)</title><rect x="57.8664%" y="261" width="0.0153%" height="15" fill="rgb(226,211,11)" fg:x="144007" fg:w="38"/><text x="58.1164%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (33 samples, 0.01%)</title><rect x="57.8684%" y="245" width="0.0133%" height="15" fill="rgb(236,162,54)" fg:x="144012" fg:w="33"/><text x="58.1184%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (168 samples, 0.07%)</title><rect x="57.8246%" y="277" width="0.0675%" height="15" fill="rgb(220,229,9)" fg:x="143903" fg:w="168"/><text x="58.0746%" y="287.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (224 samples, 0.09%)</title><rect x="57.8082%" y="293" width="0.0900%" height="15" fill="rgb(250,87,22)" fg:x="143862" fg:w="224"/><text x="58.0582%" y="303.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (177 samples, 0.07%)</title><rect x="57.9135%" y="261" width="0.0711%" height="15" fill="rgb(239,43,17)" fg:x="144124" fg:w="177"/><text x="58.1635%" y="271.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (34 samples, 0.01%)</title><rect x="57.9854%" y="261" width="0.0137%" height="15" fill="rgb(231,177,25)" fg:x="144303" fg:w="34"/><text x="58.2354%" y="271.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (255 samples, 0.10%)</title><rect x="57.9014%" y="277" width="0.1025%" height="15" fill="rgb(219,179,1)" fg:x="144094" fg:w="255"/><text x="58.1514%" y="287.50"></text></g><g><title>powergraph`&lt;powergraph::PowerEdgeCandidate as core::cmp::PartialEq&gt;::eq (261 samples, 0.10%)</title><rect x="57.8994%" y="293" width="0.1049%" height="15" fill="rgb(238,219,53)" fg:x="144089" fg:w="261"/><text x="58.1494%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (195 samples, 0.08%)</title><rect x="58.0244%" y="277" width="0.0784%" height="15" fill="rgb(232,167,36)" fg:x="144400" fg:w="195"/><text x="58.2744%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (128 samples, 0.05%)</title><rect x="58.1027%" y="277" width="0.0514%" height="15" fill="rgb(244,19,51)" fg:x="144595" fg:w="128"/><text x="58.3527%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (241 samples, 0.10%)</title><rect x="58.1550%" y="277" width="0.0968%" height="15" fill="rgb(224,6,22)" fg:x="144725" fg:w="241"/><text x="58.4050%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (325 samples, 0.13%)</title><rect x="58.2546%" y="277" width="0.1306%" height="15" fill="rgb(224,145,5)" fg:x="144973" fg:w="325"/><text x="58.5046%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (59 samples, 0.02%)</title><rect x="58.3852%" y="277" width="0.0237%" height="15" fill="rgb(234,130,49)" fg:x="145298" fg:w="59"/><text x="58.6352%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (148 samples, 0.06%)</title><rect x="58.4089%" y="277" width="0.0595%" height="15" fill="rgb(254,6,2)" fg:x="145357" fg:w="148"/><text x="58.6589%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (69 samples, 0.03%)</title><rect x="58.4407%" y="261" width="0.0277%" height="15" fill="rgb(208,96,46)" fg:x="145436" fg:w="69"/><text x="58.6907%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (68 samples, 0.03%)</title><rect x="58.4411%" y="245" width="0.0273%" height="15" fill="rgb(239,3,39)" fg:x="145437" fg:w="68"/><text x="58.6911%" y="255.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (26 samples, 0.01%)</title><rect x="58.4700%" y="277" width="0.0104%" height="15" fill="rgb(233,210,1)" fg:x="145509" fg:w="26"/><text x="58.7200%" y="287.50"></text></g><g><title>powergraph`&lt;powergraph::sets::SetIterator&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,233 samples, 0.50%)</title><rect x="58.0043%" y="293" width="0.4955%" height="15" fill="rgb(244,137,37)" fg:x="144350" fg:w="1233"/><text x="58.2543%" y="303.50"></text></g><g><title>powergraph`__rdl_alloc (28 samples, 0.01%)</title><rect x="58.4885%" y="277" width="0.0113%" height="15" fill="rgb(240,136,2)" fg:x="145555" fg:w="28"/><text x="58.7385%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (95 samples, 0.04%)</title><rect x="58.5471%" y="277" width="0.0382%" height="15" fill="rgb(239,18,37)" fg:x="145701" fg:w="95"/><text x="58.7971%" y="287.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (49 samples, 0.02%)</title><rect x="58.5873%" y="277" width="0.0197%" height="15" fill="rgb(218,185,22)" fg:x="145801" fg:w="49"/><text x="58.8373%" y="287.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (267 samples, 0.11%)</title><rect x="58.5025%" y="293" width="0.1073%" height="15" fill="rgb(225,218,4)" fg:x="145590" fg:w="267"/><text x="58.7525%" y="303.50"></text></g><g><title>powergraph`DYLD-STUB$$free (90 samples, 0.04%)</title><rect x="58.6098%" y="293" width="0.0362%" height="15" fill="rgb(230,182,32)" fg:x="145857" fg:w="90"/><text x="58.8598%" y="303.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entry (34 samples, 0.01%)</title><rect x="58.6665%" y="53" width="0.0137%" height="15" fill="rgb(242,56,43)" fg:x="145998" fg:w="34"/><text x="58.9165%" y="63.50"></text></g><g><title>powergraph`&lt;str as core::fmt::Debug&gt;::fmt (31 samples, 0.01%)</title><rect x="58.6677%" y="37" width="0.0125%" height="15" fill="rgb(233,99,24)" fg:x="146001" fg:w="31"/><text x="58.9177%" y="47.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entries (35 samples, 0.01%)</title><rect x="58.6665%" y="69" width="0.0141%" height="15" fill="rgb(234,209,42)" fg:x="145998" fg:w="35"/><text x="58.9165%" y="79.50"></text></g><g><title>powergraph`&lt;&amp;T as core::fmt::Debug&gt;::fmt (40 samples, 0.02%)</title><rect x="58.6649%" y="133" width="0.0161%" height="15" fill="rgb(227,7,12)" fg:x="145994" fg:w="40"/><text x="58.9149%" y="143.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field1_finish (40 samples, 0.02%)</title><rect x="58.6649%" y="117" width="0.0161%" height="15" fill="rgb(245,203,43)" fg:x="145994" fg:w="40"/><text x="58.9149%" y="127.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (40 samples, 0.02%)</title><rect x="58.6649%" y="101" width="0.0161%" height="15" fill="rgb(238,205,33)" fg:x="145994" fg:w="40"/><text x="58.9149%" y="111.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::fmt::Debug&gt;::fmt (40 samples, 0.02%)</title><rect x="58.6649%" y="85" width="0.0161%" height="15" fill="rgb(231,56,7)" fg:x="145994" fg:w="40"/><text x="58.9149%" y="95.50"></text></g><g><title>powergraph`&lt;[T] as core::fmt::Debug&gt;::fmt (57 samples, 0.02%)</title><rect x="58.6629%" y="261" width="0.0229%" height="15" fill="rgb(244,186,29)" fg:x="145989" fg:w="57"/><text x="58.9129%" y="271.50"></text></g><g><title>powergraph`core::fmt::builders::DebugSet::entry (56 samples, 0.02%)</title><rect x="58.6633%" y="245" width="0.0225%" height="15" fill="rgb(234,111,31)" fg:x="145990" fg:w="56"/><text x="58.9133%" y="255.50"></text></g><g><title>powergraph`&lt;&amp;T as core::fmt::Debug&gt;::fmt (56 samples, 0.02%)</title><rect x="58.6633%" y="229" width="0.0225%" height="15" fill="rgb(241,149,10)" fg:x="145990" fg:w="56"/><text x="58.9133%" y="239.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field3_finish (53 samples, 0.02%)</title><rect x="58.6645%" y="213" width="0.0213%" height="15" fill="rgb(249,206,44)" fg:x="145993" fg:w="53"/><text x="58.9145%" y="223.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (52 samples, 0.02%)</title><rect x="58.6649%" y="197" width="0.0209%" height="15" fill="rgb(251,153,30)" fg:x="145994" fg:w="52"/><text x="58.9149%" y="207.50"></text></g><g><title>powergraph`&lt;powergraph::clusters::Cluster as core::fmt::Debug&gt;::fmt (52 samples, 0.02%)</title><rect x="58.6649%" y="181" width="0.0209%" height="15" fill="rgb(239,152,38)" fg:x="145994" fg:w="52"/><text x="58.9149%" y="191.50"></text></g><g><title>powergraph`core::fmt::Formatter::debug_struct_field2_finish (52 samples, 0.02%)</title><rect x="58.6649%" y="165" width="0.0209%" height="15" fill="rgb(249,139,47)" fg:x="145994" fg:w="52"/><text x="58.9149%" y="175.50"></text></g><g><title>powergraph`core::fmt::builders::DebugStruct::field (52 samples, 0.02%)</title><rect x="58.6649%" y="149" width="0.0209%" height="15" fill="rgb(244,64,35)" fg:x="145994" fg:w="52"/><text x="58.9149%" y="159.50"></text></g><g><title>powergraph`alloc::fmt::format::format_inner (136 samples, 0.05%)</title><rect x="58.6484%" y="293" width="0.0546%" height="15" fill="rgb(216,46,15)" fg:x="145953" fg:w="136"/><text x="58.8984%" y="303.50"></text></g><g><title>powergraph`core::fmt::write (127 samples, 0.05%)</title><rect x="58.6520%" y="277" width="0.0510%" height="15" fill="rgb(250,74,19)" fg:x="145962" fg:w="127"/><text x="58.9020%" y="287.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (37 samples, 0.01%)</title><rect x="58.7163%" y="293" width="0.0149%" height="15" fill="rgb(249,42,33)" fg:x="146122" fg:w="37"/><text x="58.9663%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_free (215 samples, 0.09%)</title><rect x="58.7408%" y="277" width="0.0864%" height="15" fill="rgb(242,149,17)" fg:x="146183" fg:w="215"/><text x="58.9908%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (43 samples, 0.02%)</title><rect x="58.8272%" y="277" width="0.0173%" height="15" fill="rgb(244,29,21)" fg:x="146398" fg:w="43"/><text x="59.0772%" y="287.50"></text></g><g><title>powergraph`DYLD-STUB$$free (68 samples, 0.03%)</title><rect x="58.8457%" y="277" width="0.0273%" height="15" fill="rgb(220,130,37)" fg:x="146444" fg:w="68"/><text x="59.0957%" y="287.50"></text></g><g><title>powergraph`__rdl_dealloc (25 samples, 0.01%)</title><rect x="58.8730%" y="277" width="0.0100%" height="15" fill="rgb(211,67,2)" fg:x="146512" fg:w="25"/><text x="59.1230%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (298 samples, 0.12%)</title><rect x="58.9349%" y="261" width="0.1197%" height="15" fill="rgb(235,68,52)" fg:x="146666" fg:w="298"/><text x="59.1849%" y="271.50"></text></g><g><title>libsystem_platform.dylib`__bzero (68 samples, 0.03%)</title><rect x="59.0547%" y="261" width="0.0273%" height="15" fill="rgb(246,142,3)" fg:x="146964" fg:w="68"/><text x="59.3047%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (137 samples, 0.06%)</title><rect x="59.0820%" y="261" width="0.0551%" height="15" fill="rgb(241,25,7)" fg:x="147032" fg:w="137"/><text x="59.3320%" y="271.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (1,001 samples, 0.40%)</title><rect x="58.7352%" y="293" width="0.4022%" height="15" fill="rgb(242,119,39)" fg:x="146169" fg:w="1001"/><text x="58.9852%" y="303.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (633 samples, 0.25%)</title><rect x="58.8831%" y="277" width="0.2544%" height="15" fill="rgb(241,98,45)" fg:x="146537" fg:w="633"/><text x="59.1331%" y="287.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;powergraph::clusters::Cluster&gt; (38 samples, 0.02%)</title><rect x="59.1410%" y="293" width="0.0153%" height="15" fill="rgb(254,28,30)" fg:x="147179" fg:w="38"/><text x="59.3910%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (25 samples, 0.01%)</title><rect x="59.1463%" y="277" width="0.0100%" height="15" fill="rgb(241,142,54)" fg:x="147192" fg:w="25"/><text x="59.3963%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (38 samples, 0.02%)</title><rect x="59.1575%" y="277" width="0.0153%" height="15" fill="rgb(222,85,15)" fg:x="147220" fg:w="38"/><text x="59.4075%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (37 samples, 0.01%)</title><rect x="59.1579%" y="261" width="0.0149%" height="15" fill="rgb(210,85,47)" fg:x="147221" fg:w="37"/><text x="59.4079%" y="271.50"></text></g><g><title>powergraph`core::slice::sort::stable::drift::create_run (85 samples, 0.03%)</title><rect x="59.1736%" y="261" width="0.0342%" height="15" fill="rgb(224,206,25)" fg:x="147260" fg:w="85"/><text x="59.4236%" y="271.50"></text></g><g><title>powergraph`core::slice::sort::stable::driftsort_main (127 samples, 0.05%)</title><rect x="59.1575%" y="293" width="0.0510%" height="15" fill="rgb(243,201,19)" fg:x="147220" fg:w="127"/><text x="59.4075%" y="303.50"></text></g><g><title>powergraph`core::slice::sort::stable::drift::sort (87 samples, 0.03%)</title><rect x="59.1736%" y="277" width="0.0350%" height="15" fill="rgb(236,59,4)" fg:x="147260" fg:w="87"/><text x="59.4236%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (55 samples, 0.02%)</title><rect x="59.2206%" y="293" width="0.0221%" height="15" fill="rgb(254,179,45)" fg:x="147377" fg:w="55"/><text x="59.4706%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_free (321 samples, 0.13%)</title><rect x="59.2676%" y="277" width="0.1290%" height="15" fill="rgb(226,14,10)" fg:x="147494" fg:w="321"/><text x="59.5176%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (80 samples, 0.03%)</title><rect x="59.3966%" y="277" width="0.0321%" height="15" fill="rgb(244,27,41)" fg:x="147815" fg:w="80"/><text x="59.6466%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.03%)</title><rect x="59.4292%" y="277" width="0.0277%" height="15" fill="rgb(235,35,32)" fg:x="147896" fg:w="69"/><text x="59.6792%" y="287.50"></text></g><g><title>powergraph`DYLD-STUB$$free (101 samples, 0.04%)</title><rect x="59.4569%" y="277" width="0.0406%" height="15" fill="rgb(218,68,31)" fg:x="147965" fg:w="101"/><text x="59.7069%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (48 samples, 0.02%)</title><rect x="59.5963%" y="261" width="0.0193%" height="15" fill="rgb(207,120,37)" fg:x="148312" fg:w="48"/><text x="59.8463%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (554 samples, 0.22%)</title><rect x="59.6156%" y="261" width="0.2226%" height="15" fill="rgb(227,98,0)" fg:x="148360" fg:w="554"/><text x="59.8656%" y="271.50"></text></g><g><title>libsystem_platform.dylib`__bzero (98 samples, 0.04%)</title><rect x="59.8451%" y="261" width="0.0394%" height="15" fill="rgb(207,7,3)" fg:x="148931" fg:w="98"/><text x="60.0951%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (456 samples, 0.18%)</title><rect x="59.8844%" y="261" width="0.1832%" height="15" fill="rgb(206,98,19)" fg:x="149029" fg:w="456"/><text x="60.1344%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.02%)</title><rect x="60.0677%" y="261" width="0.0153%" height="15" fill="rgb(217,5,26)" fg:x="149485" fg:w="38"/><text x="60.3177%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (2,110 samples, 0.85%)</title><rect x="59.2511%" y="293" width="0.8479%" height="15" fill="rgb(235,190,38)" fg:x="147453" fg:w="2110"/><text x="59.5011%" y="303.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (1,479 samples, 0.59%)</title><rect x="59.5047%" y="277" width="0.5943%" height="15" fill="rgb(247,86,24)" fg:x="148084" fg:w="1479"/><text x="59.7547%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (27 samples, 0.01%)</title><rect x="60.0882%" y="261" width="0.0108%" height="15" fill="rgb(205,101,16)" fg:x="149536" fg:w="27"/><text x="60.3382%" y="271.50"></text></g><g><title>powergraph`hashbrown::set::HashSet&lt;T,S,A&gt;::get (92 samples, 0.04%)</title><rect x="60.0990%" y="293" width="0.0370%" height="15" fill="rgb(246,168,33)" fg:x="149563" fg:w="92"/><text x="60.3490%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`write (194 samples, 0.08%)</title><rect x="60.1733%" y="181" width="0.0780%" height="15" fill="rgb(231,114,1)" fg:x="149748" fg:w="194"/><text x="60.4233%" y="191.50"></text></g><g><title>powergraph`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (339 samples, 0.14%)</title><rect x="60.1729%" y="197" width="0.1362%" height="15" fill="rgb(207,184,53)" fg:x="149747" fg:w="339"/><text x="60.4229%" y="207.50"></text></g><g><title>powergraph`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (135 samples, 0.05%)</title><rect x="60.2549%" y="181" width="0.0542%" height="15" fill="rgb(224,95,51)" fg:x="149951" fg:w="135"/><text x="60.5049%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`write (135 samples, 0.05%)</title><rect x="60.2549%" y="165" width="0.0542%" height="15" fill="rgb(212,188,45)" fg:x="149951" fg:w="135"/><text x="60.5049%" y="175.50"></text></g><g><title>powergraph`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (342 samples, 0.14%)</title><rect x="60.1725%" y="213" width="0.1374%" height="15" fill="rgb(223,154,38)" fg:x="149746" fg:w="342"/><text x="60.4225%" y="223.50"></text></g><g><title>powergraph`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (348 samples, 0.14%)</title><rect x="60.1705%" y="245" width="0.1398%" height="15" fill="rgb(251,22,52)" fg:x="149741" fg:w="348"/><text x="60.4205%" y="255.50"></text></g><g><title>powergraph`core::fmt::write (343 samples, 0.14%)</title><rect x="60.1725%" y="229" width="0.1378%" height="15" fill="rgb(229,209,22)" fg:x="149746" fg:w="343"/><text x="60.4225%" y="239.50"></text></g><g><title>powergraph`std::io::stdio::_print (350 samples, 0.14%)</title><rect x="60.1705%" y="261" width="0.1406%" height="15" fill="rgb(234,138,34)" fg:x="149741" fg:w="350"/><text x="60.4205%" y="271.50"></text></g><g><title>powergraph`time::formatting::formattable::sealed::Sealed::format (47 samples, 0.02%)</title><rect x="60.3136%" y="261" width="0.0189%" height="15" fill="rgb(212,95,11)" fg:x="150097" fg:w="47"/><text x="60.5636%" y="271.50"></text></g><g><title>powergraph`time::formatting::formattable::_&lt;impl time::formatting::formattable::sealed::Sealed for [time::format_description::borrowed_format_item::BorrowedFormatItem]&gt;::format_into (43 samples, 0.02%)</title><rect x="60.3152%" y="245" width="0.0173%" height="15" fill="rgb(240,179,47)" fg:x="150101" fg:w="43"/><text x="60.5652%" y="255.50"></text></g><g><title>powergraph`time::formatting::formattable::_&lt;impl time::formatting::formattable::sealed::Sealed for time::format_description::borrowed_format_item::BorrowedFormatItem&gt;::format_into (40 samples, 0.02%)</title><rect x="60.3164%" y="229" width="0.0161%" height="15" fill="rgb(240,163,11)" fg:x="150104" fg:w="40"/><text x="60.5664%" y="239.50"></text></g><g><title>powergraph`time::formatting::format_component (26 samples, 0.01%)</title><rect x="60.3220%" y="213" width="0.0104%" height="15" fill="rgb(236,37,12)" fg:x="150118" fg:w="26"/><text x="60.5720%" y="223.50"></text></g><g><title>powergraph`&lt;simple_logger::SimpleLogger as log::Log&gt;::log (481 samples, 0.19%)</title><rect x="60.1420%" y="277" width="0.1933%" height="15" fill="rgb(232,164,16)" fg:x="149670" fg:w="481"/><text x="60.3920%" y="287.50"></text></g><g><title>powergraph`log::__private_api::log_impl (500 samples, 0.20%)</title><rect x="60.1360%" y="293" width="0.2009%" height="15" fill="rgb(244,205,15)" fg:x="149655" fg:w="500"/><text x="60.3860%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (63 samples, 0.03%)</title><rect x="60.3417%" y="277" width="0.0253%" height="15" fill="rgb(223,117,47)" fg:x="150167" fg:w="63"/><text x="60.5917%" y="287.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::get_id (29 samples, 0.01%)</title><rect x="60.3554%" y="261" width="0.0117%" height="15" fill="rgb(244,107,35)" fg:x="150201" fg:w="29"/><text x="60.6054%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (38 samples, 0.02%)</title><rect x="60.3690%" y="261" width="0.0153%" height="15" fill="rgb(205,140,8)" fg:x="150235" fg:w="38"/><text x="60.6190%" y="271.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (44 samples, 0.02%)</title><rect x="60.3670%" y="277" width="0.0177%" height="15" fill="rgb(228,84,46)" fg:x="150230" fg:w="44"/><text x="60.6170%" y="287.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (39 samples, 0.02%)</title><rect x="60.3871%" y="261" width="0.0157%" height="15" fill="rgb(254,188,9)" fg:x="150280" fg:w="39"/><text x="60.6371%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (90 samples, 0.04%)</title><rect x="60.4562%" y="245" width="0.0362%" height="15" fill="rgb(206,112,54)" fg:x="150452" fg:w="90"/><text x="60.7062%" y="255.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (101 samples, 0.04%)</title><rect x="60.5454%" y="229" width="0.0406%" height="15" fill="rgb(216,84,49)" fg:x="150674" fg:w="101"/><text x="60.7954%" y="239.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (60 samples, 0.02%)</title><rect x="60.5860%" y="229" width="0.0241%" height="15" fill="rgb(214,194,35)" fg:x="150775" fg:w="60"/><text x="60.8360%" y="239.50"></text></g><g><title>powergraph`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (263 samples, 0.11%)</title><rect x="60.5069%" y="245" width="0.1057%" height="15" fill="rgb(249,28,3)" fg:x="150578" fg:w="263"/><text x="60.7569%" y="255.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (36 samples, 0.01%)</title><rect x="60.6234%" y="245" width="0.0145%" height="15" fill="rgb(222,56,52)" fg:x="150868" fg:w="36"/><text x="60.8734%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (40 samples, 0.02%)</title><rect x="60.6535%" y="229" width="0.0161%" height="15" fill="rgb(245,217,50)" fg:x="150943" fg:w="40"/><text x="60.9035%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,380 samples, 0.96%)</title><rect x="60.8376%" y="197" width="0.9564%" height="15" fill="rgb(213,201,24)" fg:x="151401" fg:w="2380"/><text x="61.0876%" y="207.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (402 samples, 0.16%)</title><rect x="61.7939%" y="197" width="0.1615%" height="15" fill="rgb(248,116,28)" fg:x="153781" fg:w="402"/><text x="62.0439%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (3,104 samples, 1.25%)</title><rect x="60.7114%" y="213" width="1.2473%" height="15" fill="rgb(219,72,43)" fg:x="151087" fg:w="3104"/><text x="60.9614%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (107 samples, 0.04%)</title><rect x="61.9691%" y="197" width="0.0430%" height="15" fill="rgb(209,138,14)" fg:x="154217" fg:w="107"/><text x="62.2191%" y="207.50"></text></g><g><title>powergraph`powergraph::cluster_repository::is_partial_subset (3,408 samples, 1.37%)</title><rect x="60.6463%" y="245" width="1.3694%" height="15" fill="rgb(222,18,33)" fg:x="150925" fg:w="3408"/><text x="60.8963%" y="255.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (3,307 samples, 1.33%)</title><rect x="60.6869%" y="229" width="1.3289%" height="15" fill="rgb(213,199,7)" fg:x="151026" fg:w="3307"/><text x="60.9369%" y="239.50"></text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (142 samples, 0.06%)</title><rect x="61.9587%" y="213" width="0.0571%" height="15" fill="rgb(250,110,10)" fg:x="154191" fg:w="142"/><text x="62.2087%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (154 samples, 0.06%)</title><rect x="62.0266%" y="229" width="0.0619%" height="15" fill="rgb(248,123,6)" fg:x="154360" fg:w="154"/><text x="62.2766%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (40 samples, 0.02%)</title><rect x="62.0925%" y="229" width="0.0161%" height="15" fill="rgb(206,91,31)" fg:x="154524" fg:w="40"/><text x="62.3425%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (46 samples, 0.02%)</title><rect x="62.1222%" y="229" width="0.0185%" height="15" fill="rgb(211,154,13)" fg:x="154598" fg:w="46"/><text x="62.3722%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (349 samples, 0.14%)</title><rect x="62.1604%" y="213" width="0.1402%" height="15" fill="rgb(225,148,7)" fg:x="154693" fg:w="349"/><text x="62.4104%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (74 samples, 0.03%)</title><rect x="62.3006%" y="213" width="0.0297%" height="15" fill="rgb(220,160,43)" fg:x="155042" fg:w="74"/><text x="62.5506%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.02%)</title><rect x="62.3308%" y="213" width="0.0177%" height="15" fill="rgb(213,52,39)" fg:x="155117" fg:w="44"/><text x="62.5808%" y="223.50"></text></g><g><title>powergraph`DYLD-STUB$$free (88 samples, 0.04%)</title><rect x="62.3485%" y="213" width="0.0354%" height="15" fill="rgb(243,137,7)" fg:x="155161" fg:w="88"/><text x="62.5985%" y="223.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::string::String&gt; (29 samples, 0.01%)</title><rect x="62.3838%" y="213" width="0.0117%" height="15" fill="rgb(230,79,13)" fg:x="155249" fg:w="29"/><text x="62.6338%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (52 samples, 0.02%)</title><rect x="62.4537%" y="197" width="0.0209%" height="15" fill="rgb(247,105,23)" fg:x="155423" fg:w="52"/><text x="62.7037%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (556 samples, 0.22%)</title><rect x="62.4746%" y="197" width="0.2234%" height="15" fill="rgb(223,179,41)" fg:x="155475" fg:w="556"/><text x="62.7246%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (67 samples, 0.03%)</title><rect x="62.6981%" y="197" width="0.0269%" height="15" fill="rgb(218,9,34)" fg:x="156031" fg:w="67"/><text x="62.9481%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (419 samples, 0.17%)</title><rect x="62.7250%" y="197" width="0.1684%" height="15" fill="rgb(222,106,8)" fg:x="156098" fg:w="419"/><text x="62.9750%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (1,887 samples, 0.76%)</title><rect x="62.1455%" y="229" width="0.7583%" height="15" fill="rgb(211,220,0)" fg:x="154656" fg:w="1887"/><text x="62.3955%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (1,265 samples, 0.51%)</title><rect x="62.3955%" y="213" width="0.5083%" height="15" fill="rgb(229,52,16)" fg:x="155278" fg:w="1265"/><text x="62.6455%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (54 samples, 0.02%)</title><rect x="62.9383%" y="213" width="0.0217%" height="15" fill="rgb(212,155,18)" fg:x="156629" fg:w="54"/><text x="63.1883%" y="223.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (175 samples, 0.07%)</title><rect x="62.9741%" y="213" width="0.0703%" height="15" fill="rgb(242,21,14)" fg:x="156718" fg:w="175"/><text x="63.2241%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (362 samples, 0.15%)</title><rect x="63.1807%" y="197" width="0.1455%" height="15" fill="rgb(222,19,48)" fg:x="157232" fg:w="362"/><text x="63.4307%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (425 samples, 0.17%)</title><rect x="63.3277%" y="197" width="0.1708%" height="15" fill="rgb(232,45,27)" fg:x="157598" fg:w="425"/><text x="63.5777%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (326 samples, 0.13%)</title><rect x="63.4985%" y="197" width="0.1310%" height="15" fill="rgb(249,103,42)" fg:x="158023" fg:w="326"/><text x="63.7485%" y="207.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (147 samples, 0.06%)</title><rect x="63.6295%" y="197" width="0.0591%" height="15" fill="rgb(246,81,33)" fg:x="158349" fg:w="147"/><text x="63.8795%" y="207.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,732 samples, 0.70%)</title><rect x="63.6886%" y="197" width="0.6960%" height="15" fill="rgb(252,33,42)" fg:x="158496" fg:w="1732"/><text x="63.9386%" y="207.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (58 samples, 0.02%)</title><rect x="64.3845%" y="197" width="0.0233%" height="15" fill="rgb(209,212,41)" fg:x="160228" fg:w="58"/><text x="64.6345%" y="207.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (37 samples, 0.01%)</title><rect x="64.4078%" y="197" width="0.0149%" height="15" fill="rgb(207,154,6)" fg:x="160286" fg:w="37"/><text x="64.6578%" y="207.50"></text></g><g><title>powergraph`__rdl_alloc (48 samples, 0.02%)</title><rect x="64.4227%" y="197" width="0.0193%" height="15" fill="rgb(223,64,47)" fg:x="160323" fg:w="48"/><text x="64.6727%" y="207.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (617 samples, 0.25%)</title><rect x="64.4428%" y="197" width="0.2479%" height="15" fill="rgb(211,161,38)" fg:x="160373" fg:w="617"/><text x="64.6928%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (35 samples, 0.01%)</title><rect x="64.8531%" y="181" width="0.0141%" height="15" fill="rgb(219,138,40)" fg:x="161394" fg:w="35"/><text x="65.1031%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (79 samples, 0.03%)</title><rect x="64.8708%" y="181" width="0.0317%" height="15" fill="rgb(241,228,46)" fg:x="161438" fg:w="79"/><text x="65.1208%" y="191.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (932 samples, 0.37%)</title><rect x="64.9025%" y="181" width="0.3745%" height="15" fill="rgb(223,209,38)" fg:x="161517" fg:w="932"/><text x="65.1525%" y="191.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (550 samples, 0.22%)</title><rect x="65.2850%" y="181" width="0.2210%" height="15" fill="rgb(236,164,45)" fg:x="162469" fg:w="550"/><text x="65.5350%" y="191.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (48 samples, 0.02%)</title><rect x="65.5060%" y="181" width="0.0193%" height="15" fill="rgb(231,15,5)" fg:x="163019" fg:w="48"/><text x="65.7560%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (129 samples, 0.05%)</title><rect x="65.6487%" y="165" width="0.0518%" height="15" fill="rgb(252,35,15)" fg:x="163374" fg:w="129"/><text x="65.8987%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (56 samples, 0.02%)</title><rect x="65.7005%" y="165" width="0.0225%" height="15" fill="rgb(248,181,18)" fg:x="163503" fg:w="56"/><text x="65.9505%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (181 samples, 0.07%)</title><rect x="65.7295%" y="165" width="0.0727%" height="15" fill="rgb(233,39,42)" fg:x="163575" fg:w="181"/><text x="65.9795%" y="175.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (863 samples, 0.35%)</title><rect x="65.8090%" y="165" width="0.3468%" height="15" fill="rgb(238,110,33)" fg:x="163773" fg:w="863"/><text x="66.0590%" y="175.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (270 samples, 0.11%)</title><rect x="66.1683%" y="165" width="0.1085%" height="15" fill="rgb(233,195,10)" fg:x="164667" fg:w="270"/><text x="66.4183%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (63 samples, 0.03%)</title><rect x="66.3061%" y="149" width="0.0253%" height="15" fill="rgb(254,105,3)" fg:x="165010" fg:w="63"/><text x="66.5561%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (53 samples, 0.02%)</title><rect x="66.3101%" y="133" width="0.0213%" height="15" fill="rgb(221,225,9)" fg:x="165020" fg:w="53"/><text x="66.5601%" y="143.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,008 samples, 0.81%)</title><rect x="65.5253%" y="181" width="0.8069%" height="15" fill="rgb(224,227,45)" fg:x="163067" fg:w="2008"/><text x="65.7753%" y="191.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (138 samples, 0.06%)</title><rect x="66.2768%" y="165" width="0.0555%" height="15" fill="rgb(229,198,43)" fg:x="164937" fg:w="138"/><text x="66.5268%" y="175.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4,110 samples, 1.65%)</title><rect x="64.6907%" y="197" width="1.6515%" height="15" fill="rgb(206,209,35)" fg:x="160990" fg:w="4110"/><text x="64.9407%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (25 samples, 0.01%)</title><rect x="66.3322%" y="181" width="0.0100%" height="15" fill="rgb(245,195,53)" fg:x="165075" fg:w="25"/><text x="66.5822%" y="191.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (8,246 samples, 3.31%)</title><rect x="63.0444%" y="213" width="3.3135%" height="15" fill="rgb(240,92,26)" fg:x="156893" fg:w="8246"/><text x="63.2944%" y="223.50">pow..</text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (39 samples, 0.02%)</title><rect x="66.3423%" y="197" width="0.0157%" height="15" fill="rgb(207,40,23)" fg:x="165100" fg:w="39"/><text x="66.5923%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (233 samples, 0.09%)</title><rect x="66.3720%" y="197" width="0.0936%" height="15" fill="rgb(223,111,35)" fg:x="165174" fg:w="233"/><text x="66.6220%" y="207.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (8,931 samples, 3.59%)</title><rect x="62.9038%" y="229" width="3.5888%" height="15" fill="rgb(229,147,28)" fg:x="156543" fg:w="8931"/><text x="63.1538%" y="239.50">powe..</text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (335 samples, 0.13%)</title><rect x="66.3579%" y="213" width="0.1346%" height="15" fill="rgb(211,29,28)" fg:x="165139" fg:w="335"/><text x="66.6079%" y="223.50"></text></g><g><title>powergraph`core::ops::function::FnOnce::call_once (67 samples, 0.03%)</title><rect x="66.4656%" y="197" width="0.0269%" height="15" fill="rgb(228,72,33)" fg:x="165407" fg:w="67"/><text x="66.7156%" y="207.50"></text></g><g><title>powergraph`powergraph::cluster_repository::is_subset (11,172 samples, 4.49%)</title><rect x="62.0157%" y="245" width="4.4893%" height="15" fill="rgb(205,214,31)" fg:x="154333" fg:w="11172"/><text x="62.2657%" y="255.50">power..</text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (31 samples, 0.01%)</title><rect x="66.4925%" y="229" width="0.0125%" height="15" fill="rgb(224,111,15)" fg:x="165474" fg:w="31"/><text x="66.7425%" y="239.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::get_id (44 samples, 0.02%)</title><rect x="66.5050%" y="245" width="0.0177%" height="15" fill="rgb(253,21,26)" fg:x="165505" fg:w="44"/><text x="66.7550%" y="255.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (48 samples, 0.02%)</title><rect x="66.5227%" y="245" width="0.0193%" height="15" fill="rgb(245,139,43)" fg:x="165549" fg:w="48"/><text x="66.7727%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (15,314 samples, 6.15%)</title><rect x="60.4032%" y="261" width="6.1536%" height="15" fill="rgb(252,170,7)" fg:x="150320" fg:w="15314"/><text x="60.6532%" y="271.50">powergra..</text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (37 samples, 0.01%)</title><rect x="66.5420%" y="245" width="0.0149%" height="15" fill="rgb(231,118,14)" fg:x="165597" fg:w="37"/><text x="66.7920%" y="255.50"></text></g><g><title>powergraph`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (15,408 samples, 6.19%)</title><rect x="60.3867%" y="277" width="6.1914%" height="15" fill="rgb(238,83,0)" fg:x="150279" fg:w="15408"/><text x="60.6367%" y="287.50">powergra..</text></g><g><title>powergraph`powergraph::cluster_repository::is_subset (29 samples, 0.01%)</title><rect x="66.5665%" y="261" width="0.0117%" height="15" fill="rgb(221,39,39)" fg:x="165658" fg:w="29"/><text x="66.8165%" y="271.50"></text></g><g><title>powergraph`powergraph::cluster_repository::ClusterRepository::add_cluster (15,547 samples, 6.25%)</title><rect x="60.3393%" y="293" width="6.2473%" height="15" fill="rgb(222,119,46)" fg:x="150161" fg:w="15547"/><text x="60.5893%" y="303.50">powergra..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (55 samples, 0.02%)</title><rect x="66.6123%" y="197" width="0.0221%" height="15" fill="rgb(222,165,49)" fg:x="165772" fg:w="55"/><text x="66.8623%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (108 samples, 0.04%)</title><rect x="66.5994%" y="213" width="0.0434%" height="15" fill="rgb(219,113,52)" fg:x="165740" fg:w="108"/><text x="66.8494%" y="223.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (127 samples, 0.05%)</title><rect x="66.5970%" y="229" width="0.0510%" height="15" fill="rgb(214,7,15)" fg:x="165734" fg:w="127"/><text x="66.8470%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (52 samples, 0.02%)</title><rect x="66.6609%" y="181" width="0.0209%" height="15" fill="rgb(235,32,4)" fg:x="165893" fg:w="52"/><text x="66.9109%" y="191.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::hash::Hash&gt;::hash (146 samples, 0.06%)</title><rect x="66.6593%" y="197" width="0.0587%" height="15" fill="rgb(238,90,54)" fg:x="165889" fg:w="146"/><text x="66.9093%" y="207.50"></text></g><g><title>powergraph`itertools::Itertools::sorted (89 samples, 0.04%)</title><rect x="66.6822%" y="181" width="0.0358%" height="15" fill="rgb(213,208,19)" fg:x="165946" fg:w="89"/><text x="66.9322%" y="191.50"></text></g><g><title>powergraph`core::slice::sort::stable::driftsort_main (40 samples, 0.02%)</title><rect x="66.7019%" y="165" width="0.0161%" height="15" fill="rgb(233,156,4)" fg:x="165995" fg:w="40"/><text x="66.9519%" y="175.50"></text></g><g><title>powergraph`core::slice::sort::stable::drift::sort (40 samples, 0.02%)</title><rect x="66.7019%" y="149" width="0.0161%" height="15" fill="rgb(207,194,5)" fg:x="165995" fg:w="40"/><text x="66.9519%" y="159.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (149 samples, 0.06%)</title><rect x="66.6585%" y="213" width="0.0599%" height="15" fill="rgb(206,111,30)" fg:x="165887" fg:w="149"/><text x="66.9085%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (40 samples, 0.02%)</title><rect x="66.7252%" y="165" width="0.0161%" height="15" fill="rgb(243,70,54)" fg:x="166053" fg:w="40"/><text x="66.9752%" y="175.50"></text></g><g><title>powergraph`core::slice::sort::stable::drift::create_run (30 samples, 0.01%)</title><rect x="66.7598%" y="117" width="0.0121%" height="15" fill="rgb(242,28,8)" fg:x="166139" fg:w="30"/><text x="67.0098%" y="127.50"></text></g><g><title>powergraph`core::slice::sort::stable::quicksort::quicksort (30 samples, 0.01%)</title><rect x="66.7598%" y="101" width="0.0121%" height="15" fill="rgb(219,106,18)" fg:x="166139" fg:w="30"/><text x="67.0098%" y="111.50"></text></g><g><title>powergraph`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (30 samples, 0.01%)</title><rect x="66.7598%" y="85" width="0.0121%" height="15" fill="rgb(244,222,10)" fg:x="166139" fg:w="30"/><text x="67.0098%" y="95.50"></text></g><g><title>powergraph`&lt;powergraph::sets::Set&lt;T&gt; as core::hash::Hash&gt;::hash (131 samples, 0.05%)</title><rect x="66.7212%" y="181" width="0.0526%" height="15" fill="rgb(236,179,52)" fg:x="166043" fg:w="131"/><text x="66.9712%" y="191.50"></text></g><g><title>powergraph`itertools::Itertools::sorted (81 samples, 0.03%)</title><rect x="66.7413%" y="165" width="0.0325%" height="15" fill="rgb(213,23,39)" fg:x="166093" fg:w="81"/><text x="66.9913%" y="175.50"></text></g><g><title>powergraph`core::slice::sort::stable::driftsort_main (35 samples, 0.01%)</title><rect x="66.7598%" y="149" width="0.0141%" height="15" fill="rgb(238,48,10)" fg:x="166139" fg:w="35"/><text x="67.0098%" y="159.50"></text></g><g><title>powergraph`core::slice::sort::stable::drift::sort (35 samples, 0.01%)</title><rect x="66.7598%" y="133" width="0.0141%" height="15" fill="rgb(251,196,23)" fg:x="166139" fg:w="35"/><text x="67.0098%" y="143.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (137 samples, 0.06%)</title><rect x="66.7196%" y="213" width="0.0551%" height="15" fill="rgb(250,152,24)" fg:x="166039" fg:w="137"/><text x="66.9696%" y="223.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (136 samples, 0.05%)</title><rect x="66.7200%" y="197" width="0.0546%" height="15" fill="rgb(209,150,17)" fg:x="166040" fg:w="136"/><text x="66.9700%" y="207.50"></text></g><g><title>powergraph`powergraph::cluster_repository::ClusterRepository::get_sibling_clusters (480 samples, 0.19%)</title><rect x="66.5870%" y="293" width="0.1929%" height="15" fill="rgb(234,202,34)" fg:x="165709" fg:w="480"/><text x="66.8370%" y="303.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (480 samples, 0.19%)</title><rect x="66.5870%" y="277" width="0.1929%" height="15" fill="rgb(253,148,53)" fg:x="165709" fg:w="480"/><text x="66.8370%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (479 samples, 0.19%)</title><rect x="66.5874%" y="261" width="0.1925%" height="15" fill="rgb(218,129,16)" fg:x="165710" fg:w="479"/><text x="66.8374%" y="271.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (478 samples, 0.19%)</title><rect x="66.5878%" y="245" width="0.1921%" height="15" fill="rgb(216,85,19)" fg:x="165711" fg:w="478"/><text x="66.8378%" y="255.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (328 samples, 0.13%)</title><rect x="66.6480%" y="229" width="0.1318%" height="15" fill="rgb(235,228,7)" fg:x="165861" fg:w="328"/><text x="66.8980%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (71 samples, 0.03%)</title><rect x="66.8124%" y="277" width="0.0285%" height="15" fill="rgb(245,175,0)" fg:x="166270" fg:w="71"/><text x="67.0624%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (51 samples, 0.02%)</title><rect x="66.8606%" y="261" width="0.0205%" height="15" fill="rgb(208,168,36)" fg:x="166390" fg:w="51"/><text x="67.1106%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (152 samples, 0.06%)</title><rect x="66.9249%" y="245" width="0.0611%" height="15" fill="rgb(246,171,24)" fg:x="166550" fg:w="152"/><text x="67.1749%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc (28 samples, 0.01%)</title><rect x="66.9860%" y="245" width="0.0113%" height="15" fill="rgb(215,142,24)" fg:x="166702" fg:w="28"/><text x="67.2360%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (273 samples, 0.11%)</title><rect x="66.9972%" y="245" width="0.1097%" height="15" fill="rgb(250,187,7)" fg:x="166730" fg:w="273"/><text x="67.2472%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (353 samples, 0.14%)</title><rect x="67.1069%" y="245" width="0.1418%" height="15" fill="rgb(228,66,33)" fg:x="167003" fg:w="353"/><text x="67.3569%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (152 samples, 0.06%)</title><rect x="67.2829%" y="229" width="0.0611%" height="15" fill="rgb(234,215,21)" fg:x="167441" fg:w="152"/><text x="67.5329%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (147 samples, 0.06%)</title><rect x="67.2850%" y="213" width="0.0591%" height="15" fill="rgb(222,191,20)" fg:x="167446" fg:w="147"/><text x="67.5350%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (265 samples, 0.11%)</title><rect x="67.2488%" y="245" width="0.1065%" height="15" fill="rgb(245,79,54)" fg:x="167356" fg:w="265"/><text x="67.4988%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 0.01%)</title><rect x="67.3444%" y="229" width="0.0108%" height="15" fill="rgb(240,10,37)" fg:x="167594" fg:w="27"/><text x="67.5944%" y="239.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,264 samples, 0.51%)</title><rect x="66.8594%" y="277" width="0.5079%" height="15" fill="rgb(214,192,32)" fg:x="166387" fg:w="1264"/><text x="67.1094%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (1,210 samples, 0.49%)</title><rect x="66.8811%" y="261" width="0.4862%" height="15" fill="rgb(209,36,54)" fg:x="166441" fg:w="1210"/><text x="67.1311%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (134 samples, 0.05%)</title><rect x="67.3910%" y="261" width="0.0538%" height="15" fill="rgb(220,10,11)" fg:x="167710" fg:w="134"/><text x="67.6410%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (89 samples, 0.04%)</title><rect x="67.4610%" y="261" width="0.0358%" height="15" fill="rgb(221,106,17)" fg:x="167884" fg:w="89"/><text x="67.7110%" y="271.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (303 samples, 0.12%)</title><rect x="67.3782%" y="277" width="0.1218%" height="15" fill="rgb(251,142,44)" fg:x="167678" fg:w="303"/><text x="67.6282%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (502 samples, 0.20%)</title><rect x="67.5080%" y="261" width="0.2017%" height="15" fill="rgb(238,13,15)" fg:x="168001" fg:w="502"/><text x="67.7580%" y="271.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (112 samples, 0.05%)</title><rect x="67.7097%" y="261" width="0.0450%" height="15" fill="rgb(208,107,27)" fg:x="168503" fg:w="112"/><text x="67.9597%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (673 samples, 0.27%)</title><rect x="67.5027%" y="277" width="0.2704%" height="15" fill="rgb(205,136,37)" fg:x="167988" fg:w="673"/><text x="67.7527%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (46 samples, 0.02%)</title><rect x="67.7547%" y="261" width="0.0185%" height="15" fill="rgb(250,205,27)" fg:x="168615" fg:w="46"/><text x="68.0047%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (61 samples, 0.02%)</title><rect x="67.7732%" y="277" width="0.0245%" height="15" fill="rgb(210,80,43)" fg:x="168661" fg:w="61"/><text x="68.0232%" y="287.50"></text></g><g><title>powergraph`powergraph::cluster_repository::ClusterRepository::remove (2,554 samples, 1.03%)</title><rect x="66.7798%" y="293" width="1.0263%" height="15" fill="rgb(247,160,36)" fg:x="166189" fg:w="2554"/><text x="67.0298%" y="303.50"></text></g><g><title>powergraph`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 samples, 0.01%)</title><rect x="67.8334%" y="261" width="0.0108%" height="15" fill="rgb(234,13,49)" fg:x="168811" fg:w="27"/><text x="68.0834%" y="271.50"></text></g><g><title>powergraph`alloc::vec::in_place_collect::from_iter_in_place (34 samples, 0.01%)</title><rect x="67.8310%" y="277" width="0.0137%" height="15" fill="rgb(234,122,0)" fg:x="168805" fg:w="34"/><text x="68.0810%" y="287.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (25 samples, 0.01%)</title><rect x="67.8604%" y="261" width="0.0100%" height="15" fill="rgb(207,146,38)" fg:x="168878" fg:w="25"/><text x="68.1104%" y="271.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::get_id (162 samples, 0.07%)</title><rect x="67.8069%" y="293" width="0.0651%" height="15" fill="rgb(207,177,25)" fg:x="168745" fg:w="162"/><text x="68.0569%" y="303.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::to_vec (45 samples, 0.02%)</title><rect x="67.8539%" y="277" width="0.0181%" height="15" fill="rgb(211,178,42)" fg:x="168862" fg:w="45"/><text x="68.1039%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (27 samples, 0.01%)</title><rect x="67.9158%" y="213" width="0.0108%" height="15" fill="rgb(230,69,54)" fg:x="169016" fg:w="27"/><text x="68.1658%" y="223.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::new (123 samples, 0.05%)</title><rect x="67.8793%" y="293" width="0.0494%" height="15" fill="rgb(214,135,41)" fg:x="168925" fg:w="123"/><text x="68.1293%" y="303.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (104 samples, 0.04%)</title><rect x="67.8869%" y="277" width="0.0418%" height="15" fill="rgb(237,67,25)" fg:x="168944" fg:w="104"/><text x="68.1369%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (102 samples, 0.04%)</title><rect x="67.8877%" y="261" width="0.0410%" height="15" fill="rgb(222,189,50)" fg:x="168946" fg:w="102"/><text x="68.1377%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (48 samples, 0.02%)</title><rect x="67.9094%" y="245" width="0.0193%" height="15" fill="rgb(245,148,34)" fg:x="169000" fg:w="48"/><text x="68.1594%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (33 samples, 0.01%)</title><rect x="67.9154%" y="229" width="0.0133%" height="15" fill="rgb(222,29,6)" fg:x="169015" fg:w="33"/><text x="68.1654%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (60 samples, 0.02%)</title><rect x="67.9472%" y="261" width="0.0241%" height="15" fill="rgb(221,189,43)" fg:x="169094" fg:w="60"/><text x="68.1972%" y="271.50"></text></g><g><title>powergraph`DYLD-STUB$$free (26 samples, 0.01%)</title><rect x="67.9821%" y="261" width="0.0104%" height="15" fill="rgb(207,36,27)" fg:x="169181" fg:w="26"/><text x="68.2321%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (112 samples, 0.05%)</title><rect x="68.0111%" y="245" width="0.0450%" height="15" fill="rgb(217,90,24)" fg:x="169253" fg:w="112"/><text x="68.2611%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (89 samples, 0.04%)</title><rect x="68.0625%" y="245" width="0.0358%" height="15" fill="rgb(224,66,35)" fg:x="169381" fg:w="89"/><text x="68.3125%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (383 samples, 0.15%)</title><rect x="67.9472%" y="277" width="0.1539%" height="15" fill="rgb(221,13,50)" fg:x="169094" fg:w="383"/><text x="68.1972%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (268 samples, 0.11%)</title><rect x="67.9934%" y="261" width="0.1077%" height="15" fill="rgb(236,68,49)" fg:x="169209" fg:w="268"/><text x="68.2434%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (40 samples, 0.02%)</title><rect x="68.1376%" y="245" width="0.0161%" height="15" fill="rgb(229,146,28)" fg:x="169568" fg:w="40"/><text x="68.3876%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (49 samples, 0.02%)</title><rect x="68.1537%" y="245" width="0.0197%" height="15" fill="rgb(225,31,38)" fg:x="169608" fg:w="49"/><text x="68.4037%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (90 samples, 0.04%)</title><rect x="68.1742%" y="245" width="0.0362%" height="15" fill="rgb(250,208,3)" fg:x="169659" fg:w="90"/><text x="68.4242%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (84 samples, 0.03%)</title><rect x="68.2104%" y="245" width="0.0338%" height="15" fill="rgb(246,54,23)" fg:x="169749" fg:w="84"/><text x="68.4604%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (66 samples, 0.03%)</title><rect x="68.2176%" y="229" width="0.0265%" height="15" fill="rgb(243,76,11)" fg:x="169767" fg:w="66"/><text x="68.4676%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (61 samples, 0.02%)</title><rect x="68.2196%" y="213" width="0.0245%" height="15" fill="rgb(245,21,50)" fg:x="169772" fg:w="61"/><text x="68.4696%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (252 samples, 0.10%)</title><rect x="68.2441%" y="245" width="0.1013%" height="15" fill="rgb(228,9,43)" fg:x="169833" fg:w="252"/><text x="68.4941%" y="255.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (55 samples, 0.02%)</title><rect x="68.3510%" y="245" width="0.0221%" height="15" fill="rgb(208,100,47)" fg:x="170099" fg:w="55"/><text x="68.6010%" y="255.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (115 samples, 0.05%)</title><rect x="68.4177%" y="229" width="0.0462%" height="15" fill="rgb(232,26,8)" fg:x="170265" fg:w="115"/><text x="68.6677%" y="239.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (49 samples, 0.02%)</title><rect x="68.4655%" y="229" width="0.0197%" height="15" fill="rgb(216,166,38)" fg:x="170384" fg:w="49"/><text x="68.7155%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (273 samples, 0.11%)</title><rect x="68.5270%" y="213" width="0.1097%" height="15" fill="rgb(251,202,51)" fg:x="170537" fg:w="273"/><text x="68.7770%" y="223.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (76 samples, 0.03%)</title><rect x="68.6371%" y="213" width="0.0305%" height="15" fill="rgb(254,216,34)" fg:x="170811" fg:w="76"/><text x="68.8871%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.01%)</title><rect x="68.6697%" y="197" width="0.0104%" height="15" fill="rgb(251,32,27)" fg:x="170892" fg:w="26"/><text x="68.9197%" y="207.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (483 samples, 0.19%)</title><rect x="68.4864%" y="229" width="0.1941%" height="15" fill="rgb(208,127,28)" fg:x="170436" fg:w="483"/><text x="68.7364%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (32 samples, 0.01%)</title><rect x="68.6676%" y="213" width="0.0129%" height="15" fill="rgb(224,137,22)" fg:x="170887" fg:w="32"/><text x="68.9176%" y="223.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (767 samples, 0.31%)</title><rect x="68.3731%" y="245" width="0.3082%" height="15" fill="rgb(254,70,32)" fg:x="170154" fg:w="767"/><text x="68.6231%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (1,417 samples, 0.57%)</title><rect x="68.1127%" y="261" width="0.5694%" height="15" fill="rgb(229,75,37)" fg:x="169506" fg:w="1417"/><text x="68.3627%" y="271.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (1,450 samples, 0.58%)</title><rect x="68.1011%" y="277" width="0.5827%" height="15" fill="rgb(252,64,23)" fg:x="169477" fg:w="1450"/><text x="68.3511%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 samples, 0.02%)</title><rect x="68.7131%" y="245" width="0.0213%" height="15" fill="rgb(232,162,48)" fg:x="171000" fg:w="53"/><text x="68.9631%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (156 samples, 0.06%)</title><rect x="68.6881%" y="261" width="0.0627%" height="15" fill="rgb(246,160,12)" fg:x="170938" fg:w="156"/><text x="68.9381%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (29 samples, 0.01%)</title><rect x="68.7392%" y="245" width="0.0117%" height="15" fill="rgb(247,166,0)" fg:x="171065" fg:w="29"/><text x="68.9892%" y="255.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (169 samples, 0.07%)</title><rect x="68.6837%" y="277" width="0.0679%" height="15" fill="rgb(249,219,21)" fg:x="170927" fg:w="169"/><text x="68.9337%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (37 samples, 0.01%)</title><rect x="68.7786%" y="213" width="0.0149%" height="15" fill="rgb(205,209,3)" fg:x="171163" fg:w="37"/><text x="69.0286%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (68 samples, 0.03%)</title><rect x="68.7942%" y="213" width="0.0273%" height="15" fill="rgb(243,44,1)" fg:x="171202" fg:w="68"/><text x="69.0442%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (32 samples, 0.01%)</title><rect x="68.8308%" y="213" width="0.0129%" height="15" fill="rgb(206,159,16)" fg:x="171293" fg:w="32"/><text x="69.0808%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (57 samples, 0.02%)</title><rect x="68.8589%" y="197" width="0.0229%" height="15" fill="rgb(244,77,30)" fg:x="171363" fg:w="57"/><text x="69.1089%" y="207.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (32 samples, 0.01%)</title><rect x="68.8818%" y="197" width="0.0129%" height="15" fill="rgb(218,69,12)" fg:x="171420" fg:w="32"/><text x="69.1318%" y="207.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (36 samples, 0.01%)</title><rect x="68.8955%" y="181" width="0.0145%" height="15" fill="rgb(212,87,7)" fg:x="171454" fg:w="36"/><text x="69.1455%" y="191.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (396 samples, 0.16%)</title><rect x="68.7528%" y="245" width="0.1591%" height="15" fill="rgb(245,114,25)" fg:x="171099" fg:w="396"/><text x="69.0028%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (381 samples, 0.15%)</title><rect x="68.7589%" y="229" width="0.1531%" height="15" fill="rgb(210,61,42)" fg:x="171114" fg:w="381"/><text x="69.0089%" y="239.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (156 samples, 0.06%)</title><rect x="68.8493%" y="213" width="0.0627%" height="15" fill="rgb(211,52,33)" fg:x="171339" fg:w="156"/><text x="69.0993%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (43 samples, 0.02%)</title><rect x="68.8947%" y="197" width="0.0173%" height="15" fill="rgb(234,58,33)" fg:x="171452" fg:w="43"/><text x="69.1447%" y="207.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (410 samples, 0.16%)</title><rect x="68.7516%" y="261" width="0.1648%" height="15" fill="rgb(220,115,36)" fg:x="171096" fg:w="410"/><text x="69.0016%" y="271.50"></text></g><g><title>powergraph`powergraph::clusters::Cluster::similarity (2,460 samples, 0.99%)</title><rect x="67.9287%" y="293" width="0.9885%" height="15" fill="rgb(243,153,54)" fg:x="169048" fg:w="2460"/><text x="68.1787%" y="303.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::union (412 samples, 0.17%)</title><rect x="68.7516%" y="277" width="0.1656%" height="15" fill="rgb(251,47,18)" fg:x="171096" fg:w="412"/><text x="69.0016%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (79 samples, 0.03%)</title><rect x="69.0631%" y="277" width="0.0317%" height="15" fill="rgb(242,102,42)" fg:x="171871" fg:w="79"/><text x="69.3131%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (463 samples, 0.19%)</title><rect x="69.1004%" y="277" width="0.1860%" height="15" fill="rgb(234,31,38)" fg:x="171964" fg:w="463"/><text x="69.3504%" y="287.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (193 samples, 0.08%)</title><rect x="69.2905%" y="277" width="0.0776%" height="15" fill="rgb(221,117,51)" fg:x="172437" fg:w="193"/><text x="69.5405%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (341 samples, 0.14%)</title><rect x="69.4339%" y="261" width="0.1370%" height="15" fill="rgb(212,20,18)" fg:x="172794" fg:w="341"/><text x="69.6839%" y="271.50"></text></g><g><title>powergraph`powergraph::edge_repository::EdgeRepository::get_edge (2,033 samples, 0.82%)</title><rect x="68.9236%" y="293" width="0.8169%" height="15" fill="rgb(245,133,36)" fg:x="171524" fg:w="2033"/><text x="69.1736%" y="303.50"></text></g><g><title>powergraph`hashbrown::set::HashSet&lt;T,S,A&gt;::get (927 samples, 0.37%)</title><rect x="69.3680%" y="277" width="0.3725%" height="15" fill="rgb(212,6,19)" fg:x="172630" fg:w="927"/><text x="69.6180%" y="287.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (422 samples, 0.17%)</title><rect x="69.5710%" y="261" width="0.1696%" height="15" fill="rgb(218,1,36)" fg:x="173135" fg:w="422"/><text x="69.8210%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (179 samples, 0.07%)</title><rect x="69.7518%" y="261" width="0.0719%" height="15" fill="rgb(246,84,54)" fg:x="173585" fg:w="179"/><text x="70.0018%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (56 samples, 0.02%)</title><rect x="69.8237%" y="261" width="0.0225%" height="15" fill="rgb(242,110,6)" fg:x="173764" fg:w="56"/><text x="70.0737%" y="271.50"></text></g><g><title>powergraph`DYLD-STUB$$free (43 samples, 0.02%)</title><rect x="69.8547%" y="261" width="0.0173%" height="15" fill="rgb(214,47,5)" fg:x="173841" fg:w="43"/><text x="70.1047%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (371 samples, 0.15%)</title><rect x="69.9206%" y="245" width="0.1491%" height="15" fill="rgb(218,159,25)" fg:x="174005" fg:w="371"/><text x="70.1706%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (34 samples, 0.01%)</title><rect x="70.0696%" y="245" width="0.0137%" height="15" fill="rgb(215,211,28)" fg:x="174376" fg:w="34"/><text x="70.3196%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (29 samples, 0.01%)</title><rect x="70.0833%" y="245" width="0.0117%" height="15" fill="rgb(238,59,32)" fg:x="174410" fg:w="29"/><text x="70.3333%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (109 samples, 0.04%)</title><rect x="70.0950%" y="245" width="0.0438%" height="15" fill="rgb(226,82,3)" fg:x="174439" fg:w="109"/><text x="70.3450%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (76 samples, 0.03%)</title><rect x="70.1082%" y="229" width="0.0305%" height="15" fill="rgb(240,164,32)" fg:x="174472" fg:w="76"/><text x="70.3582%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (203 samples, 0.08%)</title><rect x="70.1512%" y="245" width="0.0816%" height="15" fill="rgb(232,46,7)" fg:x="174579" fg:w="203"/><text x="70.4012%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (54 samples, 0.02%)</title><rect x="70.2336%" y="245" width="0.0217%" height="15" fill="rgb(229,129,53)" fg:x="174784" fg:w="54"/><text x="70.4836%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (525 samples, 0.21%)</title><rect x="70.2967%" y="229" width="0.2110%" height="15" fill="rgb(234,188,29)" fg:x="174941" fg:w="525"/><text x="70.5467%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (141 samples, 0.06%)</title><rect x="70.5076%" y="229" width="0.0567%" height="15" fill="rgb(246,141,4)" fg:x="175466" fg:w="141"/><text x="70.7576%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (106 samples, 0.04%)</title><rect x="70.5719%" y="229" width="0.0426%" height="15" fill="rgb(229,23,39)" fg:x="175626" fg:w="106"/><text x="70.8219%" y="239.50"></text></g><g><title>powergraph`DYLD-STUB$$free (182 samples, 0.07%)</title><rect x="70.6145%" y="229" width="0.0731%" height="15" fill="rgb(206,12,3)" fg:x="175732" fg:w="182"/><text x="70.8645%" y="239.50"></text></g><g><title>powergraph`__rdl_dealloc (30 samples, 0.01%)</title><rect x="70.6877%" y="229" width="0.0121%" height="15" fill="rgb(252,226,20)" fg:x="175914" fg:w="30"/><text x="70.9377%" y="239.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::string::String&gt; (49 samples, 0.02%)</title><rect x="70.7021%" y="229" width="0.0197%" height="15" fill="rgb(216,123,35)" fg:x="175950" fg:w="49"/><text x="70.9521%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (59 samples, 0.02%)</title><rect x="70.9352%" y="213" width="0.0237%" height="15" fill="rgb(212,68,40)" fg:x="176530" fg:w="59"/><text x="71.1852%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,148 samples, 0.46%)</title><rect x="70.9589%" y="213" width="0.4613%" height="15" fill="rgb(254,125,32)" fg:x="176589" fg:w="1148"/><text x="71.2089%" y="223.50"></text></g><g><title>libsystem_platform.dylib`__bzero (205 samples, 0.08%)</title><rect x="71.4202%" y="213" width="0.0824%" height="15" fill="rgb(253,97,22)" fg:x="177737" fg:w="205"/><text x="71.6702%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1,474 samples, 0.59%)</title><rect x="71.5026%" y="213" width="0.5923%" height="15" fill="rgb(241,101,14)" fg:x="177942" fg:w="1474"/><text x="71.7526%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.01%)</title><rect x="72.0949%" y="213" width="0.0121%" height="15" fill="rgb(238,103,29)" fg:x="179416" fg:w="30"/><text x="72.3449%" y="223.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (5,566 samples, 2.24%)</title><rect x="69.8776%" y="261" width="2.2366%" height="15" fill="rgb(233,195,47)" fg:x="173898" fg:w="5566"/><text x="70.1276%" y="271.50">p..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (4,626 samples, 1.86%)</title><rect x="70.2553%" y="245" width="1.8589%" height="15" fill="rgb(246,218,30)" fg:x="174838" fg:w="4626"/><text x="70.5053%" y="255.50">p..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (3,465 samples, 1.39%)</title><rect x="70.7218%" y="229" width="1.3923%" height="15" fill="rgb(219,145,47)" fg:x="175999" fg:w="3465"/><text x="70.9718%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (136 samples, 0.05%)</title><rect x="72.1142%" y="261" width="0.0546%" height="15" fill="rgb(243,12,26)" fg:x="179464" fg:w="136"/><text x="72.3642%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6,023 samples, 2.42%)</title><rect x="69.7510%" y="277" width="2.4202%" height="15" fill="rgb(214,87,16)" fg:x="173583" fg:w="6023"/><text x="70.0010%" y="287.50">po..</text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (103 samples, 0.04%)</title><rect x="72.1801%" y="261" width="0.0414%" height="15" fill="rgb(208,99,42)" fg:x="179628" fg:w="103"/><text x="72.4301%" y="271.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (44 samples, 0.02%)</title><rect x="72.2214%" y="261" width="0.0177%" height="15" fill="rgb(253,99,2)" fg:x="179731" fg:w="44"/><text x="72.4714%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (145 samples, 0.06%)</title><rect x="72.4360%" y="245" width="0.0583%" height="15" fill="rgb(220,168,23)" fg:x="180265" fg:w="145"/><text x="72.6860%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (314 samples, 0.13%)</title><rect x="72.4967%" y="245" width="0.1262%" height="15" fill="rgb(242,38,24)" fg:x="180416" fg:w="314"/><text x="72.7467%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (887 samples, 0.36%)</title><rect x="72.6229%" y="245" width="0.3564%" height="15" fill="rgb(225,182,9)" fg:x="180730" fg:w="887"/><text x="72.8729%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (417 samples, 0.17%)</title><rect x="73.0151%" y="229" width="0.1676%" height="15" fill="rgb(243,178,37)" fg:x="181706" fg:w="417"/><text x="73.2651%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (407 samples, 0.16%)</title><rect x="73.0191%" y="213" width="0.1635%" height="15" fill="rgb(232,139,19)" fg:x="181716" fg:w="407"/><text x="73.2691%" y="223.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (509 samples, 0.20%)</title><rect x="72.9793%" y="245" width="0.2045%" height="15" fill="rgb(225,201,24)" fg:x="181617" fg:w="509"/><text x="73.2293%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (594 samples, 0.24%)</title><rect x="73.2558%" y="229" width="0.2387%" height="15" fill="rgb(221,47,46)" fg:x="182305" fg:w="594"/><text x="73.5058%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (339 samples, 0.14%)</title><rect x="73.4944%" y="229" width="0.1362%" height="15" fill="rgb(249,23,13)" fg:x="182899" fg:w="339"/><text x="73.7444%" y="239.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (29 samples, 0.01%)</title><rect x="73.6307%" y="229" width="0.0117%" height="15" fill="rgb(219,9,5)" fg:x="183238" fg:w="29"/><text x="73.8807%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (738 samples, 0.30%)</title><rect x="74.0622%" y="213" width="0.2966%" height="15" fill="rgb(254,171,16)" fg:x="184312" fg:w="738"/><text x="74.3122%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (84 samples, 0.03%)</title><rect x="74.3588%" y="213" width="0.0338%" height="15" fill="rgb(230,171,20)" fg:x="185050" fg:w="84"/><text x="74.6088%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,153 samples, 0.46%)</title><rect x="74.3937%" y="213" width="0.4633%" height="15" fill="rgb(210,71,41)" fg:x="185137" fg:w="1153"/><text x="74.6437%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5,722 samples, 2.30%)</title><rect x="74.8570%" y="213" width="2.2993%" height="15" fill="rgb(206,173,20)" fg:x="186290" fg:w="5722"/><text x="75.1070%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1,104 samples, 0.44%)</title><rect x="77.3239%" y="197" width="0.4436%" height="15" fill="rgb(233,88,34)" fg:x="192429" fg:w="1104"/><text x="77.5739%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1,088 samples, 0.44%)</title><rect x="77.3303%" y="181" width="0.4372%" height="15" fill="rgb(223,209,46)" fg:x="192445" fg:w="1088"/><text x="77.5803%" y="191.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,524 samples, 0.61%)</title><rect x="77.1563%" y="213" width="0.6124%" height="15" fill="rgb(250,43,18)" fg:x="192012" fg:w="1524"/><text x="77.4063%" y="223.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (118 samples, 0.05%)</title><rect x="77.7687%" y="213" width="0.0474%" height="15" fill="rgb(208,13,10)" fg:x="193536" fg:w="118"/><text x="78.0187%" y="223.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (30 samples, 0.01%)</title><rect x="77.8161%" y="213" width="0.0121%" height="15" fill="rgb(212,200,36)" fg:x="193654" fg:w="30"/><text x="78.0661%" y="223.50"></text></g><g><title>powergraph`__rdl_alloc (104 samples, 0.04%)</title><rect x="77.8282%" y="213" width="0.0418%" height="15" fill="rgb(225,90,30)" fg:x="193684" fg:w="104"/><text x="78.0782%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (10,540 samples, 4.24%)</title><rect x="73.6423%" y="229" width="4.2353%" height="15" fill="rgb(236,182,39)" fg:x="183267" fg:w="10540"/><text x="73.8923%" y="239.50">power..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (172 samples, 0.07%)</title><rect x="77.9061%" y="213" width="0.0691%" height="15" fill="rgb(212,144,35)" fg:x="193878" fg:w="172"/><text x="78.1561%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (299 samples, 0.12%)</title><rect x="77.9781%" y="213" width="0.1201%" height="15" fill="rgb(228,63,44)" fg:x="194057" fg:w="299"/><text x="78.2281%" y="223.50"></text></g><g><title>powergraph`__rdl_alloc (40 samples, 0.02%)</title><rect x="78.1063%" y="213" width="0.0161%" height="15" fill="rgb(228,109,6)" fg:x="194376" fg:w="40"/><text x="78.3563%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (284 samples, 0.11%)</title><rect x="78.1786%" y="197" width="0.1141%" height="15" fill="rgb(238,117,24)" fg:x="194556" fg:w="284"/><text x="78.4286%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (261 samples, 0.10%)</title><rect x="78.1878%" y="181" width="0.1049%" height="15" fill="rgb(242,26,26)" fg:x="194579" fg:w="261"/><text x="78.4378%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (57 samples, 0.02%)</title><rect x="78.3056%" y="181" width="0.0229%" height="15" fill="rgb(221,92,48)" fg:x="194872" fg:w="57"/><text x="78.5556%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (46 samples, 0.02%)</title><rect x="78.3100%" y="165" width="0.0185%" height="15" fill="rgb(209,209,32)" fg:x="194883" fg:w="46"/><text x="78.5600%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (34 samples, 0.01%)</title><rect x="78.3365%" y="165" width="0.0137%" height="15" fill="rgb(221,70,22)" fg:x="194949" fg:w="34"/><text x="78.5865%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (247 samples, 0.10%)</title><rect x="78.2947%" y="197" width="0.0993%" height="15" fill="rgb(248,145,5)" fg:x="194845" fg:w="247"/><text x="78.5447%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (162 samples, 0.07%)</title><rect x="78.3289%" y="181" width="0.0651%" height="15" fill="rgb(226,116,26)" fg:x="194930" fg:w="162"/><text x="78.5789%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (109 samples, 0.04%)</title><rect x="78.3502%" y="165" width="0.0438%" height="15" fill="rgb(244,5,17)" fg:x="194983" fg:w="109"/><text x="78.6002%" y="175.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (1,287 samples, 0.52%)</title><rect x="77.8776%" y="229" width="0.5172%" height="15" fill="rgb(252,159,33)" fg:x="193807" fg:w="1287"/><text x="78.1276%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (677 samples, 0.27%)</title><rect x="78.1227%" y="213" width="0.2720%" height="15" fill="rgb(206,71,0)" fg:x="194417" fg:w="677"/><text x="78.3727%" y="223.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (13,078 samples, 5.26%)</title><rect x="73.1838%" y="245" width="5.2551%" height="15" fill="rgb(233,118,54)" fg:x="182126" fg:w="13078"/><text x="73.4338%" y="255.50">powerg..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (110 samples, 0.04%)</title><rect x="78.3948%" y="229" width="0.0442%" height="15" fill="rgb(234,83,48)" fg:x="195094" fg:w="110"/><text x="78.6448%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (176 samples, 0.07%)</title><rect x="78.4643%" y="245" width="0.0707%" height="15" fill="rgb(228,3,54)" fg:x="195267" fg:w="176"/><text x="78.7143%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (15,698 samples, 6.31%)</title><rect x="72.2391%" y="261" width="6.3079%" height="15" fill="rgb(226,155,13)" fg:x="179775" fg:w="15698"/><text x="72.4891%" y="271.50">powergra..</text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (30 samples, 0.01%)</title><rect x="78.5350%" y="245" width="0.0121%" height="15" fill="rgb(241,28,37)" fg:x="195443" fg:w="30"/><text x="78.7850%" y="255.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (15,867 samples, 6.38%)</title><rect x="72.1720%" y="277" width="6.3758%" height="15" fill="rgb(233,93,10)" fg:x="179608" fg:w="15867"/><text x="72.4220%" y="287.50">powergra..</text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (146 samples, 0.06%)</title><rect x="78.5511%" y="277" width="0.0587%" height="15" fill="rgb(225,113,19)" fg:x="195483" fg:w="146"/><text x="78.8011%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (146 samples, 0.06%)</title><rect x="78.6101%" y="261" width="0.0587%" height="15" fill="rgb(241,2,18)" fg:x="195630" fg:w="146"/><text x="78.8601%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (39 samples, 0.02%)</title><rect x="78.6688%" y="261" width="0.0157%" height="15" fill="rgb(228,207,21)" fg:x="195776" fg:w="39"/><text x="78.9188%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.01%)</title><rect x="78.6849%" y="261" width="0.0108%" height="15" fill="rgb(213,211,35)" fg:x="195816" fg:w="27"/><text x="78.9349%" y="271.50"></text></g><g><title>powergraph`DYLD-STUB$$free (71 samples, 0.03%)</title><rect x="78.6957%" y="261" width="0.0285%" height="15" fill="rgb(209,83,10)" fg:x="195843" fg:w="71"/><text x="78.9457%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (356 samples, 0.14%)</title><rect x="78.7990%" y="245" width="0.1431%" height="15" fill="rgb(209,164,1)" fg:x="196100" fg:w="356"/><text x="79.0490%" y="255.50"></text></g><g><title>libsystem_platform.dylib`__bzero (81 samples, 0.03%)</title><rect x="78.9473%" y="245" width="0.0325%" height="15" fill="rgb(213,184,43)" fg:x="196469" fg:w="81"/><text x="79.1973%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (271 samples, 0.11%)</title><rect x="78.9798%" y="245" width="0.1089%" height="15" fill="rgb(231,61,34)" fg:x="196550" fg:w="271"/><text x="79.2298%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (1,204 samples, 0.48%)</title><rect x="78.6101%" y="277" width="0.4838%" height="15" fill="rgb(235,75,3)" fg:x="195630" fg:w="1204"/><text x="78.8601%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (903 samples, 0.36%)</title><rect x="78.7311%" y="261" width="0.3629%" height="15" fill="rgb(220,106,47)" fg:x="195931" fg:w="903"/><text x="78.9811%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (32 samples, 0.01%)</title><rect x="79.1144%" y="261" width="0.0129%" height="15" fill="rgb(210,196,33)" fg:x="196885" fg:w="32"/><text x="79.3644%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.01%)</title><rect x="79.1152%" y="245" width="0.0121%" height="15" fill="rgb(229,154,42)" fg:x="196887" fg:w="30"/><text x="79.3652%" y="255.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,397 samples, 0.56%)</title><rect x="79.4516%" y="245" width="0.5614%" height="15" fill="rgb(228,114,26)" fg:x="197724" fg:w="1397"/><text x="79.7016%" y="255.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (354 samples, 0.14%)</title><rect x="80.0133%" y="245" width="0.1422%" height="15" fill="rgb(208,144,1)" fg:x="199122" fg:w="354"/><text x="80.2633%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (84 samples, 0.03%)</title><rect x="80.2769%" y="213" width="0.0338%" height="15" fill="rgb(239,112,37)" fg:x="199778" fg:w="84"/><text x="80.5269%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (88 samples, 0.04%)</title><rect x="80.2761%" y="229" width="0.0354%" height="15" fill="rgb(210,96,50)" fg:x="199776" fg:w="88"/><text x="80.5261%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,599 samples, 1.04%)</title><rect x="80.3143%" y="229" width="1.0444%" height="15" fill="rgb(222,178,2)" fg:x="199871" fg:w="2599"/><text x="80.5643%" y="239.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (462 samples, 0.19%)</title><rect x="81.3595%" y="229" width="0.1856%" height="15" fill="rgb(226,74,18)" fg:x="202472" fg:w="462"/><text x="81.6095%" y="239.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6,024 samples, 2.42%)</title><rect x="79.1297%" y="261" width="2.4206%" height="15" fill="rgb(225,67,54)" fg:x="196923" fg:w="6024"/><text x="79.3797%" y="271.50">po..</text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3,471 samples, 1.39%)</title><rect x="80.1556%" y="245" width="1.3948%" height="15" fill="rgb(251,92,32)" fg:x="199476" fg:w="3471"/><text x="80.4056%" y="255.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::from_iter (6,115 samples, 2.46%)</title><rect x="79.0940%" y="277" width="2.4572%" height="15" fill="rgb(228,149,22)" fg:x="196834" fg:w="6115"/><text x="79.3440%" y="287.50">po..</text></g><g><title>powergraph`powergraph::edge_repository::EdgeRepository::subgraph (29,424 samples, 11.82%)</title><rect x="69.7405%" y="293" width="11.8235%" height="15" fill="rgb(243,54,13)" fg:x="173557" fg:w="29424"/><text x="69.9905%" y="303.50">powergraph`powergr..</text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (42 samples, 0.02%)</title><rect x="81.5925%" y="277" width="0.0169%" height="15" fill="rgb(243,180,28)" fg:x="203052" fg:w="42"/><text x="81.8425%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (106 samples, 0.04%)</title><rect x="81.6600%" y="261" width="0.0426%" height="15" fill="rgb(208,167,24)" fg:x="203220" fg:w="106"/><text x="81.9100%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (188 samples, 0.08%)</title><rect x="81.7030%" y="261" width="0.0755%" height="15" fill="rgb(245,73,45)" fg:x="203327" fg:w="188"/><text x="81.9530%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (135 samples, 0.05%)</title><rect x="81.7786%" y="261" width="0.0542%" height="15" fill="rgb(237,203,48)" fg:x="203515" fg:w="135"/><text x="82.0286%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (48 samples, 0.02%)</title><rect x="81.8336%" y="261" width="0.0193%" height="15" fill="rgb(211,197,16)" fg:x="203652" fg:w="48"/><text x="82.0836%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (592 samples, 0.24%)</title><rect x="81.8529%" y="261" width="0.2379%" height="15" fill="rgb(243,99,51)" fg:x="203700" fg:w="592"/><text x="82.1029%" y="271.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (225 samples, 0.09%)</title><rect x="82.1077%" y="261" width="0.0904%" height="15" fill="rgb(215,123,29)" fg:x="204334" fg:w="225"/><text x="82.3577%" y="271.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (418 samples, 0.17%)</title><rect x="82.2728%" y="245" width="0.1680%" height="15" fill="rgb(239,186,37)" fg:x="204745" fg:w="418"/><text x="82.5228%" y="255.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (216 samples, 0.09%)</title><rect x="82.4440%" y="245" width="0.0868%" height="15" fill="rgb(252,136,39)" fg:x="205171" fg:w="216"/><text x="82.6940%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (66 samples, 0.03%)</title><rect x="82.5919%" y="229" width="0.0265%" height="15" fill="rgb(223,213,32)" fg:x="205539" fg:w="66"/><text x="82.8419%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (60 samples, 0.02%)</title><rect x="82.6325%" y="229" width="0.0241%" height="15" fill="rgb(233,115,5)" fg:x="205640" fg:w="60"/><text x="82.8825%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (378 samples, 0.15%)</title><rect x="82.6594%" y="229" width="0.1519%" height="15" fill="rgb(207,226,44)" fg:x="205707" fg:w="378"/><text x="82.9094%" y="239.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (84 samples, 0.03%)</title><rect x="82.8149%" y="229" width="0.0338%" height="15" fill="rgb(208,126,0)" fg:x="206094" fg:w="84"/><text x="83.0649%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (32 samples, 0.01%)</title><rect x="82.8615%" y="213" width="0.0129%" height="15" fill="rgb(244,66,21)" fg:x="206210" fg:w="32"/><text x="83.1115%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (840 samples, 0.34%)</title><rect x="82.5376%" y="245" width="0.3375%" height="15" fill="rgb(222,97,12)" fg:x="205404" fg:w="840"/><text x="82.7876%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (66 samples, 0.03%)</title><rect x="82.8487%" y="229" width="0.0265%" height="15" fill="rgb(219,213,19)" fg:x="206178" fg:w="66"/><text x="83.0987%" y="239.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,695 samples, 0.68%)</title><rect x="82.1981%" y="261" width="0.6811%" height="15" fill="rgb(252,169,30)" fg:x="204559" fg:w="1695"/><text x="82.4481%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (3,178 samples, 1.28%)</title><rect x="81.6094%" y="277" width="1.2770%" height="15" fill="rgb(206,32,51)" fg:x="203094" fg:w="3178"/><text x="81.8594%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (45 samples, 0.02%)</title><rect x="82.8900%" y="261" width="0.0181%" height="15" fill="rgb(250,172,42)" fg:x="206281" fg:w="45"/><text x="83.1400%" y="271.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (3,356 samples, 1.35%)</title><rect x="81.5640%" y="293" width="1.3485%" height="15" fill="rgb(209,34,43)" fg:x="202981" fg:w="3356"/><text x="81.8140%" y="303.50"></text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (65 samples, 0.03%)</title><rect x="82.8864%" y="277" width="0.0261%" height="15" fill="rgb(223,11,35)" fg:x="206272" fg:w="65"/><text x="83.1364%" y="287.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,167 samples, 0.47%)</title><rect x="83.0492%" y="261" width="0.4689%" height="15" fill="rgb(251,219,26)" fg:x="206677" fg:w="1167"/><text x="83.2992%" y="271.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (273 samples, 0.11%)</title><rect x="83.5181%" y="261" width="0.1097%" height="15" fill="rgb(231,119,3)" fg:x="207844" fg:w="273"/><text x="83.7681%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (1,726 samples, 0.69%)</title><rect x="82.9363%" y="277" width="0.6936%" height="15" fill="rgb(216,97,11)" fg:x="206396" fg:w="1726"/><text x="83.1863%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (103 samples, 0.04%)</title><rect x="83.6354%" y="261" width="0.0414%" height="15" fill="rgb(223,59,9)" fg:x="208136" fg:w="103"/><text x="83.8854%" y="271.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::intersection (1,920 samples, 0.77%)</title><rect x="82.9150%" y="293" width="0.7715%" height="15" fill="rgb(233,93,31)" fg:x="206343" fg:w="1920"/><text x="83.1650%" y="303.50"></text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (141 samples, 0.06%)</title><rect x="83.6298%" y="277" width="0.0567%" height="15" fill="rgb(239,81,33)" fg:x="208122" fg:w="141"/><text x="83.8798%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (54 samples, 0.02%)</title><rect x="83.6885%" y="277" width="0.0217%" height="15" fill="rgb(213,120,34)" fg:x="208268" fg:w="54"/><text x="83.9385%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (91 samples, 0.04%)</title><rect x="83.7291%" y="261" width="0.0366%" height="15" fill="rgb(243,49,53)" fg:x="208369" fg:w="91"/><text x="83.9791%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (144 samples, 0.06%)</title><rect x="83.8114%" y="245" width="0.0579%" height="15" fill="rgb(247,216,33)" fg:x="208574" fg:w="144"/><text x="84.0614%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (93 samples, 0.04%)</title><rect x="83.8741%" y="245" width="0.0374%" height="15" fill="rgb(226,26,14)" fg:x="208730" fg:w="93"/><text x="84.1241%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_inner_table (471 samples, 0.19%)</title><rect x="83.7246%" y="277" width="0.1893%" height="15" fill="rgb(215,49,53)" fg:x="208358" fg:w="471"/><text x="83.9746%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::drop_elements (320 samples, 0.13%)</title><rect x="83.7853%" y="261" width="0.1286%" height="15" fill="rgb(245,162,40)" fg:x="208509" fg:w="320"/><text x="84.0353%" y="271.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (50 samples, 0.02%)</title><rect x="83.9260%" y="261" width="0.0201%" height="15" fill="rgb(229,68,17)" fg:x="208859" fg:w="50"/><text x="84.1760%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (83 samples, 0.03%)</title><rect x="83.9802%" y="245" width="0.0334%" height="15" fill="rgb(213,182,10)" fg:x="208994" fg:w="83"/><text x="84.2302%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (120 samples, 0.05%)</title><rect x="84.0136%" y="245" width="0.0482%" height="15" fill="rgb(245,125,30)" fg:x="209077" fg:w="120"/><text x="84.2636%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (80 samples, 0.03%)</title><rect x="84.0618%" y="245" width="0.0321%" height="15" fill="rgb(232,202,2)" fg:x="209197" fg:w="80"/><text x="84.3118%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (33 samples, 0.01%)</title><rect x="84.0939%" y="245" width="0.0133%" height="15" fill="rgb(237,140,51)" fg:x="209277" fg:w="33"/><text x="84.3439%" y="255.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (433 samples, 0.17%)</title><rect x="84.1072%" y="245" width="0.1740%" height="15" fill="rgb(236,157,25)" fg:x="209310" fg:w="433"/><text x="84.3572%" y="255.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (136 samples, 0.05%)</title><rect x="84.2985%" y="245" width="0.0546%" height="15" fill="rgb(219,209,0)" fg:x="209786" fg:w="136"/><text x="84.5485%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (25 samples, 0.01%)</title><rect x="84.4066%" y="229" width="0.0100%" height="15" fill="rgb(240,116,54)" fg:x="210055" fg:w="25"/><text x="84.6566%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (283 samples, 0.11%)</title><rect x="84.4166%" y="229" width="0.1137%" height="15" fill="rgb(216,10,36)" fg:x="210080" fg:w="283"/><text x="84.6666%" y="239.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (167 samples, 0.07%)</title><rect x="84.5327%" y="229" width="0.0671%" height="15" fill="rgb(222,72,44)" fg:x="210369" fg:w="167"/><text x="84.7827%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (55 samples, 0.02%)</title><rect x="84.6460%" y="213" width="0.0221%" height="15" fill="rgb(232,159,9)" fg:x="210651" fg:w="55"/><text x="84.8960%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (48 samples, 0.02%)</title><rect x="84.6770%" y="213" width="0.0193%" height="15" fill="rgb(210,39,32)" fg:x="210728" fg:w="48"/><text x="84.9270%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (232 samples, 0.09%)</title><rect x="84.6967%" y="213" width="0.0932%" height="15" fill="rgb(216,194,45)" fg:x="210777" fg:w="232"/><text x="84.9467%" y="223.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (73 samples, 0.03%)</title><rect x="84.7939%" y="213" width="0.0293%" height="15" fill="rgb(218,18,35)" fg:x="211019" fg:w="73"/><text x="85.0439%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (589 samples, 0.24%)</title><rect x="84.6051%" y="229" width="0.2367%" height="15" fill="rgb(207,83,51)" fg:x="210549" fg:w="589"/><text x="84.8551%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (46 samples, 0.02%)</title><rect x="84.8233%" y="213" width="0.0185%" height="15" fill="rgb(225,63,43)" fg:x="211092" fg:w="46"/><text x="85.0733%" y="223.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,227 samples, 0.49%)</title><rect x="84.3531%" y="245" width="0.4930%" height="15" fill="rgb(207,57,36)" fg:x="209922" fg:w="1227"/><text x="84.6031%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (2,249 samples, 0.90%)</title><rect x="83.9461%" y="261" width="0.9037%" height="15" fill="rgb(216,99,33)" fg:x="208909" fg:w="2249"/><text x="84.1961%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (39 samples, 0.02%)</title><rect x="84.8546%" y="245" width="0.0157%" height="15" fill="rgb(225,42,16)" fg:x="211170" fg:w="39"/><text x="85.1046%" y="255.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::difference (2,385 samples, 0.96%)</title><rect x="83.9139%" y="277" width="0.9584%" height="15" fill="rgb(220,201,45)" fg:x="208829" fg:w="2385"/><text x="84.1639%" y="287.50"></text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (56 samples, 0.02%)</title><rect x="84.8498%" y="261" width="0.0225%" height="15" fill="rgb(225,33,4)" fg:x="211158" fg:w="56"/><text x="85.0998%" y="271.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::is_proper_subset_of (2,952 samples, 1.19%)</title><rect x="83.6865%" y="293" width="1.1862%" height="15" fill="rgb(224,33,50)" fg:x="208263" fg:w="2952"/><text x="83.9365%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_free (112 samples, 0.05%)</title><rect x="84.9161%" y="277" width="0.0450%" height="15" fill="rgb(246,198,51)" fg:x="211323" fg:w="112"/><text x="85.1661%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (164 samples, 0.07%)</title><rect x="84.9611%" y="277" width="0.0659%" height="15" fill="rgb(205,22,4)" fg:x="211435" fg:w="164"/><text x="85.2111%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (27 samples, 0.01%)</title><rect x="85.0443%" y="277" width="0.0108%" height="15" fill="rgb(206,3,8)" fg:x="211642" fg:w="27"/><text x="85.2943%" y="287.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (51 samples, 0.02%)</title><rect x="85.0551%" y="277" width="0.0205%" height="15" fill="rgb(251,23,15)" fg:x="211669" fg:w="51"/><text x="85.3051%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (273 samples, 0.11%)</title><rect x="85.1339%" y="261" width="0.1097%" height="15" fill="rgb(252,88,28)" fg:x="211865" fg:w="273"/><text x="85.3839%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (395 samples, 0.16%)</title><rect x="85.2460%" y="261" width="0.1587%" height="15" fill="rgb(212,127,14)" fg:x="212144" fg:w="395"/><text x="85.4960%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (485 samples, 0.19%)</title><rect x="85.4047%" y="261" width="0.1949%" height="15" fill="rgb(247,145,37)" fg:x="212539" fg:w="485"/><text x="85.6547%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (174 samples, 0.07%)</title><rect x="85.5996%" y="261" width="0.0699%" height="15" fill="rgb(209,117,53)" fg:x="213024" fg:w="174"/><text x="85.8496%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (124 samples, 0.05%)</title><rect x="85.6197%" y="245" width="0.0498%" height="15" fill="rgb(212,90,42)" fg:x="213074" fg:w="124"/><text x="85.8697%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (123 samples, 0.05%)</title><rect x="85.6201%" y="229" width="0.0494%" height="15" fill="rgb(218,164,37)" fg:x="213075" fg:w="123"/><text x="85.8701%" y="239.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (36 samples, 0.01%)</title><rect x="85.6695%" y="261" width="0.0145%" height="15" fill="rgb(246,65,34)" fg:x="213198" fg:w="36"/><text x="85.9195%" y="271.50"></text></g><g><title>powergraph`__rdl_alloc (30 samples, 0.01%)</title><rect x="85.6924%" y="261" width="0.0121%" height="15" fill="rgb(231,100,33)" fg:x="213255" fg:w="30"/><text x="85.9424%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (32 samples, 0.01%)</title><rect x="85.7258%" y="245" width="0.0129%" height="15" fill="rgb(228,126,14)" fg:x="213338" fg:w="32"/><text x="85.9758%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (26 samples, 0.01%)</title><rect x="85.7282%" y="229" width="0.0104%" height="15" fill="rgb(215,173,21)" fg:x="213344" fg:w="26"/><text x="85.9782%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,651 samples, 0.66%)</title><rect x="85.0756%" y="277" width="0.6634%" height="15" fill="rgb(210,6,40)" fg:x="211720" fg:w="1651"/><text x="85.3256%" y="287.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (86 samples, 0.03%)</title><rect x="85.7045%" y="261" width="0.0346%" height="15" fill="rgb(212,48,18)" fg:x="213285" fg:w="86"/><text x="85.9545%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (87 samples, 0.03%)</title><rect x="85.7732%" y="261" width="0.0350%" height="15" fill="rgb(230,214,11)" fg:x="213456" fg:w="87"/><text x="86.0232%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (174 samples, 0.07%)</title><rect x="85.8081%" y="261" width="0.0699%" height="15" fill="rgb(254,105,39)" fg:x="213543" fg:w="174"/><text x="86.0581%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (158 samples, 0.06%)</title><rect x="85.8877%" y="261" width="0.0635%" height="15" fill="rgb(245,158,5)" fg:x="213741" fg:w="158"/><text x="86.1377%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (32 samples, 0.01%)</title><rect x="85.9548%" y="261" width="0.0129%" height="15" fill="rgb(249,208,11)" fg:x="213908" fg:w="32"/><text x="86.2048%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 0.01%)</title><rect x="85.9966%" y="245" width="0.0108%" height="15" fill="rgb(210,39,28)" fg:x="214012" fg:w="27"/><text x="86.2466%" y="255.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (60 samples, 0.02%)</title><rect x="85.9837%" y="261" width="0.0241%" height="15" fill="rgb(211,56,53)" fg:x="213980" fg:w="60"/><text x="86.2337%" y="271.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (170 samples, 0.07%)</title><rect x="86.0079%" y="261" width="0.0683%" height="15" fill="rgb(226,201,30)" fg:x="214040" fg:w="170"/><text x="86.2579%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (902 samples, 0.36%)</title><rect x="85.7394%" y="277" width="0.3625%" height="15" fill="rgb(239,101,34)" fg:x="213372" fg:w="902"/><text x="85.9894%" y="287.50"></text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (45 samples, 0.02%)</title><rect x="86.0838%" y="261" width="0.0181%" height="15" fill="rgb(226,209,5)" fg:x="214229" fg:w="45"/><text x="86.3338%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (66 samples, 0.03%)</title><rect x="86.1159%" y="261" width="0.0265%" height="15" fill="rgb(250,105,47)" fg:x="214309" fg:w="66"/><text x="86.3659%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (51 samples, 0.02%)</title><rect x="86.1425%" y="261" width="0.0205%" height="15" fill="rgb(230,72,3)" fg:x="214375" fg:w="51"/><text x="86.3925%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (164 samples, 0.07%)</title><rect x="86.2405%" y="245" width="0.0659%" height="15" fill="rgb(232,218,39)" fg:x="214619" fg:w="164"/><text x="86.4905%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (266 samples, 0.11%)</title><rect x="86.3068%" y="245" width="0.1069%" height="15" fill="rgb(248,166,6)" fg:x="214784" fg:w="266"/><text x="86.5568%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (481 samples, 0.19%)</title><rect x="86.4137%" y="245" width="0.1933%" height="15" fill="rgb(247,89,20)" fg:x="215050" fg:w="481"/><text x="86.6637%" y="255.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (174 samples, 0.07%)</title><rect x="86.6070%" y="245" width="0.0699%" height="15" fill="rgb(248,130,54)" fg:x="215531" fg:w="174"/><text x="86.8570%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (90 samples, 0.04%)</title><rect x="86.6407%" y="229" width="0.0362%" height="15" fill="rgb(234,196,4)" fg:x="215615" fg:w="90"/><text x="86.8907%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (90 samples, 0.04%)</title><rect x="86.6407%" y="213" width="0.0362%" height="15" fill="rgb(250,143,31)" fg:x="215615" fg:w="90"/><text x="86.8907%" y="223.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (32 samples, 0.01%)</title><rect x="86.6769%" y="245" width="0.0129%" height="15" fill="rgb(211,110,34)" fg:x="215705" fg:w="32"/><text x="86.9269%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (1,337 samples, 0.54%)</title><rect x="86.1686%" y="261" width="0.5372%" height="15" fill="rgb(215,124,48)" fg:x="214440" fg:w="1337"/><text x="86.4186%" y="271.50"></text></g><g><title>powergraph`__rdl_alloc (25 samples, 0.01%)</title><rect x="86.6958%" y="245" width="0.0100%" height="15" fill="rgb(216,46,13)" fg:x="215752" fg:w="25"/><text x="86.9458%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (92 samples, 0.04%)</title><rect x="86.7159%" y="245" width="0.0370%" height="15" fill="rgb(205,184,25)" fg:x="215802" fg:w="92"/><text x="86.9659%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (119 samples, 0.05%)</title><rect x="86.7528%" y="245" width="0.0478%" height="15" fill="rgb(228,1,10)" fg:x="215894" fg:w="119"/><text x="87.0028%" y="255.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (325 samples, 0.13%)</title><rect x="86.7058%" y="261" width="0.1306%" height="15" fill="rgb(213,116,27)" fg:x="215777" fg:w="325"/><text x="86.9558%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (69 samples, 0.03%)</title><rect x="86.8087%" y="245" width="0.0277%" height="15" fill="rgb(241,95,50)" fg:x="216033" fg:w="69"/><text x="87.0587%" y="255.50"></text></g><g><title>powergraph`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,832 samples, 0.74%)</title><rect x="86.1067%" y="277" width="0.7362%" height="15" fill="rgb(238,48,32)" fg:x="214286" fg:w="1832"/><text x="86.3567%" y="287.50"></text></g><g><title>powergraph`DYLD-STUB$$free (25 samples, 0.01%)</title><rect x="86.8429%" y="277" width="0.0100%" height="15" fill="rgb(235,113,49)" fg:x="216118" fg:w="25"/><text x="87.0929%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (205 samples, 0.08%)</title><rect x="86.8746%" y="261" width="0.0824%" height="15" fill="rgb(205,127,43)" fg:x="216197" fg:w="205"/><text x="87.1246%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (58 samples, 0.02%)</title><rect x="86.9570%" y="261" width="0.0233%" height="15" fill="rgb(250,162,2)" fg:x="216402" fg:w="58"/><text x="87.2070%" y="271.50"></text></g><g><title>powergraph`DYLD-STUB$$free (54 samples, 0.02%)</title><rect x="86.9811%" y="261" width="0.0217%" height="15" fill="rgb(220,13,41)" fg:x="216462" fg:w="54"/><text x="87.2311%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (27 samples, 0.01%)</title><rect x="87.0341%" y="245" width="0.0108%" height="15" fill="rgb(249,221,25)" fg:x="216594" fg:w="27"/><text x="87.2841%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (366 samples, 0.15%)</title><rect x="87.0450%" y="245" width="0.1471%" height="15" fill="rgb(215,208,19)" fg:x="216621" fg:w="366"/><text x="87.2950%" y="255.50"></text></g><g><title>libsystem_platform.dylib`__bzero (40 samples, 0.02%)</title><rect x="87.1920%" y="245" width="0.0161%" height="15" fill="rgb(236,175,2)" fg:x="216987" fg:w="40"/><text x="87.4420%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (182 samples, 0.07%)</title><rect x="87.2081%" y="245" width="0.0731%" height="15" fill="rgb(241,52,2)" fg:x="217027" fg:w="182"/><text x="87.4581%" y="255.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (1,013 samples, 0.41%)</title><rect x="86.8746%" y="277" width="0.4071%" height="15" fill="rgb(248,140,14)" fg:x="216197" fg:w="1013"/><text x="87.1246%" y="287.50"></text></g><g><title>powergraph`core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (693 samples, 0.28%)</title><rect x="87.0032%" y="261" width="0.2785%" height="15" fill="rgb(253,22,42)" fg:x="216517" fg:w="693"/><text x="87.2532%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (50 samples, 0.02%)</title><rect x="87.2893%" y="277" width="0.0201%" height="15" fill="rgb(234,61,47)" fg:x="217229" fg:w="50"/><text x="87.5393%" y="287.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::iter (6,065 samples, 2.44%)</title><rect x="84.8727%" y="293" width="2.4371%" height="15" fill="rgb(208,226,15)" fg:x="211215" fg:w="6065"/><text x="85.1227%" y="303.50">po..</text></g><g><title>libsystem_platform.dylib`_platform_memset (73 samples, 0.03%)</title><rect x="87.3463%" y="261" width="0.0293%" height="15" fill="rgb(217,221,4)" fg:x="217371" fg:w="73"/><text x="87.5963%" y="271.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (48 samples, 0.02%)</title><rect x="87.5280%" y="245" width="0.0193%" height="15" fill="rgb(212,174,34)" fg:x="217823" fg:w="48"/><text x="87.7780%" y="255.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (290 samples, 0.12%)</title><rect x="87.5481%" y="245" width="0.1165%" height="15" fill="rgb(253,83,4)" fg:x="217873" fg:w="290"/><text x="87.7981%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (306 samples, 0.12%)</title><rect x="87.8667%" y="229" width="0.1230%" height="15" fill="rgb(250,195,49)" fg:x="218666" fg:w="306"/><text x="88.1167%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (836 samples, 0.34%)</title><rect x="87.9901%" y="229" width="0.3359%" height="15" fill="rgb(241,192,25)" fg:x="218973" fg:w="836"/><text x="88.2401%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (675 samples, 0.27%)</title><rect x="88.3264%" y="229" width="0.2712%" height="15" fill="rgb(208,124,10)" fg:x="219810" fg:w="675"/><text x="88.5764%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::clone::Clone&gt;::clone (157 samples, 0.06%)</title><rect x="88.5985%" y="229" width="0.0631%" height="15" fill="rgb(222,33,0)" fg:x="220487" fg:w="157"/><text x="88.8485%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (41 samples, 0.02%)</title><rect x="88.6451%" y="213" width="0.0165%" height="15" fill="rgb(234,209,28)" fg:x="220603" fg:w="41"/><text x="88.8951%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (41 samples, 0.02%)</title><rect x="88.6451%" y="197" width="0.0165%" height="15" fill="rgb(224,11,23)" fg:x="220603" fg:w="41"/><text x="88.8951%" y="207.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (607 samples, 0.24%)</title><rect x="88.6615%" y="229" width="0.2439%" height="15" fill="rgb(232,99,1)" fg:x="220644" fg:w="607"/><text x="88.9115%" y="239.50"></text></g><g><title>powergraph`DYLD-STUB$$malloc (53 samples, 0.02%)</title><rect x="88.9055%" y="229" width="0.0213%" height="15" fill="rgb(237,95,45)" fg:x="221251" fg:w="53"/><text x="89.1555%" y="239.50"></text></g><g><title>powergraph`DYLD-STUB$$memcpy (32 samples, 0.01%)</title><rect x="88.9268%" y="229" width="0.0129%" height="15" fill="rgb(208,109,11)" fg:x="221304" fg:w="32"/><text x="89.1768%" y="239.50"></text></g><g><title>powergraph`__rdl_alloc (51 samples, 0.02%)</title><rect x="88.9396%" y="229" width="0.0205%" height="15" fill="rgb(216,190,48)" fg:x="221336" fg:w="51"/><text x="89.1896%" y="239.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (194 samples, 0.08%)</title><rect x="88.9601%" y="229" width="0.0780%" height="15" fill="rgb(251,171,36)" fg:x="221387" fg:w="194"/><text x="89.2101%" y="239.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,085 samples, 0.44%)</title><rect x="89.2775%" y="213" width="0.4360%" height="15" fill="rgb(230,62,22)" fg:x="222177" fg:w="1085"/><text x="89.5275%" y="223.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (610 samples, 0.25%)</title><rect x="89.7180%" y="213" width="0.2451%" height="15" fill="rgb(225,114,35)" fg:x="223273" fg:w="610"/><text x="89.9680%" y="223.50"></text></g><g><title>powergraph`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (245 samples, 0.10%)</title><rect x="89.9960%" y="197" width="0.0984%" height="15" fill="rgb(215,118,42)" fg:x="223965" fg:w="245"/><text x="90.2460%" y="207.50"></text></g><g><title>powergraph`core::hash::BuildHasher::hash_one (51 samples, 0.02%)</title><rect x="90.0957%" y="197" width="0.0205%" height="15" fill="rgb(243,119,21)" fg:x="224213" fg:w="51"/><text x="90.3457%" y="207.50"></text></g><g><title>powergraph`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,701 samples, 1.09%)</title><rect x="89.0381%" y="229" width="1.0853%" height="15" fill="rgb(252,177,53)" fg:x="221581" fg:w="2701"/><text x="89.2881%" y="239.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (394 samples, 0.16%)</title><rect x="89.9651%" y="213" width="0.1583%" height="15" fill="rgb(237,209,29)" fg:x="223888" fg:w="394"/><text x="90.2151%" y="223.50"></text></g><g><title>powergraph`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,839 samples, 2.75%)</title><rect x="87.3757%" y="261" width="2.7481%" height="15" fill="rgb(212,65,23)" fg:x="217444" fg:w="6839"/><text x="87.6257%" y="271.50">po..</text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (6,120 samples, 2.46%)</title><rect x="87.6646%" y="245" width="2.4592%" height="15" fill="rgb(230,222,46)" fg:x="218163" fg:w="6120"/><text x="87.9146%" y="255.50">po..</text></g><g><title>powergraph`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (49 samples, 0.02%)</title><rect x="90.1310%" y="261" width="0.0197%" height="15" fill="rgb(215,135,32)" fg:x="224301" fg:w="49"/><text x="90.3810%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (107 samples, 0.04%)</title><rect x="90.1837%" y="245" width="0.0430%" height="15" fill="rgb(246,101,22)" fg:x="224432" fg:w="107"/><text x="90.4337%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (153 samples, 0.06%)</title><rect x="90.2307%" y="245" width="0.0615%" height="15" fill="rgb(206,107,13)" fg:x="224549" fg:w="153"/><text x="90.4807%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (28 samples, 0.01%)</title><rect x="90.3408%" y="197" width="0.0113%" height="15" fill="rgb(250,100,44)" fg:x="224823" fg:w="28"/><text x="90.5908%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (67 samples, 0.03%)</title><rect x="90.3332%" y="229" width="0.0269%" height="15" fill="rgb(231,147,38)" fg:x="224804" fg:w="67"/><text x="90.5832%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (54 samples, 0.02%)</title><rect x="90.3384%" y="213" width="0.0217%" height="15" fill="rgb(229,8,40)" fg:x="224817" fg:w="54"/><text x="90.5884%" y="223.50"></text></g><g><title>powergraph`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (522 samples, 0.21%)</title><rect x="90.1507%" y="261" width="0.2098%" height="15" fill="rgb(221,135,30)" fg:x="224350" fg:w="522"/><text x="90.4007%" y="271.50"></text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (138 samples, 0.06%)</title><rect x="90.3050%" y="245" width="0.0555%" height="15" fill="rgb(249,193,18)" fg:x="224734" fg:w="138"/><text x="90.5550%" y="255.50"></text></g><g><title>powergraph`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7,566 samples, 3.04%)</title><rect x="87.3303%" y="277" width="3.0403%" height="15" fill="rgb(209,133,39)" fg:x="217331" fg:w="7566"/><text x="87.5803%" y="287.50">pow..</text></g><g><title>powergraph`hashbrown::raw::RawTableInner::new_uninitialized (25 samples, 0.01%)</title><rect x="90.3605%" y="261" width="0.0100%" height="15" fill="rgb(232,100,14)" fg:x="224872" fg:w="25"/><text x="90.6105%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (58 samples, 0.02%)</title><rect x="90.3894%" y="261" width="0.0233%" height="15" fill="rgb(224,185,1)" fg:x="224944" fg:w="58"/><text x="90.6394%" y="271.50"></text></g><g><title>powergraph`powergraph::sets::Set&lt;T&gt;::union (7,728 samples, 3.11%)</title><rect x="87.3138%" y="293" width="3.1053%" height="15" fill="rgb(223,139,8)" fg:x="217290" fg:w="7728"/><text x="87.5638%" y="303.50">pow..</text></g><g><title>powergraph`std::thread::local::LocalKey&lt;T&gt;::with (98 samples, 0.04%)</title><rect x="90.3798%" y="277" width="0.0394%" height="15" fill="rgb(232,213,38)" fg:x="224920" fg:w="98"/><text x="90.6298%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10,965 samples, 4.41%)</title><rect x="90.4260%" y="277" width="4.4061%" height="15" fill="rgb(207,94,22)" fg:x="225035" fg:w="10965"/><text x="90.6760%" y="287.50">libsy..</text></g><g><title>powergraph`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (429 samples, 0.17%)</title><rect x="94.9458%" y="229" width="0.1724%" height="15" fill="rgb(219,183,54)" fg:x="236283" fg:w="429"/><text x="95.1958%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (50 samples, 0.02%)</title><rect x="95.2749%" y="213" width="0.0201%" height="15" fill="rgb(216,185,54)" fg:x="237102" fg:w="50"/><text x="95.5249%" y="223.50"></text></g><g><title>powergraph`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (29 samples, 0.01%)</title><rect x="95.2950%" y="213" width="0.0117%" height="15" fill="rgb(254,217,39)" fg:x="237152" fg:w="29"/><text x="95.5450%" y="223.50"></text></g><g><title>powergraph`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1,141 samples, 0.46%)</title><rect x="94.8513%" y="245" width="0.4585%" height="15" fill="rgb(240,178,23)" fg:x="236048" fg:w="1141"/><text x="95.1013%" y="255.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (468 samples, 0.19%)</title><rect x="95.1218%" y="229" width="0.1881%" height="15" fill="rgb(218,11,47)" fg:x="236721" fg:w="468"/><text x="95.3718%" y="239.50"></text></g><g><title>powergraph`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,432 samples, 0.58%)</title><rect x="94.8393%" y="261" width="0.5754%" height="15" fill="rgb(218,51,51)" fg:x="236018" fg:w="1432"/><text x="95.0893%" y="271.50"></text></g><g><title>powergraph`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (261 samples, 0.10%)</title><rect x="95.3098%" y="245" width="0.1049%" height="15" fill="rgb(238,126,27)" fg:x="237189" fg:w="261"/><text x="95.5598%" y="255.50"></text></g><g><title>powergraph`powergraph::similarity_matrix::SimilarityMatrix::remove_element (12,442 samples, 5.00%)</title><rect x="90.4191%" y="293" width="4.9996%" height="15" fill="rgb(249,202,22)" fg:x="225018" fg:w="12442"/><text x="90.6691%" y="303.50">powerg..</text></g><g><title>powergraph`itertools::Itertools::sorted (1,442 samples, 0.58%)</title><rect x="94.8393%" y="277" width="0.5794%" height="15" fill="rgb(254,195,49)" fg:x="236018" fg:w="1442"/><text x="95.0893%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (41 samples, 0.02%)</title><rect x="95.4292%" y="277" width="0.0165%" height="15" fill="rgb(208,123,14)" fg:x="237486" fg:w="41"/><text x="95.6792%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (27 samples, 0.01%)</title><rect x="95.4621%" y="277" width="0.0108%" height="15" fill="rgb(224,200,8)" fg:x="237568" fg:w="27"/><text x="95.7121%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9,440 samples, 3.79%)</title><rect x="95.4758%" y="277" width="3.7933%" height="15" fill="rgb(217,61,36)" fg:x="237602" fg:w="9440"/><text x="95.7258%" y="287.50">libs..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (61 samples, 0.02%)</title><rect x="99.2751%" y="261" width="0.0245%" height="15" fill="rgb(206,35,45)" fg:x="247057" fg:w="61"/><text x="99.5251%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (36 samples, 0.01%)</title><rect x="99.3374%" y="245" width="0.0145%" height="15" fill="rgb(217,65,33)" fg:x="247212" fg:w="36"/><text x="99.5874%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (42 samples, 0.02%)</title><rect x="99.3848%" y="149" width="0.0169%" height="15" fill="rgb(222,158,48)" fg:x="247330" fg:w="42"/><text x="99.6348%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (106 samples, 0.04%)</title><rect x="99.3711%" y="165" width="0.0426%" height="15" fill="rgb(254,2,54)" fg:x="247296" fg:w="106"/><text x="99.6211%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (123 samples, 0.05%)</title><rect x="99.3659%" y="181" width="0.0494%" height="15" fill="rgb(250,143,38)" fg:x="247283" fg:w="123"/><text x="99.6159%" y="191.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (141 samples, 0.06%)</title><rect x="99.3615%" y="229" width="0.0567%" height="15" fill="rgb(248,25,0)" fg:x="247272" fg:w="141"/><text x="99.6115%" y="239.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (138 samples, 0.06%)</title><rect x="99.3627%" y="213" width="0.0555%" height="15" fill="rgb(206,152,27)" fg:x="247275" fg:w="138"/><text x="99.6127%" y="223.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (130 samples, 0.05%)</title><rect x="99.3659%" y="197" width="0.0522%" height="15" fill="rgb(240,77,30)" fg:x="247283" fg:w="130"/><text x="99.6159%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.01%)</title><rect x="99.4246%" y="213" width="0.0104%" height="15" fill="rgb(231,5,3)" fg:x="247429" fg:w="26"/><text x="99.6746%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (31 samples, 0.01%)</title><rect x="99.4427%" y="133" width="0.0125%" height="15" fill="rgb(207,226,32)" fg:x="247474" fg:w="31"/><text x="99.6927%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (38 samples, 0.02%)</title><rect x="99.4411%" y="149" width="0.0153%" height="15" fill="rgb(222,207,47)" fg:x="247470" fg:w="38"/><text x="99.6911%" y="159.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (58 samples, 0.02%)</title><rect x="99.4350%" y="213" width="0.0233%" height="15" fill="rgb(229,115,45)" fg:x="247455" fg:w="58"/><text x="99.6850%" y="223.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (52 samples, 0.02%)</title><rect x="99.4374%" y="197" width="0.0209%" height="15" fill="rgb(224,191,6)" fg:x="247461" fg:w="52"/><text x="99.6874%" y="207.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (51 samples, 0.02%)</title><rect x="99.4378%" y="181" width="0.0205%" height="15" fill="rgb(230,227,24)" fg:x="247462" fg:w="51"/><text x="99.6878%" y="191.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (45 samples, 0.02%)</title><rect x="99.4402%" y="165" width="0.0181%" height="15" fill="rgb(228,80,19)" fg:x="247468" fg:w="45"/><text x="99.6902%" y="175.50"></text></g><g><title>powergraph`&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::fold (264 samples, 0.11%)</title><rect x="99.3547%" y="245" width="0.1061%" height="15" fill="rgb(247,229,0)" fg:x="247255" fg:w="264"/><text x="99.6047%" y="255.50"></text></g><g><title>powergraph`core::fmt::write (105 samples, 0.04%)</title><rect x="99.4186%" y="229" width="0.0422%" height="15" fill="rgb(237,194,15)" fg:x="247414" fg:w="105"/><text x="99.6686%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (37 samples, 0.01%)</title><rect x="99.4997%" y="133" width="0.0149%" height="15" fill="rgb(219,203,20)" fg:x="247616" fg:w="37"/><text x="99.7497%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (69 samples, 0.03%)</title><rect x="99.4981%" y="149" width="0.0277%" height="15" fill="rgb(234,128,8)" fg:x="247612" fg:w="69"/><text x="99.7481%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (140 samples, 0.06%)</title><rect x="99.4849%" y="165" width="0.0563%" height="15" fill="rgb(248,202,8)" fg:x="247579" fg:w="140"/><text x="99.7349%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.01%)</title><rect x="99.5307%" y="149" width="0.0104%" height="15" fill="rgb(206,104,37)" fg:x="247693" fg:w="26"/><text x="99.7807%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (159 samples, 0.06%)</title><rect x="99.4812%" y="181" width="0.0639%" height="15" fill="rgb(223,8,27)" fg:x="247570" fg:w="159"/><text x="99.7312%" y="191.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (185 samples, 0.07%)</title><rect x="99.4756%" y="213" width="0.0743%" height="15" fill="rgb(216,217,28)" fg:x="247556" fg:w="185"/><text x="99.7256%" y="223.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (178 samples, 0.07%)</title><rect x="99.4784%" y="197" width="0.0715%" height="15" fill="rgb(249,199,1)" fg:x="247563" fg:w="178"/><text x="99.7284%" y="207.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (193 samples, 0.08%)</title><rect x="99.4732%" y="229" width="0.0776%" height="15" fill="rgb(240,85,17)" fg:x="247550" fg:w="193"/><text x="99.7232%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (39 samples, 0.02%)</title><rect x="99.5552%" y="213" width="0.0157%" height="15" fill="rgb(206,108,45)" fg:x="247754" fg:w="39"/><text x="99.8052%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (41 samples, 0.02%)</title><rect x="99.5805%" y="133" width="0.0165%" height="15" fill="rgb(245,210,41)" fg:x="247817" fg:w="41"/><text x="99.8305%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (46 samples, 0.02%)</title><rect x="99.5789%" y="149" width="0.0185%" height="15" fill="rgb(206,13,37)" fg:x="247813" fg:w="46"/><text x="99.8289%" y="159.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (70 samples, 0.03%)</title><rect x="99.5708%" y="213" width="0.0281%" height="15" fill="rgb(250,61,18)" fg:x="247793" fg:w="70"/><text x="99.8208%" y="223.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (56 samples, 0.02%)</title><rect x="99.5765%" y="197" width="0.0225%" height="15" fill="rgb(235,172,48)" fg:x="247807" fg:w="56"/><text x="99.8265%" y="207.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (55 samples, 0.02%)</title><rect x="99.5769%" y="181" width="0.0221%" height="15" fill="rgb(249,201,17)" fg:x="247808" fg:w="55"/><text x="99.8269%" y="191.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (50 samples, 0.02%)</title><rect x="99.5789%" y="165" width="0.0201%" height="15" fill="rgb(219,208,6)" fg:x="247813" fg:w="50"/><text x="99.8289%" y="175.50"></text></g><g><title>powergraph`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (340 samples, 0.14%)</title><rect x="99.4656%" y="245" width="0.1366%" height="15" fill="rgb(248,31,23)" fg:x="247531" fg:w="340"/><text x="99.7156%" y="255.50"></text></g><g><title>powergraph`core::fmt::write (126 samples, 0.05%)</title><rect x="99.5516%" y="229" width="0.0506%" height="15" fill="rgb(245,15,42)" fg:x="247745" fg:w="126"/><text x="99.8016%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (54 samples, 0.02%)</title><rect x="99.6195%" y="229" width="0.0217%" height="15" fill="rgb(222,217,39)" fg:x="247914" fg:w="54"/><text x="99.8695%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (50 samples, 0.02%)</title><rect x="99.6858%" y="133" width="0.0201%" height="15" fill="rgb(210,219,27)" fg:x="248079" fg:w="50"/><text x="99.9358%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (40 samples, 0.02%)</title><rect x="99.7059%" y="133" width="0.0161%" height="15" fill="rgb(252,166,36)" fg:x="248129" fg:w="40"/><text x="99.9559%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (28 samples, 0.01%)</title><rect x="99.7292%" y="117" width="0.0113%" height="15" fill="rgb(245,132,34)" fg:x="248187" fg:w="28"/><text x="99.9792%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (57 samples, 0.02%)</title><rect x="99.7219%" y="133" width="0.0229%" height="15" fill="rgb(236,54,3)" fg:x="248169" fg:w="57"/><text x="99.9719%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (186 samples, 0.07%)</title><rect x="99.6749%" y="149" width="0.0747%" height="15" fill="rgb(241,173,43)" fg:x="248052" fg:w="186"/><text x="99.9249%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (232 samples, 0.09%)</title><rect x="99.6580%" y="165" width="0.0932%" height="15" fill="rgb(215,190,9)" fg:x="248010" fg:w="232"/><text x="99.9080%" y="175.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (278 samples, 0.11%)</title><rect x="99.6484%" y="197" width="0.1117%" height="15" fill="rgb(242,101,16)" fg:x="247986" fg:w="278"/><text x="99.8984%" y="207.50"></text></g><g><title>powergraph`alloc::raw_vec::finish_grow (258 samples, 0.10%)</title><rect x="99.6564%" y="181" width="0.1037%" height="15" fill="rgb(223,190,21)" fg:x="248006" fg:w="258"/><text x="99.9064%" y="191.50"></text></g><g><title>powergraph`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (302 samples, 0.12%)</title><rect x="99.6412%" y="229" width="0.1214%" height="15" fill="rgb(215,228,25)" fg:x="247968" fg:w="302"/><text x="99.8912%" y="239.50"></text></g><g><title>powergraph`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (286 samples, 0.11%)</title><rect x="99.6476%" y="213" width="0.1149%" height="15" fill="rgb(225,36,22)" fg:x="247984" fg:w="286"/><text x="99.8976%" y="223.50"></text></g><g><title>powergraph`&lt;powergraph::unordered_tuple::UnorderedTuple&lt;T&gt; as core::cmp::Ord&gt;::cmp (1,240 samples, 0.50%)</title><rect x="99.2695%" y="277" width="0.4983%" height="15" fill="rgb(251,106,46)" fg:x="247043" fg:w="1240"/><text x="99.5195%" y="287.50"></text></g><g><title>powergraph`itertools::Itertools::join (1,106 samples, 0.44%)</title><rect x="99.3233%" y="261" width="0.4444%" height="15" fill="rgb(208,90,1)" fg:x="247177" fg:w="1106"/><text x="99.5733%" y="271.50"></text></g><g><title>powergraph`core::fmt::write (387 samples, 0.16%)</title><rect x="99.6122%" y="245" width="0.1555%" height="15" fill="rgb(243,10,4)" fg:x="247896" fg:w="387"/><text x="99.8622%" y="255.50"></text></g><g><title>powergraph`powergraph::PowerGraph::decompose (247,547 samples, 99.47%)</title><rect x="0.3062%" y="309" width="99.4720%" height="15" fill="rgb(212,137,27)" fg:x="762" fg:w="247547"/><text x="0.5562%" y="319.50">powergraph`powergraph::PowerGraph::decompose</text></g><g><title>powergraph`powergraph::similarity_matrix::SimilarityMatrix::set_similarity (10,849 samples, 4.36%)</title><rect x="95.4187%" y="293" width="4.3595%" height="15" fill="rgb(231,220,49)" fg:x="237460" fg:w="10849"/><text x="95.6687%" y="303.50">power..</text></g><g><title>powergraph`powergraph::edge_repository::EdgeRepository::get_edge (50 samples, 0.02%)</title><rect x="99.7818%" y="309" width="0.0201%" height="15" fill="rgb(237,96,20)" fg:x="248318" fg:w="50"/><text x="100.0318%" y="319.50"></text></g><g><title>powergraph`&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.02%)</title><rect x="99.8875%" y="213" width="0.0201%" height="15" fill="rgb(239,229,30)" fg:x="248581" fg:w="50"/><text x="100.1375%" y="223.50"></text></g><g><title>powergraph`&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 0.03%)</title><rect x="99.9216%" y="197" width="0.0273%" height="15" fill="rgb(219,65,33)" fg:x="248666" fg:w="68"/><text x="100.1716%" y="207.50"></text></g><g><title>powergraph`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::ignore_str (260 samples, 0.10%)</title><rect x="99.8569%" y="229" width="0.1045%" height="15" fill="rgb(243,134,7)" fg:x="248505" fg:w="260"/><text x="100.1069%" y="239.50"></text></g><g><title>powergraph`serde_json::read::next_or_eof (134 samples, 0.05%)</title><rect x="99.9076%" y="213" width="0.0538%" height="15" fill="rgb(216,177,54)" fg:x="248631" fg:w="134"/><text x="100.1576%" y="223.50"></text></g><g><title>powergraph`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.01%)</title><rect x="99.9490%" y="197" width="0.0125%" height="15" fill="rgb(211,160,20)" fg:x="248734" fg:w="31"/><text x="100.1990%" y="207.50"></text></g><g><title>powergraph`serde::de::MapAccess::next_value (334 samples, 0.13%)</title><rect x="99.8477%" y="245" width="0.1342%" height="15" fill="rgb(239,85,39)" fg:x="248482" fg:w="334"/><text x="100.0977%" y="255.50"></text></g><g><title>powergraph`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (372 samples, 0.15%)</title><rect x="99.8369%" y="261" width="0.1495%" height="15" fill="rgb(232,125,22)" fg:x="248455" fg:w="372"/><text x="100.0869%" y="271.50"></text></g><g><title>powergraph`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (404 samples, 0.16%)</title><rect x="99.8308%" y="277" width="0.1623%" height="15" fill="rgb(244,57,34)" fg:x="248440" fg:w="404"/><text x="100.0808%" y="287.50"></text></g><g><title>all (248,861 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(214,203,32)" fg:x="0" fg:w="248861"/><text x="0.2500%" y="431.50"></text></g><g><title>dyld`start (248,861 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(207,58,43)" fg:x="0" fg:w="248861"/><text x="0.2500%" y="415.50">dyld`start</text></g><g><title>powergraph`main (248,861 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(215,193,15)" fg:x="0" fg:w="248861"/><text x="0.2500%" y="399.50">powergraph`main</text></g><g><title>powergraph`std::rt::lang_start_internal (248,861 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(232,15,44)" fg:x="0" fg:w="248861"/><text x="0.2500%" y="383.50">powergraph`std::rt::lang_start_internal</text></g><g><title>powergraph`std::rt::lang_start::_{{closure}} (248,861 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(212,3,48)" fg:x="0" fg:w="248861"/><text x="0.2500%" y="367.50">powergraph`std::rt::lang_start::_{{closure}}</text></g><g><title>powergraph`std::sys::backtrace::__rust_begin_short_backtrace (248,861 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(218,128,7)" fg:x="0" fg:w="248861"/><text x="0.2500%" y="351.50">powergraph`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>powergraph`powergraph::main (248,861 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(226,216,39)" fg:x="0" fg:w="248861"/><text x="0.2500%" y="335.50">powergraph`powergraph::main</text></g><g><title>powergraph`serde_json::de::from_reader (421 samples, 0.17%)</title><rect x="99.8308%" y="309" width="0.1692%" height="15" fill="rgb(243,47,51)" fg:x="248440" fg:w="421"/><text x="100.0808%" y="319.50"></text></g><g><title>powergraph`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (421 samples, 0.17%)</title><rect x="99.8308%" y="293" width="0.1692%" height="15" fill="rgb(241,183,40)" fg:x="248440" fg:w="421"/><text x="100.0808%" y="303.50"></text></g></svg></svg>